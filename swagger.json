{
  "basePath": "/api/v2",
  "consumes": [
    "application/json"
  ],
  "definitions": {
    "Bndbox": {
      "example": {
        "xmax": 100,
        "xmin": 1,
        "ymax": 100,
        "ymin": 1
      },
      "properties": {
        "xmax": {
          "description": "",
          "example": 100,
          "format": "int",
          "type": "integer"
        },
        "xmin": {
          "description": "",
          "example": 1,
          "format": "int",
          "type": "integer"
        },
        "ymax": {
          "description": "",
          "example": 100,
          "format": "int",
          "type": "integer"
        },
        "ymin": {
          "description": "",
          "example": 1,
          "format": "int",
          "type": "integer"
        }
      },
      "required": [
        "xmin",
        "ymin",
        "xmax",
        "ymax"
      ],
      "title": "Bndbox",
      "type": "object"
    },
    "CreateNewModelrequest": {
      "example": {
        "categories": [
          "{{category1}}",
          "{{category2}}"
        ],
        "model_type": [
          "ocr"
        ]
      },
      "properties": {
        "categories": {
          "description": "",
          "example": [
            "{{category1}}",
            "{{category2}}"
          ],
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "model_type": {
          "description": "Type of model, 'ocr' for OCR model",
          "example": "ocr",
          "type": "string"
        }
      },
      "required": [
        "categories"
      ],
      "title": "Create New Model Body",
      "type": "object"
    },
    "Datum": {
      "example": {
        "filename": "https://nanonets.s3-us-west-2.amazonaws.com/test-images/test1.jpg",
        "object": [
          {
            "bndbox": {
              "xmax": 100,
              "xmin": 1,
              "ymax": 100,
              "ymin": 1
            },
            "name": "{{category1}}"
          }
        ]
      },
      "properties": {
        "filename": {
          "description": "",
          "example": "https://nanonets.s3-us-west-2.amazonaws.com/test-images/test1.jpg",
          "type": "string"
        },
        "object": {
          "description": "",
          "example": [
            {
              "bndbox": {
                "xmax": 100,
                "xmin": 1,
                "ymax": 100,
                "ymin": 1
              },
              "name": "{{category1}}"
            }
          ],
          "items": {
            "$ref": "#/definitions/Object3"
          },
          "type": "array"
        }
      },
      "required": [
        "filename",
        "object"
      ],
      "title": "Annotation Object",
      "type": "object"
    },
    "Object3": {
      "example": {
        "bndbox": {
          "xmax": 100,
          "xmin": 1,
          "ymax": 100,
          "ymin": 1
        },
        "name": "{{category1}}"
      },
      "properties": {
        "bndbox": {
          "$ref": "#/definitions/Bndbox"
        },
        "name": {
          "description": "",
          "example": "{{category1}}",
          "type": "string"
        }
      },
      "required": [
        "name",
        "bndbox"
      ],
      "title": "Annotations",
      "type": "object"
    },
    "UploadTrainingImagesByUrlrequest": {
      "example": {
        "data": [
          {
            "filename": "https://nanonets.s3-us-west-2.amazonaws.com/test-images/test1.jpg",
            "object": [
              {
                "bndbox": {
                  "xmax": 100,
                  "xmin": 1,
                  "ymax": 100,
                  "ymin": 1
                },
                "name": "{{category1}}"
              }
            ]
          }
        ],
        "urls": [
          "https://nanonets.s3-us-west-2.amazonaws.com/test-images/test1.jpg"
        ]
      },
      "properties": {
        "data": {
          "description": "",
          "example": [
            {
              "filename": "https://nanonets.s3-us-west-2.amazonaws.com/test-images/test1.jpg",
              "object": [
                {
                  "bndbox": {
                    "xmax": 100,
                    "xmin": 1,
                    "ymax": 100,
                    "ymin": 1
                  },
                  "name": "{{category1}}"
                }
              ]
            }
          ],
          "items": {
            "$ref": "#/definitions/Datum"
          },
          "type": "array"
        },
        "urls": {
          "description": "",
          "example": [
            "https://nanonets.s3-us-west-2.amazonaws.com/test-images/test1.jpg"
          ],
          "items": {
            "type": "string"
          },
          "type": "array"
        }
      },
      "required": [
        "data",
        "urls"
      ],
      "title": "Upload Training Images Body",
      "type": "object"
    }
  },
  "host": "app.nanonets.com",
  "info": {
    "contact": {
      "email": "support@nanonets.com",
      "name": "NanoNets",
      "url": "https://nanonets.com"
    },
    "description": "Welcome to the NanoNets API! You can use our API to build custom deep learning models.<br/>\nWe have language bindings in Shell, Ruby, Golang, Java, C# and Python. You can view code examples in the dark area to the right, and you can switch the programming language for the examples with the tabs in the top right. <br/> In the documentation, you will find ready to fire code samples in these languages as well as detailed API specs for different endpoints.<br/><br/><br/>\n\n### <span style=\"vertical-align: middle;\">Want to quickly test our APIs? &nbsp;</span> <a style=\"vertical-align: middle; display: inline-flex;\" href=\"https://www.postman.com/run-collection/2fcb1195d85e7a98ad74\" target=\"_blank\"><img src=\"https://run.pstmn.io/button.svg\" alt=\"Run in Postman\" /></a><br/><br/>\nHelpful links to get you started:<br/><br/>\n**Postman collection variables** - <a href=\"https://learning.postman.com/docs/postman/variables-and-environments/variables/#defining-collection-variables\" target=\"_blank\">https://learning.postman.com/docs/postman/variables-and-environments/variables/#defining-collection-variables</a><br/><br/>\n**To get your API key** <a href=\"https://app.nanonets.com/#keys\" target=\"_blank\">follow this link.</a><br/><br/>\n\n# Model Object\nA model Object has 3 main attributes<br/>\n### model_id\n<b>Definition:</b> Unique ID for the model <br/><br/>\n### model_type\n<b>Definition:</b> Type of model. Possible values are: <br/>\n<table>\n    <tr>\n        <td>classification</td>\n        <td>Image classification model</td>\n    </tr>\n    <tr>\n        <td>localization</td>\n        <td>Object detection model</td>\n    </tr>\n    <tr>\n        <td>multilabelclassification</td>\n        <td>Multi label image classification model</td>\n    </tr>\n    <tr>\n        <td>ocr</td>\n        <td>OCR model</td>\n    </tr>\n</table> <br/>\n\n### state\n<b>Definition:</b> Current state of model. Possible values are:<br/>\n<table>\n    <tr>\n        <td>-1</td>\n        <td>Error in model training</td>\n    </tr>\n    <tr>\n        <td>0</td>\n        <td>Model created. No training data uploaded yet</td>\n    </tr>\n    <tr>\n        <td>1</td>\n        <td>Training data uploaded. Need to annotate data</td>\n    </tr>\n    <tr>\n        <td>2</td>\n        <td>Training data annotated. Need to start training</td>\n    </tr>\n    <tr>\n        <td>3</td>\n        <td>Model in training queue</td>\n    </tr>\n    <tr>\n        <td>4</td>\n        <td>Model currently training</td>\n    </tr>\n    <tr>\n        <td>5</td>\n        <td>Model hosted. Can be used for prediction</td>\n    </tr>\n    <tr>\n        <td>6</td>\n        <td>Model is retraining with new data. Can be used for prediction</td>\n    </tr>\n</table>\n",
    "license": {
      "name": "MIT",
      "url": "http://github.com/gruntjs/grunt/blob/master/LICENSE-MIT"
    },
    "title": "NanoNets",
    "version": "2.0.0",
    "x-logo": {
      "url": "https://nanonets.com/logo2.png"
    }
  },
  "paths": {
    "/ImageCategorization/LabelFile/": {
      "post": {
        "consumes": [
          "multipart/form-data"
        ],
        "description": "Use the model to predict which one of the categories an image (given an image file) belongs to.",
        "operationId": "ImageCategorizationLabelFilePost",
        "parameters": [
          {
            "description": "",
            "in": "formData",
            "name": "modelId",
            "required": true,
            "type": "string"
          },
          {
            "description": "",
            "in": "formData",
            "name": "file",
            "required": true,
            "type": "file"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "Model Object",
            "examples": {
              "application/json": {
                "message": "Success",
                "model_id": "00000000-0000-0000-0000-000000000000",
                "result": [
                  {
                    "file": "string",
                    "message": "Success",
                    "prediction": [
                      {
                        "label": "category1",
                        "probability": 0.9
                      },
                      {
                        "label": "category2",
                        "probability": 0.1
                      }
                    ]
                  }
                ]
              }
            }
          },
          "400": {
            "description": "File missing. Check if you have included a file in the request\n\nOR\n\nIncorrect image. Check if file you included is a valid PNG or JPEG"
          },
          "402": {
            "description": "Exhausted Free API Calls. You have exhausted your free API calls please change your plan <a href=\"https://app.nanonets.com/user/apps\">here</a>"
          },
          "404": {
            "description": "Model does not exists. Check if the model id exists"
          }
        },
        "security": [
          {
            "ApiKey": []
          }
        ],
        "summary": "Prediction for image File",
        "tags": [
          "Image Classification Model Predict"
        ],
        "x-code-samples": [
          {
            "lang": "Nodejs",
            "source": "var request = require('request')\nvar fs = require('fs')\nconst form_data = {'modelId' : 'REPLACE_MODEL_ID', 'file' : fs.createReadStream('REPLACE_IMAGE_PATH.jpg')}\nconst options = {\n    url : 'https://app.nanonets.com/api/v2/ImageCategorization/LabelFile/',\n    formData: form_data,\n    headers: {\n        'Authorization' : 'Basic ' + Buffer.from('REPLACE_API_KEY' + ':').toString('base64')\n    }\n}\nrequest.post(options, function(err, httpResponse, body) {\n\n  console.log(body)\n});\n"
          },
          {
            "lang": "Python",
            "source": "import requests\n\nurl = 'https://app.nanonets.com/api/v2/ImageCategorization/LabelFile/'\n\ndata = {'file': open('REPLACE_IMAGE_PATH.jpg', 'rb'), 'modelId': ('', 'REPLACE_MODEL_ID')}\n\nresponse = requests.post(url, auth= requests.auth.HTTPBasicAuth('REPLACE_API_KEY', ''), files=data)\n\nprint(response.text)\n"
          },
          {
            "lang": "Shell",
            "source": "curl --request POST \\\n  --url 'https://app.nanonets.com/api/v2/ImageCategorization/LabelFile/' \\\n  --header 'accept: multipart/form-data' \\\n  -u 'REPLACE_API_KEY' \\\n  -F 'modelId=REPLACE_MODEL_ID' \\\n  -F 'file=@REPLACE_IMAGE_PATH.jpg'"
          },
          {
            "lang": "Golang",
            "source": "package main\n\nimport (\n    \"bytes\"\n    \"fmt\"\n    \"io\"\n    \"io/ioutil\"\n    \"mime/multipart\"\n    \"net/http\"\n    \"os\"\n    \"path/filepath\"\n)\n\nfunc main() {\n\n    url := \"https://app.nanonets.com/api/v2/ImageCategorization/LabelFile/\"\n\n    file, err := os.Open(\"test.jpg\")\n    if err != nil {\n        fmt.Println(err)\n        return\n    }\n\n    defer file.Close()\n\n    body := &bytes.Buffer{}\n    writer := multipart.NewWriter(body)\n\n    part, err := writer.CreateFormFile(\"file\", filepath.Base(\"test.jpg\"))\n    if err != nil {\n        fmt.Println(err)\n        return\n    }\n    _, err = io.Copy(part, file)\n\n    writer.WriteField(\"modelId\", \"REPLACE_MODEL_ID\")\n\n    contentType := writer.FormDataContentType()\n\n    err = writer.Close()\n    if err != nil {\n        fmt.Println(err)\n        return\n    }\n\n    req, _ := http.NewRequest(\"POST\", url, body)\n\n    req.Header.Add(\"Content-Type\", contentType)\n    req.SetBasicAuth(\"REPLACE_API_KEY\", \"\")\n\n    res, _ := http.DefaultClient.Do(req)\n\n    defer res.Body.Close()\n    output, _ := ioutil.ReadAll(res.Body)\n\n    fmt.Println(res)\n    fmt.Println(string(output))\n\n}\n"
          },
          {
            "lang": "JavaScript",
            "source": "var data = new FormData();\ndata.append('modelId', 'REPLACE_MODEL_ID');\ndata.append('file', file); // file is a Blob object\n\nvar xhr = new XMLHttpRequest();\n\nxhr.addEventListener(\"readystatechange\", function () {\n    if (this.readyState === this.DONE) {\n        console.log(this.responseText);\n    }\n});\n\nxhr.open(\"POST\", \"https://app.nanonets.com/api/v2/ImageCategorization/LabelFile/\");\nxhr.setRequestHeader(\"authorization\", \"Basic \" + btoa(\"REPLACE_API_KEY:\"));\n\nxhr.send(data);\n"
          },
          {
            "lang": "Ruby",
            "source": "require 'uri'\nrequire 'net/http'\nrequire 'net/http/post/multipart'\n\nurl = URI('https://app.nanonets.com/api/v2/ImageCategorization/LabelFile/')\n\nhttp = Net::HTTP.new(url.host, url.port)\nhttp.use_ssl = true\n\nFile.open('test.jpg') do |jpg|\nrequest = Net::HTTP::Post::Multipart.new(url.path,\n    'file' => UploadIO.new(jpg, 'image/jpeg', 'test.jpg'),\n    'modelId' => 'REPLACE_MODEL_ID')\nrequest.basic_auth 'REPLACE_API_KEY', ''\nresponse = Net::HTTP.start(url.host, url.port) do |http|\n    http.request(request)\nend\nputs response.read_body\nend\n"
          },
          {
            "lang": "C#",
            "source": "var client = new RestClient(\"https://app.nanonets.com/api/v2/ImageCategorization/LabelFile/\");\nvar request = new RestRequest(Method.POST);\nrequest.AddHeader(\"authorization\", \"Basic \" + Convert.ToBase64String(Encoding.Default.GetBytes(\"REPLACE_API_KEY:\")));\nrequest.AddHeader(\"accept\", \"Multipart/form-data\");\nrequest.AddParameter(\"modelId\", \"REPLACE_MODEL_ID\");\nrequest.AddFile(\"file\", \"REPLACE_IMAGE_PATH.jpg\");\nIRestResponse response = client.Execute(request);"
          },
          {
            "lang": "Java",
            "source": "OkHttpClient client = new OkHttpClient();\nprivate static final MediaType MEDIA_TYPE_JPG = MediaType.parse(\"image/jpeg\");\n\nOkHttpClient client = new OkHttpClient();\n\nRequestBody requestBody = new MultipartBody.Builder()\n        .setType(MultipartBody.FORM)\n        .addFormDataPart(\"modelId\", \"REPLACE_MODEL_ID\")\n        .addFormDataPart(\"file\", \"REPLACE_IMAGE_PATH.jpg\", RequestBody.create(MEDIA_TYPE_JPG, new File(\"REPLACE_IMAGE_PATH.jpg\")))\n        .build();\n\nrequest = new Request.Builder()\n        .url(\"https://app.nanonets.com/api/v2/ImageCategorization/LabelFile/\")\n        .post(requestBody)\n        .addHeader(\"Authorization\", Credentials.basic(\"REPLACE_API_KEY\", \"\"))\n        .build();\n\nResponse response = client.newCall(request).execute();"
          }
        ],
        "x-operation-settings": {
          "AllowDynamicFormParameters": false,
          "AllowDynamicQueryParameters": false,
          "CollectParameters": false,
          "IsMultiContentStreaming": false
        },
        "x-unitTests": [
          {
            "expectedResponse": {
              "headers": {},
              "x-allowExtraHeaders": true,
              "x-arrayCheckCount": false,
              "x-arrayOrderedMatching": false,
              "x-bodyMatchMode": "NONE",
              "x-matchResponseSchema": true
            },
            "request": {
              "body": "modelId={{model_id}}&file=",
              "headers": {
                "Content-Type": "application/x-www-form-urlencoded"
              },
              "method": "POST",
              "uri": "/ImageCategorization/LabelFile/"
            },
            "x-testDescription": "",
            "x-testEnabled": true,
            "x-testName": "Prediction for image file",
            "x-testShouldPass": true
          }
        ]
      }
    },
    "/ImageCategorization/LabelUrls/": {
      "post": {
        "consumes": [
          "multipart/form-data"
        ],
        "description": "Use the model to predict which one of the categories an image (given the image url) belongs to. You can specify multiple image urls.",
        "operationId": "ImageCategorizationLabelUrlsPost2",
        "parameters": [
          {
            "description": "",
            "in": "formData",
            "name": "modelId",
            "required": true,
            "type": "string"
          },
          {
            "description": "",
            "in": "formData",
            "name": "urls",
            "required": true,
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "Model Object",
            "examples": {
              "application/json": {
                "message": "Success",
                "model_id": "00000000-0000-0000-0000-000000000000",
                "result": [
                  {
                    "file": "string",
                    "message": "Success",
                    "prediction": [
                      {
                        "label": "category1",
                        "probability": 0.9
                      },
                      {
                        "label": "category2",
                        "probability": 0.1
                      }
                    ]
                  }
                ]
              }
            }
          },
          "202": {
            "description": "Request partially successful. One or more urls might not be correct or got no response"
          },
          "400": {
            "description": "Urls missing. Check if you have an included array of image urls"
          },
          "402": {
            "description": "Exhausted Free API Calls  You have exhausted your free API calls please change your plan <a href=\"https://app.nanonets.com/user/apps\">here</a>"
          },
          "404": {
            "description": "Model does not exists. Check if the model id exists"
          }
        },
        "security": [
          {
            "ApiKey": []
          }
        ],
        "summary": "Prediction for image URLs",
        "tags": [
          "Image Classification Model Predict"
        ],
        "x-code-samples": [
          {
            "lang": "Nodejs",
            "source": "var request = require('request')\nvar querystring = require('querystring')\nconst form_data = {'modelId': 'REPLACE_MODEL_ID', 'urls' : ['https://nanonets.s3-us-west-2.amazonaws.com/test-images/test1.jpg']}\nconst options = {\n    url : 'https://app.nanonets.com/api/v2/ImageCategorization/LabelUrls/',\n    body: querystring.stringify(form_data),\n    headers: {\n        'Authorization' : 'Basic ' + Buffer.from('REPLACE_API_KEY' + ':').toString('base64'),\n        'Content-Type': 'application/x-www-form-urlencoded'\n    }\n}\nrequest.post(options, function(err, httpResponse, body) {\n\n  console.log(body)\n});\n"
          },
          {
            "lang": "Python",
            "source": "import requests\n\nurl = 'https://app.nanonets.com/api/v2/ImageCategorization/LabelUrls/'\n\nheaders = {\n    'accept': 'application/x-www-form-urlencoded'\n}\n\ndata = {'modelId': 'REPLACE_MODEL_ID', 'urls' : ['https://nanonets.s3-us-west-2.amazonaws.com/test-images/test1.jpg']}\n\nresponse = requests.request('POST', url, headers=headers, auth=requests.auth.HTTPBasicAuth('REPLACE_API_KEY', ''), data=data)\n\nprint(response.text)"
          },
          {
            "lang": "Shell",
            "source": "curl --request POST \\\n  --url 'https://app.nanonets.com/api/v2/ImageCategorization/LabelUrls/' \\\n  --header 'accept: application/x-www-form-urlencoded' \\\n  -d 'modelId=REPLACE_MODEL_ID&urls=https://nanonets.s3-us-west-2.amazonaws.com/test-images/test1.jpg' \\\n  -u 'REPLACE_API_KEY'"
          },
          {
            "lang": "Golang",
            "source": "package main\n\nimport (\n    \"bytes\"\n    \"fmt\"\n    \"io/ioutil\"\n    \"net/http\"\n    \"net/url\"\n)\n\nfunc main() {\n\n    labelUrl := \"https://app.nanonets.com/api/v2/ImageCategorization/LabelUrls/\"\n\n    data := url.Values{}\n    data.Set(\"modelId\", \"REPLACE_MODEL_ID\")\n    data.Add(\"urls\", \"https://nanonets.s3-us-west-2.amazonaws.com/test-images/test1.jpg\")\n\n    req, _ := http.NewRequest(\"POST\", labelUrl, bytes.NewBufferString(data.Encode()))\n\n    req.Header.Add(\"Content-Type\", \"application/x-www-form-urlencoded\")\n    req.SetBasicAuth(\"REPLACE_API_KEY\", \"\")\n\n    res, _ := http.DefaultClient.Do(req)\n\n    defer res.Body.Close()\n    body, _ := ioutil.ReadAll(res.Body)\n\n    fmt.Println(res)\n    fmt.Println(string(body))\n\n}\n"
          },
          {
            "lang": "JavaScript",
            "source": "var data = 'modelId=REPLACE_MODEL_ID&urls=https://nanonets.s3-us-west-2.amazonaws.com/test-images/test1.jpg';\n\nvar xhr = new XMLHttpRequest();\n\nxhr.addEventListener(\"readystatechange\", function () {\n  if (this.readyState === this.DONE) {\n    console.log(this.responseText);\n  }\n});\n\nxhr.open(\"POST\", \"https://app.nanonets.com/api/v2/ImageCategorization/LabelUrls/\");\nxhr.setRequestHeader(\"Content-Type\", \"application/x-www-form-urlencoded\");\nxhr.setRequestHeader(\"authorization\", \"Basic \" + btoa(\"REPLACE_API_KEY:\"));\n\nxhr.send(data);"
          },
          {
            "lang": "Ruby",
            "source": "require 'uri' require 'net/http'\nurl = URI('https://app.nanonets.com/api/v2/ImageCategorization/LabelUrls/')\nhttp = Net::HTTP.new(url.host, url.port) http.use_ssl = true\nrequest = Net::HTTP::Post.new(url) request[\"accept\"] = 'application/x-www-form-urlencoded' request.basic_auth 'REPLACE_API_KEY', '' request.set_form_data({'modelId' => 'REPLACE_MODEL_ID', 'urls' => ['https://nanonets.s3-us-west-2.amazonaws.com/test-images/test1.jpg']}) response = http.request(request)\nputs response.read_body"
          },
          {
            "lang": "C#",
            "source": "var client = new RestClient(\"https://app.nanonets.com/api/v2/ImageCategorization/LabelUrls/\");\nvar request = new RestRequest(Method.POST);\nrequest.AddHeader(\"authorization\", \"Basic \" + Convert.ToBase64String(Encoding.Default.GetBytes(\"REPLACE_API_KEY:\")));\nrequest.AddHeader(\"accept\", \"application/x-www-form-urlencoded\");\nrequest.AddParameter(\"modelId\", \"REPLACE_MODEL_ID\");\nrequest.AddParameter(\"urls\", \"https://nanonets.s3-us-west-2.amazonaws.com/test-images/test1.jpg\");\nIRestResponse response = client.Execute(request);"
          },
          {
            "lang": "Java",
            "source": "OkHttpClient client = new OkHttpClient();\n\nRequestBody formBody = new FormBody.Builder()\n        .add(\"modelId\", \"REPLACE_MODEL_ID\")\n        .add(\"urls\", \"https://nanonets.s3-us-west-2.amazonaws.com/test-images/test1.jpg\").build();\n\nRequest request = new Request.Builder()\n    .url(\"https://app.nanonets.com/api/v2/ImageCategorization/LabelUrls/\")\n    .post(formBody)\n    .addHeader(\"Authorization\", Credentials.basic(\"REPLACE_API_KEY\", \"\"))\n    .build();\n\nResponse response = client.newCall(request).execute();"
          }
        ],
        "x-operation-settings": {
          "AllowDynamicFormParameters": false,
          "AllowDynamicQueryParameters": false,
          "CollectParameters": false,
          "IsMultiContentStreaming": false
        },
        "x-unitTests": [
          {
            "expectedResponse": {
              "headers": {},
              "x-allowExtraHeaders": true,
              "x-arrayCheckCount": false,
              "x-arrayOrderedMatching": false,
              "x-bodyMatchMode": "NONE",
              "x-matchResponseSchema": true
            },
            "request": {
              "body": "modelId={{model_id}}&file=",
              "headers": {
                "Content-Type": "application/x-www-form-urlencoded"
              },
              "method": "POST",
              "uri": "/ImageCategorization/LabelUrls/"
            },
            "x-testDescription": "",
            "x-testEnabled": true,
            "x-testName": "Prediction for image file",
            "x-testShouldPass": true
          }
        ]
      }
    },
    "/ImageCategorization/Model": {
      "get": {
        "description": "This endpoint retrieves a specific model's details given it's id",
        "operationId": "ImageCategorizationModelGet",
        "parameters": [
          {
            "description": "",
            "in": "query",
            "name": "id",
            "required": true,
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "Model Object",
            "examples": {
              "application/json": {
                "categories": [
                  {
                    "count": 0,
                    "name": "category1"
                  },
                  {
                    "count": 0,
                    "name": "category2"
                  }
                ],
                "model_id": "00000000-0000-0000-0000-000000000000",
                "model_type": "classification",
                "state": 0
              }
            }
          },
          "404": {
            "description": "Model does not exists. Check if you have entered correct model id with valid API key"
          }
        },
        "security": [
          {
            "ApiKey": []
          }
        ],
        "summary": "Get Model by Id",
        "tags": [
          "Image Classification Model"
        ],
        "x-code-samples": [
          {
            "lang": "Nodejs",
            "source": "var request = require('request')\nconst options = {\n    url : 'https://app.nanonets.com/api/v2/ImageCategorization/Model/?modelId=REPLACE_MODEL_ID',\n    headers: {\n        'Authorization' : 'Basic ' + Buffer.from('REPLACE_API_KEY' + ':').toString('base64'),\n    }\n}\nrequest.get(options, function(err, httpResponse, body) {\n\n  console.log(body)\n});\n"
          },
          {
            "lang": "Python",
            "source": "import requests\n\nurl = 'https://app.nanonets.com/api/v2/ImageCategorization/Model/'\n\nquerystring = {'modelId': 'REPLACE_MODEL_ID'}\n\nresponse = requests.request('GET', url, auth=requests.auth.HTTPBasicAuth('REPLACE_API_KEY',''), params=querystring)\n\nprint(response.text)"
          },
          {
            "lang": "Shell",
            "source": "curl --request GET \\\n  --url 'https://app.nanonets.com/api/v2/ImageCategorization/Model/?id=REPLACE_MODEL_ID' \\\n  -u 'REPLACE_API_KEY'"
          },
          {
            "lang": "Golang",
            "source": "package main\n\nimport (\n    \"fmt\"\n    \"net/http\"\n    \"io/ioutil\"\n)\n\nfunc main() {\n\n    url := \"https://app.nanonets.com/api/v2/ImageCategorization/Model/?id=REPLACE_MODEL_ID\"\n\n    req, err := http.NewRequest(\"GET\", url, nil)\n    if err != nil {\n        fmt.Println(err)\n        return\n    }\n\n    req.SetBasicAuth(\"REPLACE_API_KEY\", \"\")\n\n    res, err := http.DefaultClient.Do(req)\n    if err != nil {\n        fmt.Println(err)\n        return\n    }\n\n    defer res.Body.Close()\n    body, err := ioutil.ReadAll(res.Body)\n    if err != nil {\n        fmt.Println(err)\n        return\n    }\n\n    fmt.Println(res)\n    fmt.Println(string(body))\n\n}"
          },
          {
            "lang": "JavaScript",
            "source": "var data = null;\n\nvar xhr = new XMLHttpRequest();\n\nxhr.addEventListener(\"readystatechange\", function () {\n  if (this.readyState === this.DONE) {\n    console.log(this.responseText);\n  }\n});\n\nxhr.open(\"GET\", \"https://app.nanonets.com/api/v2/ImageCategorization/Model/?id=REPLACE_MODEL_ID\");\nxhr.setRequestHeader(\"authorization\", \"Basic \" + btoa(\"REPLACE_API_KEY:\"));\n\nxhr.send(data);"
          },
          {
            "lang": "Ruby",
            "source": "require 'uri' require 'net/http'\nurl = URI('https://app.nanonets.com/api/v2/ImageCategorization/Model/?id=REPLACE_MODEL_ID')\nhttp = Net::HTTP.new(url.host, url.port) http.use_ssl = true\nrequest = Net::HTTP::Get.new(url) request.basic_auth 'REPLACE_API_KEY', '' response = http.request(request)\nputs response.read_body"
          },
          {
            "lang": "C#",
            "source": "var client = new RestClient(\"https://app.nanonets.com/api/v2/ImageCategorization/Model/?id=REPLACE_MODEL_ID\");\nvar request = new RestRequest(Method.GET);\nrequest.AddHeader(\"authorization\", \"Basic \" + Convert.ToBase64String(Encoding.Default.GetBytes(\"REPLACE_API_KEY:\")));\nIRestResponse response = client.Execute(request);"
          },
          {
            "lang": "Java",
            "source": "OkHttpClient client = new OkHttpClient();\n\nRequest request = new Request.Builder()\n  .url(\"https://app.nanonets.com/api/v2/ImageCategorization/Model/?id=REPLACE_MODEL_ID\")\n  .get()\n  .addHeader(\"authorization\", Credentials.basic(\"REPLACE_API_KEY\", \"\"))\n  .build();\n\nResponse response = client.newCall(request).execute();"
          }
        ],
        "x-operation-settings": {
          "AllowDynamicFormParameters": false,
          "AllowDynamicQueryParameters": false,
          "CollectParameters": false,
          "IsMultiContentStreaming": false
        },
        "x-unitTests": [
          {
            "expectedResponse": {
              "headers": {},
              "x-allowExtraHeaders": true,
              "x-arrayCheckCount": false,
              "x-arrayOrderedMatching": false,
              "x-bodyMatchMode": "NONE",
              "x-matchResponseSchema": true
            },
            "request": {
              "method": "GET",
              "uri": "/ImageCategorization/Model?id={{model_id}}"
            },
            "x-testDescription": "",
            "x-testEnabled": true,
            "x-testName": "Get Model by Id",
            "x-testShouldPass": true
          }
        ]
      }
    },
    "/ImageCategorization/Model/": {
      "post": {
        "consumes": [
          "application/x-www-form-urlencoded"
        ],
        "description": "You can create a new model using this endpoint. A successful API call will return the json structure of the newly created model. You can then use the model's id to upload images for each category and then retrain the model.",
        "operationId": "ImageCategorizationModelPost",
        "parameters": [
          {
            "description": "",
            "in": "formData",
            "name": "categories",
            "required": true,
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "Model Object",
            "examples": {
              "application/json": {
                "categories": [
                  {
                    "count": 0,
                    "name": "category1"
                  },
                  {
                    "count": 0,
                    "name": "category2"
                  }
                ],
                "model_id": "00000000-0000-0000-0000-000000000000",
                "model_type": "classification",
                "state": 0
              }
            }
          },
          "400": {
            "description": "Zero or One category in request. Add two or more categories in parameters"
          }
        },
        "security": [
          {
            "ApiKey": []
          }
        ],
        "summary": "Create New Model",
        "tags": [
          "Image Classification Model"
        ],
        "x-code-samples": [
          {
            "lang": "Nodejs",
            "source": "var request = require('request')\nvar querystring = require('querystring')\nconst form_data = {'categories' : ['category1', 'category2']}\nconst options = {\n    url : 'https://app.nanonets.com/api/v2/ImageCategorization/Model/',\n    body: querystring.stringify(form_data),\n    headers: {\n        'Authorization' : 'Basic ' + Buffer.from('REPLACE_API_KEY' + ':').toString('base64'),\n        'Content-Type': 'application/x-www-form-urlencoded'\n    }\n}\nrequest.post(options, function(err, httpResponse, body) {\n\n  console.log(body)\n});\n"
          },
          {
            "lang": "Python",
            "source": "import requests\n\nurl = 'https://app.nanonets.com/api/v2/ImageCategorization/Model/'\n\nheaders = {\n    'accept': 'application/x-www-form-urlencoded'\n}\n\ndata = {'categories' : ['category1', 'category2']}\n\nresponse = requests.request(\"POST\", url, headers=headers, auth=requests.auth.HTTPBasicAuth('REPLACE_API_KEY', ''), data=data)\n\nprint(response.text)\n"
          },
          {
            "lang": "Shell",
            "source": "curl --request POST \\\n --url 'https://app.nanonets.com/api/v2/ImageCategorization/Model/' \\\n -u 'REPLACE_API_KEY' \\\n -F 'categories=category1' \\\n -F 'categories=category2'\n"
          },
          {
            "lang": "Golang",
            "source": "package main\n\n\nimport (\n    \"bytes\"\n    \"fmt\"\n    \"io/ioutil\"\n    \"mime/multipart\"\n    \"net/http\"\n)\n\n\nfunc main() {\n    url := \"https://app.nanonets.com/api/v2/ImageCategorization/Model/\"\n\n\n    body := &bytes.Buffer{}\n    writer := multipart.NewWriter(body)\n\n\n    writer.WriteField(\"categories\", \"category1\")\n    writer.WriteField(\"categories\", \"category2\")\n\n\n    contentType := writer.FormDataContentType()\n    err := writer.Close()\n    if err != nil {\n        fmt.Println(err)\n        return\n    }\n\n    req, _ := http.NewRequest(\"POST\", url, body)\n    req.Header.Add(\"Content-Type\", contentType)\n    req.SetBasicAuth(\"REPLACE_API_KEY\", \"\")\n\n\n    res, err := http.DefaultClient.Do(req)\n    if err != nil {\n        fmt.Println(err)\n        return\n    }\n    defer res.Body.Close()\n\n\n    output, _ := ioutil.ReadAll(res.Body)\n    fmt.Println(res)\n    fmt.Println(string(output))\n}\n"
          },
          {
            "lang": "JavaScript",
            "source": "var data = new FormData();\ndata.append('categories', 'category1');\ndata.append('categories', 'category2');\n\n\nvar xhr = new XMLHttpRequest();\nxhr.addEventListener(\"readystatechange\", function () {\n    if (this.readyState === this.DONE) {\n        console.log(this.responseText);\n    }\n});\n\n\nxhr.open(\"POST\", \"https://app.nanonets.com/api/v2/ImageCategorization/Model/\");\nxhr.setRequestHeader(\"authorization\", \"Basic \" + btoa(\"REPLACE_API_KEY:\"));\nxhr.send(data);\n"
          },
          {
            "lang": "Ruby",
            "source": "require 'uri'\nrequire 'net/http'\nrequire 'net/http/post/multipart'\nrequire 'json'\nrequire 'active_support/time'\n\nurl = URI('https://app.nanonets.com/api/v2/ImageCategorization/Model/')\n\nhttp = Net::HTTP.new(url.host, url.port)\nhttp.use_ssl = true\n\nrequest = Net::HTTP::Post.new(url)\nrequest[\"accept\"] = 'application/x-www-form-urlencoded'\nrequest.basic_auth 'REPLACE_API_KEY', ''\n\nrequest.set_form_data({'categories' => ['category1', 'category2']})\nresponse = http.request(request)\n# puts response.read_body\napiModel = JSON.parse(response.read_body)\nmodelId = apiModel['model_id']\nputs(\"New model created. Model id is #{modelId}\")\n"
          },
          {
            "lang": "C#",
            "source": "var client = new RestClient(\"https://app.nanonets.com/api/v2/ImageCategorization/Model/\");\nvar request = new RestRequest(Method.POST);\nrequest.AddHeader(\"authorization\", \"Basic \" + Convert.ToBase64String(Encoding.Default.GetBytes(\"REPLACE_API_KEY:\")));\nrequest.AddHeader(\"accept\", \"application/x-www-form-urlencoded\");\nrequest.AddParameter(\"categories\", \"category1\");\nrequest.AddParameter(\"categories\", \"category2\");\nIRestResponse response = client.Execute(request);"
          },
          {
            "lang": "java",
            "source": "OkHttpClient client = new OkHttpClient();\n\nRequestBody formBody = new FormBody.Builder()\n    .add(\"categories\", \"category1\")\n    .add(\"categories\", \"category2\").build();\n\nRequest request = new Request.Builder()\n    .url(\"https://app.nanonets.com/api/v2/ImageCategorization/Model/\")\n    .post(formBody)\n    .addHeader(\"authorization\", Credentials.basic(\"REPLACE_API_KEY\", \"\"))\n    .build();\n\nResponse response = client.newCall(request).execute();            \n"
          }
        ],
        "x-operation-settings": {
          "AllowDynamicFormParameters": false,
          "AllowDynamicQueryParameters": false,
          "CollectParameters": false,
          "IsMultiContentStreaming": false
        },
        "x-unitTests": [
          {
            "expectedResponse": {
              "headers": {},
              "x-allowExtraHeaders": true,
              "x-arrayCheckCount": false,
              "x-arrayOrderedMatching": false,
              "x-bodyMatchMode": "NONE",
              "x-matchResponseSchema": true
            },
            "request": {
              "body": "categories={{category1}}",
              "headers": {
                "Content-Type": "application/x-www-form-urlencoded"
              },
              "method": "POST",
              "uri": "/ImageCategorization/Model/"
            },
            "x-testDescription": "",
            "x-testEnabled": true,
            "x-testName": "Create New Model",
            "x-testShouldPass": true
          }
        ]
      }
    },
    "/ImageCategorization/Models/": {
      "get": {
        "description": "This endpoint returns information of all models created by user",
        "operationId": "ImageCategorizationModelsGet",
        "parameters": [],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "Model Object",
            "examples": {
              "application/json": [
                {
                  "categories": [
                    {
                      "count": 0,
                      "name": "category1"
                    },
                    {
                      "count": 0,
                      "name": "category2"
                    }
                  ],
                  "model_id": "00000000-0000-0000-0000-000000000000",
                  "model_type": "classification",
                  "state": 0
                }
              ]
            }
          }
        },
        "security": [
          {
            "ApiKey": []
          }
        ],
        "summary": "Get All Models",
        "tags": [
          "Image Classification Model"
        ],
        "x-code-samples": [
          {
            "lang": "Nodejs",
            "source": "var request = require('request')\nconst options = {\n    url : 'https://app.nanonets.com/api/v2/ImageCategorization/Models/',\n    headers: {\n        'Authorization' : 'Basic ' + Buffer.from('REPLACE_API_KEY' + ':').toString('base64')\n    }\n}\nrequest.get(options, function(err, httpResponse, body) {\n\n  console.log(body)\n});\n"
          },
          {
            "lang": "Python",
            "source": "import requests\n\nurl = 'https://app.nanonets.com/api/v2/ImageCategorization/Models/'\n\nresponse = requests.request('GET', url, auth= requests.auth.HTTPBasicAuth('REPLACE_API_KEY', ''))\n\nprint(response.text)"
          },
          {
            "lang": "Shell",
            "source": "curl --request GET \\\n  --url https://app.nanonets.com/api/v2/ImageCategorization/Models/ \\\n  -u 'REPLACE_API_KEY'"
          },
          {
            "lang": "Golang",
            "source": "package main\n\nimport (\n    \"fmt\"\n    \"net/http\"\n    \"io/ioutil\"\n)\n\nfunc main() {\n\n    url := \"https://app.nanonets.com/api/v2/ImageCategorization/Models/\"\n\n    req, err := http.NewRequest(\"GET\", url, nil)\n    if err != nil {\n        fmt.Println(err)\n        return\n    }\n\n    req.SetBasicAuth(\"REPLACE_API_KEY\", \"\")\n\n    res, err := http.DefaultClient.Do(req)\n    if err != nil {\n        fmt.Println(err)\n        return\n    }\n\n    defer res.Body.Close()\n    body, err := ioutil.ReadAll(res.Body)\n    if err != nil {\n        fmt.Println(err)\n        return\n    }\n\n    fmt.Println(res)\n    fmt.Println(string(body))\n\n}"
          },
          {
            "lang": "JavaScript",
            "source": "var data = null;\n\nvar xhr = new XMLHttpRequest();\n\nxhr.addEventListener(\"readystatechange\", function () {\n  if (this.readyState === this.DONE) {\n    console.log(this.responseText);\n  }\n});\n\nxhr.open(\"GET\", \"https://app.nanonets.com/api/v2/ImageCategorization/Models/\");\nxhr.setRequestHeader(\"authorization\", \"Basic \" + btoa(\"REPLACE_API_KEY:\"));\n\nxhr.send(data);"
          },
          {
            "lang": "Ruby",
            "source": "require 'uri' require 'net/http'\nurl = URI('https://app.nanonets.com/api/v2/ImageCategorization/Models/')\nhttp = Net::HTTP.new(url.host, url.port) http.use_ssl = true\nrequest = Net::HTTP::Get.new(url) request.basic_auth 'REPLACE_API_KEY', '' response = http.request(request)\nputs response.read_body"
          },
          {
            "lang": "C#",
            "source": "var client = new RestClient(\"https://app.nanonets.com/api/v2/ImageCategorization/Models/\");\nvar request = new RestRequest(Method.GET);\nrequest.AddHeader(\"authorization\", \"Basic \" + Convert.ToBase64String(Encoding.Default.GetBytes(\"REPLACE_API_KEY:\")));\nIRestResponse response = client.Execute(request);\n"
          },
          {
            "lang": "Java",
            "source": "OkHttpClient client = new OkHttpClient();\n\nRequest request = new Request.Builder()\n  .url(\"https://app.nanonets.com/api/v2/ImageCategorization/Models/\")\n  .get()\n  .addHeader(\"authorization\", Credentials.basic(\"REPLACE_API_KEY\", \"\"))\n  .build();\n\nResponse response = client.newCall(request).execute();"
          }
        ],
        "x-operation-settings": {
          "AllowDynamicFormParameters": false,
          "AllowDynamicQueryParameters": false,
          "CollectParameters": false,
          "IsMultiContentStreaming": false
        },
        "x-unitTests": [
          {
            "expectedResponse": {
              "headers": {},
              "x-allowExtraHeaders": true,
              "x-arrayCheckCount": false,
              "x-arrayOrderedMatching": false,
              "x-bodyMatchMode": "NONE",
              "x-matchResponseSchema": true
            },
            "request": {
              "method": "GET",
              "uri": "/ImageCategorization/Models/"
            },
            "x-testDescription": "",
            "x-testEnabled": true,
            "x-testName": "Get All Models",
            "x-testShouldPass": true
          }
        ]
      }
    },
    "/ImageCategorization/Train/": {
      "post": {
        "consumes": [
          "application/x-www-form-urlencoded"
        ],
        "description": "You can use this endpoint to train a model after uploading images for each category. You can use the same endpoint to retrain a model after uploading more images to improve the model.",
        "operationId": "ImageCategorizationTrainPost",
        "parameters": [
          {
            "description": "",
            "in": "formData",
            "name": "modelId",
            "required": true,
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "Model Object",
            "examples": {
              "application/json": {
                "categories": [
                  {
                    "count": 0,
                    "name": "category1"
                  },
                  {
                    "count": 0,
                    "name": "category2"
                  }
                ],
                "model_id": "00000000-0000-0000-0000-000000000000",
                "model_type": "classification",
                "state": 0
              }
            }
          },
          "400": {
            "description": "Model not ready for training. Check if the images for the model are uploaded"
          },
          "404": {
            "description": "Model does not exists. Check if the model id exists"
          }
        },
        "security": [
          {
            "ApiKey": []
          }
        ],
        "summary": "Train Model",
        "tags": [
          "Image Classification Model Train"
        ],
        "x-code-samples": [
          {
            "lang": "Nodejs",
            "source": "var request = require('request')\nvar querystring = require('querystring')\nconst form_data = {'modelId' : 'REPLACE_MODEL_ID'}\nconst options = {\n    url : 'https://app.nanonets.com/api/v2/ImageCategorization/Train/',\n    body: querystring.stringify(form_data),\n    headers: {\n        'Authorization' : 'Basic ' + Buffer.from('REPLACE_API_KEY' + ':').toString('base64'),\n        'Content-Type': 'application/x-www-form-urlencoded'\n    }\n}\nrequest.post(options, function(err, httpResponse, body) {\n\n  console.log(body)\n});\n"
          },
          {
            "lang": "Python",
            "source": "import requests\n\nurl = 'https://app.nanonets.com/api/v2/ImageCategorization/Train/'\n\nquerystring = {'modelId': 'REPLACE_MODEL_ID'}\n\nresponse = requests.request('POST', url, headers=headers, auth=requests.auth.HTTPBasicAuth('REPLACE_API_KEY', ''), params=querystring)\n\nprint(response.text)"
          },
          {
            "lang": "Shell",
            "source": "curl --request POST \\\n  --url 'https://app.nanonets.com/api/v2/ImageCategorization/Train/?modelId=REPLACE_MODEL_ID' \\\n  -u 'REPLACE_API_KEY'"
          },
          {
            "lang": "Golang",
            "source": "package main\n\nimport (\n    \"fmt\"\n    \"net/http\"\n    \"io/ioutil\"\n)\n\nfunc main() {\n\n    url := \"https://app.nanonets.com/api/v2/ImageCategorization/Train/?modelId=REPLACE_MODEL_ID\"\n\n    req, _ := http.NewRequest(\"POST\", url, nil)\n\n    req.SetBasicAuth(\"REPLACE_API_KEY\", \"\")\n\n    res, _ := http.DefaultClient.Do(req)\n\n    defer res.Body.Close()\n    body, _ := ioutil.ReadAll(res.Body)\n\n    fmt.Println(res)\n    fmt.Println(string(body))\n\n}"
          },
          {
            "lang": "JavaScript",
            "source": "var data = null;\n\nvar xhr = new XMLHttpRequest();\n\nxhr.addEventListener(\"readystatechange\", function () {\n  if (this.readyState === this.DONE) {\n    console.log(this.responseText);\n  }\n});\n\nxhr.open(\"POST\", \"https://app.nanonets.com/api/v2/ImageCategorization/Train/?modelId=REPLACE_MODEL_ID\");\nxhr.setRequestHeader(\"authorization\", \"Basic \" + btoa(\"REPLACE_API_KEY:\"));\n\nxhr.send(data);"
          },
          {
            "lang": "Ruby",
            "source": "require 'uri' require 'net/http'\nurl = URI('https://app.nanonets.com/api/v2/ImageCategorization/Train/?modelId=REPLACE_MODEL_ID')\nhttp = Net::HTTP.new(url.host, url.port) http.use_ssl = true\nrequest = Net::HTTP::Post.new(url) request.basic_auth 'REPLACE_API_KEY', '' response = http.request(request)\nputs response.read_body"
          },
          {
            "lang": "C#",
            "source": "var client = new RestClient(\"https://app.nanonets.com/api/v2/ImageCategorization/Train/?modelId=REPLACE_MODEL_ID\");\nvar request = new RestRequest(Method.POST);\nrequest.AddHeader(\"authorization\", \"Basic \" + Convert.ToBase64String(Encoding.Default.GetBytes(\"REPLACE_API_KEY:\")));\nIRestResponse response = client.Execute(request);"
          },
          {
            "lang": "Java",
            "source": "OkHttpClient client = new OkHttpClient();\n\nRequest request = new Request.Builder()\n  .url(\"https://app.nanonets.com/api/v2/ImageCategorization/Train/?modelId=REPLACE_MODEL_ID\")\n  .post(null)\n  .addHeader(\"Authorization\", Credentials.basic(\"REPLACE_API_KEY\", \"\"))\n  .build();\n\nResponse response = client.newCall(request).execute();"
          }
        ],
        "x-operation-settings": {
          "AllowDynamicFormParameters": false,
          "AllowDynamicQueryParameters": false,
          "CollectParameters": false,
          "IsMultiContentStreaming": false
        },
        "x-unitTests": [
          {
            "expectedResponse": {
              "headers": {},
              "x-allowExtraHeaders": true,
              "x-arrayCheckCount": false,
              "x-arrayOrderedMatching": false,
              "x-bodyMatchMode": "NONE",
              "x-matchResponseSchema": true
            },
            "request": {
              "body": "modelId={{model_id}}",
              "headers": {
                "Content-Type": "application/x-www-form-urlencoded"
              },
              "method": "POST",
              "uri": "/ImageCategorization/Train/"
            },
            "x-testDescription": "",
            "x-testEnabled": true,
            "x-testName": "Train Model",
            "x-testShouldPass": true
          }
        ]
      }
    },
    "/ImageCategorization/UploadFile/": {
      "post": {
        "consumes": [
          "multipart/form-data"
        ],
        "description": "You can use this endpoint to upload training images for a category (for the specified model) using locally stored files. You will receive model information along with total number of images per category on successful execution. <br>Note: Filename in Data must be the same as that of the uploaded image name.",
        "operationId": "ImageCategorizationUploadFilePost",
        "parameters": [
          {
            "description": "",
            "in": "formData",
            "name": "modelId",
            "required": true,
            "type": "string"
          },
          {
            "description": "",
            "in": "formData",
            "name": "category",
            "required": true,
            "type": "string"
          },
          {
            "description": "",
            "in": "formData",
            "name": "file",
            "required": true,
            "type": "file"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "Model Object",
            "examples": {
              "application/json": {
                "categories": [
                  {
                    "count": 0,
                    "name": "category1"
                  },
                  {
                    "count": 0,
                    "name": "category2"
                  }
                ],
                "model_id": "00000000-0000-0000-0000-000000000000",
                "model_type": "classification",
                "state": 0
              }
            }
          },
          "400": {
            "description": "Category not valid for model. Check if this model has the category used in the request\n\nOR\n\nFile missing. Check if you have included the file in the request\n\nOR\n\nIncorrect image. Check if file you included is valid PNG or JPEG file"
          },
          "404": {
            "description": "Model does not exists. Check if the model id exists"
          }
        },
        "security": [
          {
            "ApiKey": []
          }
        ],
        "summary": "Upload training images by File",
        "tags": [
          "Image Classification Model Upload"
        ],
        "x-code-samples": [
          {
            "lang": "Nodejs",
            "source": "var request = require('request')\nvar fs = require('fs')\nconst form_data = {'modelId' : 'REPLACE_MODEL_ID', 'category': 'category1', 'file': fs.createReadStream('REPLACE_IMAGE_PATH.jpg')}\nconst options = {\n    url : 'https://app.nanonets.com/api/v2/ImageCategorization/UploadFile/',\n    formData: form_data,\n    headers: {\n        'Authorization' : 'Basic ' + Buffer.from('REPLACE_API_KEY' + ':').toString('base64')\n    }\n}\nrequest.post(options, function(err, httpResponse, body) {\n\n  console.log(body)\n});\n"
          },
          {
            "lang": "Python",
            "source": "import requests\n\n\nurl = 'https://app.nanonets.com/api/v2/ImageCategorization/UploadFile/'\n\n\ndata = {'file' :open('REPLACE_IMAGE_PATH.jpg', 'rb'),'category' :('', 'category1'), 'modelId' :('', 'REPLACE_MODEL_ID')}\n\n\nresponse = requests.post(url, auth= requests.auth.HTTPBasicAuth('REPLACE_API_KEY', ''), files=data)\nprint(response.text)"
          },
          {
            "lang": "Shell",
            "source": "curl --request POST \\\n  --url 'https://app.nanonets.com/api/v2/ImageCategorization/UploadFile/' \\\n  --header 'accept: multipart/form-data' \\\n  -u 'REPLACE_API_KEY' \\\n  -F 'category=category1' \\\n  -F 'modelId=REPLACE_MODEL_ID' \\\n  -F 'file=@REPLACE_IMAGE_PATH.jpg'"
          },
          {
            "lang": "Golang",
            "source": "package main\n\n\nimport (\n    \"bytes\"\n    \"fmt\"\n    \"io\"\n    \"io/ioutil\"\n    \"mime/multipart\"\n    \"net/http\"\n    \"os\"\n    \"path/filepath\"\n)\n\n\nfunc main() {\n    url := \"https://app.nanonets.com/api/v2/ImageCategorization/UploadFile/\"\n    file, err := os.Open(\"REPLACE_IMAGE_PATH.jpg\")\n    if err != nil {\n        fmt.Println(err)\n        return\n    }\n    defer file.Close()\n\n\n    body := &bytes.Buffer{}\n    writer := multipart.NewWriter(body)\n    part, err := writer.CreateFormFile(\"file\", filepath.Base(\"REPLACE_IMAGE_PATH.jpg\"))\n    if err != nil {\n        fmt.Println(err)\n        return\n    }\n\n    _, err = io.Copy(part, file)\n    if err != nil {\n        fmt.Println(err)\n        return\n    }\n\n\n    writer.WriteField(\"category\", \"category1\")\n    writer.WriteField(\"modelId\", \"REPLACE_MODEL_ID\")\n    contentType := writer.FormDataContentType()\n    err = writer.Close()\n    if err != nil {\n        fmt.Println(err)\n        return\n    }\n    req, _ := http.NewRequest(\"POST\", url, body)\n    req.Header.Add(\"Content-Type\", contentType)\n    req.SetBasicAuth(\"REPLACE_API_KEY\", \"\")\n\n\n    res, _ := http.DefaultClient.Do(req)\n    defer res.Body.Close()\n    output, _ := ioutil.ReadAll(res.Body)\n    fmt.Println(res)\n    fmt.Println(string(output))\n}\n"
          },
          {
            "lang": "JavaScript",
            "source": "var data = new FormData();\ndata.append('category', 'category1');\ndata.append('modelId', 'REPLACE_MODEL_ID');\ndata.append('file', file); // file is a Blob object\n\nvar xhr = new XMLHttpRequest();\n\nxhr.addEventListener(\"readystatechange\", function () {\nif (this.readyState === this.DONE) {\n    console.log(this.responseText);\n}\n});\n\nxhr.open(\"POST\", \"https://app.nanonets.com/api/v2/ImageCategorization/UploadFile/\");\nxhr.setRequestHeader(\"authorization\", \"Basic \" + btoa(\"REPLACE_API_KEY:\"));\n\nxhr.send(data);\n"
          },
          {
            "lang": "Ruby",
            "source": "require 'uri' require 'net/http' require 'net/http/post/multipart'\nurl = URI('https://app.nanonets.com/api/v2/ImageCategorization/UploadFile/')\nhttp = Net::HTTP.new(url.host, url.port) http.use_ssl = true\nFile.open('REPLACE_IMAGE_PATH.jpg') do |jpg|\n  request = Net::HTTP::Post::Multipart.new(url.path,\n    'file' => UploadIO.new(jpg, 'image/jpeg', 'REPLACE_IMAGE_PATH.jpg')\n    'modelId' => 'REPLACE_MODEL_ID',\n    'category' => 'category1')\n  request.basic_auth 'REPLACE_API_KEY', ''\n  response = Net::HTTP.start(url.host, url.port) do |http|\n    http.request(request)\n  end\n  puts response.read_body\nend"
          },
          {
            "lang": "C#",
            "source": "var client = new RestClient(\"https://app.nanonets.com/api/v2/ImageCategorization/UploadFile/\");\nvar request = new RestRequest(Method.POST);\nrequest.AddHeader(\"authorization\", \"Basic \" + Convert.ToBase64String(Encoding.Default.GetBytes(\"REPLACE_API_KEY:\")));\nrequest.AddHeader(\"accept\", \"Multipart/form-data\");\nrequest.AddParameter(\"modelId\", \"REPLACE_MODEL_ID\");\nrequest.AddParameter(\"category\", \"category1\");\nrequest.AddFile(\"file\", \"REPLACE_IMAGE_PATH.jpg\");\nIRestResponse response = client.Execute(request);"
          },
          {
            "lang": "Java",
            "source": "private static final MediaType MEDIA_TYPE_JPG = MediaType.parse(\"image/jpeg\");\n\nOkHttpClient client = new OkHttpClient();\n\nRequestBody requestBody = new MultipartBody.Builder()\n        .setType(MultipartBody.FORM)\n        .addFormDataPart(\"modelId\", \"REPLACE_MODEL_ID\")\n        .addFormDataPart(\"category\", \"category1\")\n        .addFormDataPart(\"file\", \"REPLACE_IMAGE_PATH.jpg\", RequestBody.create(MEDIA_TYPE_JPG, new File(\"REPLACE_IMAGE_PATH.jpg\")))\n        .build();\n\nrequest = new Request.Builder()\n        .url(\"https://app.nanonets.com/api/v2/ImageCategorization/UploadFile/\")\n        .post(requestBody)\n        .addHeader(\"Authorization\", Credentials.basic(\"REPLACE_API_KEY\", \"\"))\n        .build();\n\nResponse response = client.newCall(request).execute();"
          }
        ],
        "x-operation-settings": {
          "AllowDynamicFormParameters": false,
          "AllowDynamicQueryParameters": false,
          "CollectParameters": false,
          "IsMultiContentStreaming": false
        },
        "x-unitTests": [
          {
            "expectedResponse": {
              "headers": {},
              "x-allowExtraHeaders": true,
              "x-arrayCheckCount": false,
              "x-arrayOrderedMatching": false,
              "x-bodyMatchMode": "NONE",
              "x-matchResponseSchema": true
            },
            "request": {
              "body": "modelId={{model_id}}&category=category2&file=",
              "headers": {
                "Content-Type": "application/x-www-form-urlencoded"
              },
              "method": "POST",
              "uri": "/ImageCategorization/UploadFile/"
            },
            "x-testDescription": "",
            "x-testEnabled": true,
            "x-testName": "Upload training images by File",
            "x-testShouldPass": true
          }
        ]
      }
    },
    "/ImageCategorization/UploadUrls/": {
      "post": {
        "consumes": [
          "application/x-www-form-urlencoded"
        ],
        "description": "You can use this endpoint to upload training images for a category (for the specified model) by image urls. You can upload multiple images in the same request by adding an array of urls. You will receive model information along with total number of images per category on successful execution.",
        "operationId": "ImageCategorizationUploadUrlsPost",
        "parameters": [
          {
            "description": "",
            "in": "formData",
            "name": "modelId",
            "required": true,
            "type": "string"
          },
          {
            "description": "",
            "in": "formData",
            "name": "category",
            "required": true,
            "type": "string"
          },
          {
            "description": "",
            "in": "formData",
            "name": "urls",
            "required": true,
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "Model Object",
            "examples": {
              "application/json": {
                "categories": [
                  {
                    "count": 0,
                    "name": "category1"
                  },
                  {
                    "count": 0,
                    "name": "category2"
                  }
                ],
                "model_id": "00000000-0000-0000-0000-000000000000",
                "model_type": "classification",
                "state": 0
              }
            }
          },
          "202": {
            "description": "Request partially successful. One or more urls might not be correct or got no response"
          },
          "400": {
            "description": "Category not valid for model. Check if this model has the category used in the request\n\nOR\n\nUrls missing  Check if you have included an array of image urls"
          },
          "404": {
            "description": "Model does not exists. Check if the model id exists"
          }
        },
        "security": [
          {
            "ApiKey": []
          }
        ],
        "summary": "Upload training images by Url",
        "tags": [
          "Image Classification Model Upload"
        ],
        "x-code-samples": [
          {
            "lang": "Nodejs",
            "source": "var request = require('request')\nvar querystring = require('querystring')\nconst form_data = {'modelId' : 'REPLACE_MODEL_ID', 'category': 'category1', 'urls': ['https://nanonets.s3-us-west-2.amazonaws.com/test-images/test1.jpg']}\nconst options = {\n    url : 'https://app.nanonets.com/api/v2/ImageCategorization/UploadUrls/',\n    body: querystring.stringify(form_data),\n    headers: {\n        'Authorization' : 'Basic ' + Buffer.from('REPLACE_API_KEY' + ':').toString('base64'),\n        'Content-Type': 'application/x-www-form-urlencoded'\n    }\n}\nrequest.post(options, function(err, httpResponse, body) {\n\n  console.log(body)\n});\n"
          },
          {
            "lang": "Python",
            "source": "import requests\n\nurl = 'https://app.nanonets.com/api/v2/ImageCategorization/UploadUrls/'\n\nheaders = {\n    'accept': 'application/x-www-form-urlencoded'\n}\n\ndata = {'modelId' : 'REPLACE_MODEL_ID', 'category': 'category1', 'urls': ['https://nanonets.s3-us-west-2.amazonaws.com/test-images/test1.jpg']}\n\nresponse = requests.request('POST', url, headers=headers, auth= requests.auth.HTTPBasicAuth('REPLACE_API_KEY', ''), data=data)\n\nprint(response.text)"
          },
          {
            "lang": "Shell",
            "source": "curl --request POST \\\n  --url 'https://app.nanonets.com/api/v2/ImageCategorization/UploadUrls/' \\\n  --header 'accept: application/x-www-form-urlencoded' \\\n  -d 'modelId=REPLACE_MODEL_ID&category=category1&urls=https://nanonets.s3-us-west-2.amazonaws.com/test-images/test1.jpg' \\\n  -u 'REPLACE_API_KEY'"
          },
          {
            "lang": "Golang",
            "source": "package main\n\n\nimport (\n    \"bytes\"\n    \"fmt\"\n    \"io/ioutil\"\n    \"net/http\"\n    \"net/url\"\n)\n\n\nfunc main() {\n    UploadUrl := \"https://app.nanonets.com/api/v2/ImageCategorization/UploadUrls/\"\n\n\n    data := url.Values{}\n    data.Set(\"modelId\", \"REPLACE_MODEL_ID\")\n    data.Add(\"category\", \"category1\")\n    data.Add(\"urls\", \"https://nanonets.s3-us-west-2.amazonaws.com/test-images/test1.jpg\")\n\n\n    req, err := http.NewRequest(\"POST\", UploadUrl, bytes.NewBufferString(data.Encode()))\n    if err != nil {\n        fmt.Println(err)\n        return\n    }\n\n\n    req.Header.Add(\"Content-Type\", \"application/x-www-form-urlencoded\")\n    req.SetBasicAuth(\"REPLACE_API_KEY\", \"\")\n\n\n    res, err := http.DefaultClient.Do(req)\n    if err != nil {\n        fmt.Println(err)\n        return\n    }\n    defer res.Body.Close()\n\n\n    body, err := ioutil.ReadAll(res.Body)\n    if err != nil {\n        fmt.Println(err)\n        return\n    }\n\n\n    fmt.Println(res)\n    fmt.Println(string(body))\n}\n"
          },
          {
            "lang": "JavaScript",
            "source": "var data = 'modelId=REPLACE_MODEL_ID&category=category1&urls=https://nanonets.s3-us-west-2.amazonaws.com/test-images/test1.jpg';\n\nvar xhr = new XMLHttpRequest();\n\nxhr.addEventListener(\"readystatechange\", function () {\n  if (this.readyState === this.DONE) {\n    console.log(this.responseText);\n  }\n});\n\nxhr.open(\"POST\", \"https://app.nanonets.com/api/v2/ImageCategorization/UploadUrls/\");\nxhr.setRequestHeader(\"Content-Type\", \"application/x-www-form-urlencoded\");\nxhr.setRequestHeader(\"authorization\", \"Basic \" + btoa(\"REPLACE_API_KEY:\"));\n\nxhr.send(data);"
          },
          {
            "lang": "Ruby",
            "source": "require 'uri' require 'net/http'\nurl = URI('https://app.nanonets.com/api/v2/ImageCategorization/UploadUrls/')\nhttp = Net::HTTP.new(url.host, url.port) http.use_ssl = true\nrequest = Net::HTTP::Post.new(url) request[\"accept\"] = 'application/x-www-form-urlencoded' request.basic_auth 'REPLACE_API_KEY', '' request.set_form_data({'modelId' => 'REPLACE_MODEL_ID', 'category' => 'category1', 'urls' => ['https://nanonets.s3-us-west-2.amazonaws.com/test-images/test1.jpg']}) response = http.request(request)\nputs response.read_body\n"
          },
          {
            "lang": "C#",
            "source": "var client = new RestClient(\"https://app.nanonets.com/api/v2/ImageCategorization/UploadUrls/\");\nvar request = new RestRequest(Method.POST);\nrequest.AddHeader(\"authorization\", \"Basic \" + Convert.ToBase64String(Encoding.Default.GetBytes(\"REPLACE_API_KEY:\")));\nrequest.AddHeader(\"accept\", \"application/x-www-form-urlencoded\");\nrequest.AddParameter(\"modelId\", \"REPLACE_MODEL_ID\");\nrequest.AddParameter(\"category\", \"category1\");\nrequest.AddParameter(\"urls\", \"https://nanonets.s3-us-west-2.amazonaws.com/test-images/test1.jpg\");\nIRestResponse response = client.Execute(request);"
          },
          {
            "lang": "Java",
            "source": "OkHttpClient client = new OkHttpClient();\n\nRequestBody formBody = new FormBody.Builder()\n        .add(\"modelId\", \"REPLACE_MODEL_ID\")\n        .add(\"category\", \"category1\")\n        .add(\"urls\", \"https://nanonets.s3-us-west-2.amazonaws.com/test-images/test1.jpg\").build();\n\nRequest request = new Request.Builder()\n        .url(\"https://app.nanonets.com/api/v2/ImageCategorization/UploadUrls/\")\n        .post(formBody)\n        .addHeader(\"Authorization\", Credentials.basic(\"REPLACE_API_KEY\", \"\"))\n        .build();\n\nResponse response = client.newCall(request).execute();"
          }
        ],
        "x-operation-settings": {
          "AllowDynamicFormParameters": false,
          "AllowDynamicQueryParameters": false,
          "CollectParameters": false,
          "IsMultiContentStreaming": false
        },
        "x-unitTests": [
          {
            "expectedResponse": {
              "headers": {},
              "x-allowExtraHeaders": true,
              "x-arrayCheckCount": false,
              "x-arrayOrderedMatching": false,
              "x-bodyMatchMode": "NONE",
              "x-matchResponseSchema": true
            },
            "request": {
              "body": "modelId={{model_id}}&category={{category1}}&urls=http://r.ddmcdn.com/w_830/s_f/o_1/cx_0/cy_66/cw_288/ch_162/APL/uploads/2014/10/cat_5-1.jpg",
              "headers": {
                "Content-Type": "application/x-www-form-urlencoded"
              },
              "method": "POST",
              "uri": "/ImageCategorization/UploadUrls/"
            },
            "x-testDescription": "",
            "x-testEnabled": true,
            "x-testName": "Upload training images by Url",
            "x-testShouldPass": true
          }
        ]
      }
    },
    "/Inferences/Model/{model_id}/ImageLevelInferences?start_day_interval={start_day}&current_batch_day={end_day}": {
      "get": {
        "description": "This endpoint retrieves the files that have been processed by the prediction endpoints ",
        "operationId": "OCRModelListPredictionFiles",
        "parameters": [
          {
            "description": "",
            "in": "path",
            "name": "model_id",
            "required": true,
            "type": "string"
          },
          {
            "description": "The number of days since 1st Jan 1970 GMT which represents the start of the period",
            "in": "query",
            "name": "start_day",
            "required": true,
            "type": "integer"
          },
          {
            "description": "The number of days since 1st Jan 1970 GMT which represents the end of the period",
            "in": "query",
            "name": "end_day",
            "required": true,
            "type": "integer"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "Images Object",
            "examples": {
              "application/json": {
                "moderated_images": [
                  {
                    "day_since_epoch": 18564,
                    "hour_of_day": 15,
                    "id": "00000000-0000-0000-0000-000000000000",
                    "is_moderated": true,
                    "model_id": "category1",
                    "predicted_boxes": [
                      {
                        "label": "invoice_id",
                        "ocr_text": "877541",
                        "xmax": 984,
                        "xmin": 616,
                        "ymax": 357,
                        "ymin": 321
                      }
                    ],
                    "url": "uploadedfiles/00000000-0000-0000-0000-000000000000/PredictionImages/0000000001.jpeg"
                  }
                ],
                "moderated_images_count": 55,
                "unmoderated_images": [
                  {
                    "day_since_epoch": 18565,
                    "hour_of_day": 23,
                    "id": "00000000-0000-0000-0000-000000000000",
                    "is_moderated": false,
                    "model_id": "00000000-0000-0000-0000-000000000000",
                    "predicted_boxes": [
                      {
                        "label": "seller_name",
                        "ocr_text": "Apple",
                        "xmax": 984,
                        "xmin": 616,
                        "ymax": 357,
                        "ymin": 321
                      }
                    ],
                    "url": "uploadedfiles/00000000-0000-0000-0000-000000000000/PredictionImages/0000000002.jpeg"
                  }
                ],
                "unmoderated_images_count": 156
              }
            }
          },
          "404": {
            "description": "Model does not exists. Check if you have entered correct model id with valid API key"
          }
        },
        "security": [
          {
            "ApiKey": []
          }
        ],
        "summary": "Get All Prediction Files",
        "tags": [
          "OCR Predict"
        ],
        "x-code-samples": [
          {
            "lang": "Nodejs",
            "source": "var request = require('request')\nconst options = {\n    url : 'https://app.nanonets.com/api/v2/Inferences/Model/' + 'REPLACE_MODEL_ID' + '/ImageLevelInferences?start_day_interval={start_day}&current_batch_day={end_day}',\n    headers: {\n        'Authorization' : 'Basic ' + Buffer.from('REPLACE_API_KEY' + ':').toString('base64')\n    }\n}\nrequest.get(options, function(err, httpResponse, body) {\n\n  console.log(body)\n});\n"
          },
          {
            "lang": "Python",
            "source": "import requests\n\nurl = 'https://app.nanonets.com/api/v2/Inferences/Model/' + 'REPLACE_MODEL_ID' + '/ImageLevelInferences?start_day_interval={start_day}&current_batch_day={end_day}'\n\nresponse = requests.request('GET', url, auth=requests.auth.HTTPBasicAuth('REPLACE_API_KEY',''))\n\nprint(response.text)"
          },
          {
            "lang": "Shell",
            "source": "curl --request GET \\\n  --url 'https://app.nanonets.com/api/v2/Inferences/Model/{{model_id}}/ImageLevelInferences?start_day_interval={start_day}&current_batch_day={end_day}' \\\n  -u 'REPLACE_API_KEY'"
          },
          {
            "lang": "Golang",
            "source": "package main\n\nimport (\n    \"fmt\"\n    \"net/http\"\n    \"io/ioutil\"\n)\n\nfunc main() {\n\n    url := \"https://app.nanonets.com/api/v2/Inferences/Model/{{model_id}}/ImageLevelInferences?start_day_interval={start_day}&current_batch_day={end_day}\"\n\n    req, _ := http.NewRequest(\"GET\", url, nil)\n\n    req.SetBasicAuth(\"REPLACE_API_KEY\", \"\")\n\n    res, _ := http.DefaultClient.Do(req)\n\n    defer res.Body.Close()\n    body, _ := ioutil.ReadAll(res.Body)\n\n    fmt.Println(res)\n    fmt.Println(string(body))\n\n}"
          },
          {
            "lang": "JavaScript",
            "source": "var data = null;\n\nvar xhr = new XMLHttpRequest();\n\nxhr.addEventListener(\"readystatechange\", function () {\n  if (this.readyState === this.DONE) {\n    console.log(this.responseText);\n  }\n});\n\nxhr.open(\"GET\", \"https://app.nanonets.com/api/v2/Inferences/Model/{{model_id}}/ImageLevelInferences?start_day_interval={start_day}&current_batch_day={end_day}\");\nxhr.setRequestHeader(\"authorization\", \"Basic \" + btoa(\"REPLACE_API_KEY:\"));\n\nxhr.send(data);"
          },
          {
            "lang": "Ruby",
            "source": "require 'uri' require 'net/http'\nurl = URI(\"https://app.nanonets.com/api/v2/Inferences/Model/{{model_id}}/ImageLevelInferences?start_day_interval={start_day}&current_batch_day={end_day}\")\nhttp = Net::HTTP.new(url.host, url.port) http.use_ssl = true\nrequest = Net::HTTP::Get.new(url) request.basic_auth 'REPLACE_API_KEY', '' response = http.request(request)\nputs response.read_body"
          },
          {
            "lang": "C#",
            "source": "var client = new RestClient(\"https://app.nanonets.com/api/v2/Inferences/Model/{{model_id}}/ImageLevelInferences?start_day_interval={start_day}&current_batch_day={end_day}\");\nvar request = new RestRequest(Method.GET);\nrequest.AddHeader(\"authorization\", \"Basic \" + Convert.ToBase64String(Encoding.Default.GetBytes(\"REPLACE_API_KEY:\")));\nIRestResponse response = client.Execute(request);"
          },
          {
            "lang": "Java",
            "source": "OkHttpClient client = new OkHttpClient();\n\nRequest request = new Request.Builder()\n  .url(\"https://app.nanonets.com/api/v2/Inferences/Model/{{model_id}}/ImageLevelInferences?start_day_interval={start_day}&current_batch_day={end_day}\")\n  .get()\n  .addHeader(\"authorization\", Credentials.basic(\"REPLACE_API_KEY\", \"\"))\n  .build();\n\nResponse response = client.newCall(request).execute();"
          }
        ],
        "x-operation-settings": {
          "AllowDynamicFormParameters": false,
          "AllowDynamicQueryParameters": false,
          "CollectParameters": false,
          "IsMultiContentStreaming": false
        },
        "x-unitTests": []
      }
    },
    "/Inferences/Model/{{model_id}}/ImageLevelInferences/{{id}}": {
      "get": {
        "description": "This endpoint retrieves the results of a particular file by id  ",
        "operationId": "OCRModelGetPredictionFileById",
        "parameters": [
          {
            "description": "",
            "in": "path",
            "name": "model_id",
            "required": true,
            "type": "string"
          },
          {
            "description": "The ID of the file that was received from the async prediction endpoint",
            "in": "path",
            "name": "id",
            "required": true,
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "Model Object",
            "examples": {
              "application/json": {
                "message": "Success",
                "result": [
                  {
                    "input": "string",
                    "message": "Success",
                    "prediction": [
                      {
                        "label": "category1",
                        "ocr_text": "string",
                        "score": 0.9,
                        "xmax": 100,
                        "xmin": 0,
                        "ymax": 100,
                        "ymin": 0
                      },
                      {
                        "cells": [
                          {
                            "col": 1,
                            "col_span": 1,
                            "label": "col 1",
                            "row": 1,
                            "row_span": 1,
                            "score": 99.99,
                            "text": "ocr text 1",
                            "xmax": 258,
                            "xmin": 159,
                            "ymax": 1357,
                            "ymin": 1258
                          },
                          {
                            "col": 2,
                            "col_span": 1,
                            "label": "col 2",
                            "row": 1,
                            "row_span": 1,
                            "score": 99.99,
                            "text": "ocr text 2",
                            "xmax": 380,
                            "xmin": 258,
                            "ymax": 1357,
                            "ymin": 1258
                          },
                          {
                            "col": 1,
                            "col_span": 1,
                            "label": "col 1",
                            "row": 2,
                            "row_span": 1,
                            "score": 99.99,
                            "text": "ocr text 3",
                            "xmax": 258,
                            "xmin": 159,
                            "ymax": 1439,
                            "ymin": 1357
                          },
                          {
                            "col": 2,
                            "col_span": 1,
                            "label": "col 2",
                            "row": 2,
                            "row_span": 1,
                            "score": 99.99902,
                            "text": "ocr text 4",
                            "xmax": 380,
                            "xmin": 258,
                            "ymax": 1439,
                            "ymin": 1357
                          }
                        ],
                        "label": "",
                        "ocr_text": "table 1",
                        "score": 99.99,
                        "type": "table",
                        "xmax": 380,
                        "xmin": 159,
                        "ymax": 1439,
                        "ymin": 1258
                      }
                    ]
                  }
                ]
              }
            }
          },
          "404": {
            "description": "Model does not exists. Check if you have entered correct model id with valid API key"
          }
        },
        "security": [
          {
            "ApiKey": []
          }
        ],
        "summary": "Get Prediction File By ID",
        "tags": [
          "OCR Predict"
        ],
        "x-code-samples": [
          {
            "lang": "Nodejs",
            "source": "var request = require('request')\nconst options = {\n    url : 'https://app.nanonets.com/api/v2/Inferences/Model/{{model_id}}/ImageLevelInferences/{{id}}',\n    headers: {\n        'Authorization' : 'Basic ' + Buffer.from('REPLACE_API_KEY' + ':').toString('base64')\n    }\n}\nrequest.get(options, function(err, httpResponse, body) {\n\n  console.log(body)\n});\n"
          },
          {
            "lang": "Python",
            "source": "import requests\n\nurl = 'https://app.nanonets.com/api/v2/Inferences/Model/{{model_id}}/ImageLevelInferences/{{id}}'\n\nresponse = requests.request('GET', url, auth=requests.auth.HTTPBasicAuth('REPLACE_API_KEY',''))\n\nprint(response.text)"
          },
          {
            "lang": "Shell",
            "source": "curl --request GET \\\n  --url 'https://app.nanonets.com/api/v2/Inferences/Model/{{model_id}}/ImageLevelInferences/{{id}}' \\\n  -u 'REPLACE_API_KEY'"
          },
          {
            "lang": "Golang",
            "source": "package main\n\nimport (\n    \"fmt\"\n    \"net/http\"\n    \"io/ioutil\"\n)\n\nfunc main() {\n\n    url := \"https://app.nanonets.com/api/v2/Inferences/Model/{{model_id}}/ImageLevelInferences/{{id}}\"\n\n    req, _ := http.NewRequest(\"GET\", url, nil)\n\n    req.SetBasicAuth(\"REPLACE_API_KEY\", \"\")\n\n    res, _ := http.DefaultClient.Do(req)\n\n    defer res.Body.Close()\n    body, _ := ioutil.ReadAll(res.Body)\n\n    fmt.Println(res)\n    fmt.Println(string(body))\n\n}"
          },
          {
            "lang": "JavaScript",
            "source": "var data = null;\n\nvar xhr = new XMLHttpRequest();\n\nxhr.addEventListener(\"readystatechange\", function () {\n  if (this.readyState === this.DONE) {\n    console.log(this.responseText);\n  }\n});\n\nxhr.open(\"GET\", \"https://app.nanonets.com/api/v2/Inferences/Model/{{model_id}}/ImageLevelInferences/{{id}}\");\nxhr.setRequestHeader(\"authorization\", \"Basic \" + btoa(\"REPLACE_API_KEY:\"));\n\nxhr.send(data);"
          },
          {
            "lang": "Ruby",
            "source": "require 'uri' require 'net/http'\nurl = URI(\"https://app.nanonets.com/api/v2/Inferences/Model/{{model_id}}/ImageLevelInferences/{{id}}\")\nhttp = Net::HTTP.new(url.host, url.port) http.use_ssl = true\nrequest = Net::HTTP::Get.new(url) request.basic_auth 'REPLACE_API_KEY', '' response = http.request(request)\nputs response.read_body"
          },
          {
            "lang": "C#",
            "source": "var client = new RestClient(\"https://app.nanonets.com/api/v2/Inferences/Model/{{model_id}}/ImageLevelInferences/{{id}}\");\nvar request = new RestRequest(Method.GET);\nrequest.AddHeader(\"authorization\", \"Basic \" + Convert.ToBase64String(Encoding.Default.GetBytes(\"REPLACE_API_KEY:\")));\nIRestResponse response = client.Execute(request);"
          },
          {
            "lang": "Java",
            "source": "OkHttpClient client = new OkHttpClient();\n\nRequest request = new Request.Builder()\n  .url(\"https://app.nanonets.com/api/v2/Inferences/Model/{{model_id}}/ImageLevelInferences/{{id}}\")\n  .get()\n  .addHeader(\"authorization\", Credentials.basic(\"REPLACE_API_KEY\", \"\"))\n  .build();\n\nResponse response = client.newCall(request).execute();"
          }
        ],
        "x-operation-settings": {
          "AllowDynamicFormParameters": false,
          "AllowDynamicQueryParameters": false,
          "CollectParameters": false,
          "IsMultiContentStreaming": false
        },
        "x-unitTests": []
      }
    },
    "/MultiLabelClassification/Model/": {
      "post": {
        "description": "You can create a new model using this endpoint. A successful API call will return the json structure of the newly created model. You can then use the model's id to upload images for each category and then retrain the model.",
        "operationId": "MultiLabelImageClassificationPost",
        "parameters": [
          {
            "description": "",
            "in": "body",
            "name": "Body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/CreateNewModelrequest"
            }
          },
          {
            "description": "",
            "in": "header",
            "name": "Content-Type",
            "required": true,
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "Model Object",
            "examples": {
              "application/json": {
                "categories": [
                  {
                    "count": 0,
                    "name": "category1"
                  },
                  {
                    "count": 0,
                    "name": "category2"
                  }
                ],
                "model_id": "00000000-0000-0000-0000-000000000000",
                "model_type": "multilabelclassification",
                "state": 0
              }
            }
          },
          "400": {
            "description": "Zero or One category in request. Add two or more categories in parameters"
          }
        },
        "security": [
          {
            "ApiKey": []
          }
        ],
        "summary": "Create New Model",
        "tags": [
          "Multi Label Classification Model"
        ],
        "x-code-samples": [
          {
            "lang": "Nodejs",
            "source": "var request = require('request')\nconst form_data = {'categories' : ['category1', 'category2']}\nconst options = {\n    url : 'https://app.nanonets.com/api/v2/MultiLabelClassification/Model/',\n    body: JSON.stringify(form_data),\n    headers: {\n        'Authorization' : 'Basic ' + Buffer.from('REPLACE_API_KEY' + ':').toString('base64'),\n        'Content-Type': \"application/json\",\n    }\n}\nrequest.post(options, function(err, httpResponse, body) {\n\n  console.log(body)\n});\n"
          },
          {
            "lang": "Python",
            "source": "import requests\n\nurl = \"https://app.nanonets.com/api/v2/MultiLabelClassification/Model/\"\n\npayload = \"{\\\"categories\\\" : [\\\"category1\\\", \\\"category2\\\"]}\"\nheaders = {\n    'Content-Type': \"application/json\",\n}\n\nresponse = requests.request(\"POST\", url, headers=headers, auth=requests.auth.HTTPBasicAuth('REPLACE_API_KEY', ''), data=payload)\n\nprint(response.text)\n"
          },
          {
            "lang": "Shell",
            "source": "curl -X POST https://app.nanonets.com/api/v2/MultiLabelClassification/Model/ \\\n    -H 'Content-Type: application/json' \\\n    -u 'REPLACE_API_KEY' \\\n    -d '{\"categories\" : [\"category1\", \"category2\"]}'"
          },
          {
            "lang": "Golang",
            "source": "package main\n\nimport (\n    \"fmt\"\n    \"io/ioutil\"\n    \"net/http\"\n    \"strings\"\n)\n\nfunc main() {\n\n    url := \"https://app.nanonets.com/api/v2/MultiLabelClassification/Model/\"\n\n    payload := strings.NewReader(\"{\\\"categories\\\" : [\\\"category1\\\", \\\"category2\\\"]}\")\n\n    req, _ := http.NewRequest(\"POST\", url, payload)\n\n    req.Header.Add(\"Content-Type\", \"application/json\")\n    req.SetBasicAuth(\"REPLACE_API_KEY\", \"\")\n\n    res, _ := http.DefaultClient.Do(req)\n\n    defer res.Body.Close()\n    body, _ := ioutil.ReadAll(res.Body)\n\n    fmt.Println(res)\n    fmt.Println(string(body))\n\n}"
          },
          {
            "lang": "JavaScript",
            "source": "var data = JSON.stringify({\n  \"categories\": [\n    \"category1\",\n    \"category2\"\n  ]\n});\n\nvar xhr = new XMLHttpRequest();\nxhr.withCredentials = true;\n\nxhr.addEventListener(\"readystatechange\", function () {\n  if (this.readyState === 4) {\n    console.log(this.responseText);\n  }\n});\n\nxhr.open(\"POST\", \"https://app.nanonets.com/api/v2/MultiLabelClassification/Model/\");\nxhr.setRequestHeader(\"Content-Type\", \"application/json\");\nxhr.setRequestHeader(\"authorization\", \"Basic \" + btoa(\"REPLACE_API_KEY:\"));\n\nxhr.send(data);"
          },
          {
            "lang": "Ruby",
            "source": "require 'uri'\nrequire 'net/http'\n\nurl = URI(\"https://app.nanonets.com/api/v2/MultiLabelClassification/Model/\")\n\nhttp = Net::HTTP.new(url.host, url.port)\nhttp.use_ssl = true\n\nrequest = Net::HTTP::Post.new(url)\nrequest[\"Content-Type\"] = 'application/json'\nrequest.basic_auth 'REPLACE_API_KEY', ''\nrequest.body = \"{\\\"categories\\\" : [\\\"category1\\\", \\\"category2\\\"]}\"\n\nresponse = http.request(request)\nputs response.read_body\n"
          },
          {
            "lang": "C#",
            "source": "var client = new RestClient(\"https://app.nanonets.com/api/v2/MultiLabelClassification/Model/\");\nvar request = new RestRequest(Method.POST);\nrequest.AddHeader(\"authorization\", \"Basic REPLACE_API_KEY\");\nrequest.AddHeader(\"Content-Type\", \"application/json\");\nrequest.AddParameter(\"undefined\", \"{\"categories\" : [\"category1\", \"category2\"]}\", ParameterType.RequestBody);\nIRestResponse response = client.Execute(request);"
          },
          {
            "lang": "Java",
            "source": "OkHttpClient client = new OkHttpClient();\n\nMediaType mediaType = MediaType.parse(\"application/json\");\nRequestBody body = RequestBody.create(mediaType, \"{\"categories\" : [\"category1\", \"category2\"]}\");\nRequest request = new Request.Builder()\n  .url(\"https://app.nanonets.com/api/v2/MultiLabelClassification/Model/\")\n  .post(body)\n  .addHeader(\"Content-Type\", \"application/json\")\n  .addHeader(\"Authorization\", Credentials.basic(\"REPLACE_API_KEY\", \"\"))\n  .build();\n\nResponse response = client.newCall(request).execute();"
          }
        ],
        "x-operation-settings": {
          "AllowDynamicFormParameters": false,
          "AllowDynamicQueryParameters": false,
          "CollectParameters": false,
          "IsMultiContentStreaming": false
        },
        "x-unitTests": [
          {
            "expectedResponse": {
              "headers": {},
              "x-allowExtraHeaders": true,
              "x-arrayCheckCount": false,
              "x-arrayOrderedMatching": false,
              "x-bodyMatchMode": "NONE",
              "x-matchResponseSchema": true
            },
            "request": {
              "body": "{\"categories\" : [\"{{category1}}\", \"{{category2}}\"]}",
              "headers": {
                "Content-Type": "application/json"
              },
              "method": "POST",
              "uri": "/MultiLabelClassification/Model/"
            },
            "x-testDescription": "",
            "x-testEnabled": true,
            "x-testName": "Create New Model1",
            "x-testShouldPass": true
          }
        ]
      }
    },
    "/MultiLabelClassification/Model/{model_id}": {
      "get": {
        "description": "This endpoint retrieves a specific model's details given it's id.",
        "operationId": "MultiLabelClassificationByModelIdGet",
        "parameters": [
          {
            "description": "",
            "in": "path",
            "name": "model_id",
            "required": true,
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "Model Object",
            "examples": {
              "application/json": {
                "categories": [
                  {
                    "count": 0,
                    "name": "category1"
                  },
                  {
                    "count": 0,
                    "name": "category2"
                  }
                ],
                "model_id": "00000000-0000-0000-0000-000000000000",
                "model_type": "multilabelclassification",
                "state": 0
              }
            }
          },
          "404": {
            "description": "Model does not exists. Check if you have entered correct model id with valid API key"
          }
        },
        "security": [
          {
            "ApiKey": []
          }
        ],
        "summary": "Get Model by Id",
        "tags": [
          "Multi Label Classification Model"
        ],
        "x-code-samples": [
          {
            "lang": "Nodejs",
            "source": "var request = require('request')\nconst options = {\n    url : 'https://app.nanonets.com/api/v2/MultiLabelClassification/Model/' + 'REPLACE_MODEL_ID',\n    headers: {\n        'Authorization' : 'Basic ' + Buffer.from('REPLACE_API_KEY' + ':').toString('base64')\n    }\n}\nrequest.get(options, function(err, httpResponse, body) {\n\n  console.log(body)\n});\n"
          },
          {
            "lang": "Python",
            "source": "import requests\n\nurl = 'https://app.nanonets.com/api/v2/MultiLabelClassification/Model/' + {{model_id}}\n\nresponse = requests.request('GET', url, auth=requests.auth.HTTPBasicAuth('REPLACE_API_KEY',''))\n\nprint(response.text)"
          },
          {
            "lang": "Shell",
            "source": "curl --request GET \\\n  --url 'https://app.nanonets.com/api/v2/MultiLabelClassification/Model/{{model_id}}' \\\n  -u 'REPLACE_API_KEY'"
          },
          {
            "lang": "Golang",
            "source": "package main\n\nimport (\n    \"fmt\"\n    \"net/http\"\n    \"io/ioutil\"\n)\n\nfunc main() {\n\n    url := \"https://app.nanonets.com/api/v2/MultiLabelClassification/Model/\" + {{model_id}}\n\n    req, _ := http.NewRequest(\"GET\", url, nil)\n\n    req.SetBasicAuth(\"REPLACE_API_KEY\", \"\")\n\n    res, _ := http.DefaultClient.Do(req)\n\n    defer res.Body.Close()\n    body, _ := ioutil.ReadAll(res.Body)\n\n    fmt.Println(res)\n    fmt.Println(string(body))\n\n}"
          },
          {
            "lang": "JavaScript",
            "source": "var data = null;\n\nvar xhr = new XMLHttpRequest();\n\nxhr.addEventListener(\"readystatechange\", function () {\n  if (this.readyState === this.DONE) {\n    console.log(this.responseText);\n  }\n});\n\nxhr.open(\"GET\", \"https://app.nanonets.com/api/v2/MultiLabelClassification/Model/\" + {{model_id}});\nxhr.setRequestHeader(\"authorization\", \"Basic \" + btoa(\"REPLACE_API_KEY:\"));\n\nxhr.send(data);"
          },
          {
            "lang": "Ruby",
            "source": "require 'uri' require 'net/http'\nurl = URI('https://app.nanonets.com/api/v2/MultiLabelClassification/Model/' + {{model_id}})\nhttp = Net::HTTP.new(url.host, url.port) http.use_ssl = true\nrequest = Net::HTTP::Get.new(url) request.basic_auth 'REPLACE_API_KEY', '' response = http.request(request)\nputs response.read_body"
          },
          {
            "lang": "C#",
            "source": "var client = new RestClient(\"https://app.nanonets.com/api/v2/MultiLabelClassification/Model/\" + {{model_id}});\nvar request = new RestRequest(Method.GET);\nrequest.AddHeader(\"authorization\", \"Basic \" + Convert.ToBase64String(Encoding.Default.GetBytes(\"REPLACE_API_KEY:\")));\nIRestResponse response = client.Execute(request);"
          },
          {
            "lang": "Java",
            "source": "OkHttpClient client = new OkHttpClient();\n\nRequest request = new Request.Builder()\n  .url(\"https://app.nanonets.com/api/v2/MultiLabelClassification/Model/\" + {{model_id}})\n  .get()\n  .addHeader(\"authorization\", Credentials.basic(\"REPLACE_API_KEY\", \"\"))\n  .build();\n\nResponse response = client.newCall(request).execute();"
          }
        ],
        "x-operation-settings": {
          "AllowDynamicFormParameters": false,
          "AllowDynamicQueryParameters": false,
          "CollectParameters": false,
          "IsMultiContentStreaming": false
        },
        "x-unitTests": []
      }
    },
    "/MultiLabelClassification/Model/{model_id}/LabelFiles/": {
      "post": {
        "consumes": [
          "multipart/form-data"
        ],
        "description": "Use the model to predict which one of the categories an image (given an image file) belongs to. You can specify multiple image files.",
        "operationId": "MultiLabelClassificationLabelFilesPost",
        "parameters": [
          {
            "description": "",
            "in": "path",
            "name": "model_id",
            "required": true,
            "type": "string"
          },
          {
            "description": "",
            "in": "formData",
            "name": "files",
            "required": true,
            "type": "file"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "Model Object",
            "examples": {
              "application/json": {
                "message": "Success",
                "model_id": "00000000-0000-0000-0000-000000000000",
                "result": [
                  {
                    "file": "string",
                    "message": "Success",
                    "prediction": [
                      {
                        "label": "category1",
                        "probability": 0.9
                      },
                      {
                        "label": "category2",
                        "probability": 0.1
                      }
                    ]
                  }
                ]
              }
            }
          },
          "400": {
            "description": "File missing. Check if you have included a file in the request\n\nOR\n\nIncorrect image. Check if file you included is a valid PNG or JPEG"
          },
          "402": {
            "description": "Exhausted Free API Calls. You have exhausted your free API calls please change your plan <a href=\"https://app.nanonets.com/user/apps\">here</a>"
          },
          "404": {
            "description": "Model does not exists. Check if the model id exists"
          }
        },
        "security": [
          {
            "ApiKey": []
          }
        ],
        "summary": "Prediction for image File",
        "tags": [
          "Multi Label Classification Predict"
        ],
        "x-code-samples": [
          {
            "lang": "Nodejs",
            "source": "var request = require('request')\nvar fs = require('fs')\nconst form_data = {'files' : fs.createReadStream('REPLACE_IMAGE_PATH.jpg')}\nconst options = {\n    url : 'https://app.nanonets.com/api/v2/MultiLabelClassification/Model/{model_id}/LabelFiles/',\n    formData: form_data,\n    headers: {\n        'Authorization' : 'Basic ' + Buffer.from('REPLACE_API_KEY' + ':').toString('base64')\n    }\n}\nrequest.post(options, function(err, httpResponse, body) {\n\n  console.log(body)\n});\n"
          },
          {
            "lang": "Python",
            "source": "import requests\n\nurl = 'https://app.nanonets.com/api/v2/MultiLabelClassification/Model/{model_id}/LabelFiles/'\n\ndata = {'files': open('REPLACE_IMAGE_PATH.jpg', 'rb')}\n\nresponse = requests.post(url, auth= requests.auth.HTTPBasicAuth('REPLACE_API_KEY', ''), files=data)\n\nprint(response.text)\n"
          },
          {
            "lang": "Shell",
            "source": "curl --request POST \\\n  --url 'https://app.nanonets.com/api/v2/MultiLabelClassification/Model/{model_id}/LabelFiles/' \\\n  --header 'accept: multipart/form-data' \\\n  -u 'REPLACE_API_KEY' \\\n  -F 'files=@REPLACE_IMAGE_PATH.jpg'"
          },
          {
            "lang": "Golang",
            "source": "package main\n\nimport (\n    \"bytes\"\n    \"fmt\"\n    \"io\"\n    \"io/ioutil\"\n    \"mime/multipart\"\n    \"net/http\"\n    \"os\"\n    \"path/filepath\"\n)\n\nfunc main() {\n\n    url := \"https://app.nanonets.com/api/v2/MultiLabelClassification/Model/{model_id}/LabelFiles/\"\n\n    file, err := os.Open(\"test.jpg\")\n    if err != nil {\n        fmt.Println(err)\n        return\n    }\n\n    defer file.Close()\n\n    body := &bytes.Buffer{}\n    writer := multipart.NewWriter(body)\n\n    part, err := writer.CreateFormFile(\"files\", filepath.Base(\"test.jpg\"))\n    if err != nil {\n        fmt.Println(err)\n        return\n    }\n    _, err = io.Copy(part, file)\n\n\n    contentType := writer.FormDataContentType()\n\n    err = writer.Close()\n    if err != nil {\n        fmt.Println(err)\n        return\n    }\n\n    req, _ := http.NewRequest(\"POST\", url, body)\n\n    req.Header.Add(\"Content-Type\", contentType)\n    req.SetBasicAuth(\"REPLACE_API_KEY\", \"\")\n\n    res, _ := http.DefaultClient.Do(req)\n\n    defer res.Body.Close()\n    output, _ := ioutil.ReadAll(res.Body)\n\n    fmt.Println(res)\n    fmt.Println(string(output))\n\n}\n"
          },
          {
            "lang": "JavaScript",
            "source": "var data = new FormData();\ndata.append('files', file); // file is a Blob object\n\nvar xhr = new XMLHttpRequest();\n\nxhr.addEventListener(\"readystatechange\", function () {\n    if (this.readyState === this.DONE) {\n        console.log(this.responseText);\n    }\n});\n\nxhr.open(\"POST\", \"https://app.nanonets.com/api/v2/MultiLabelClassification/Model/{model_id}/LabelFiles/\");\nxhr.setRequestHeader(\"authorization\", \"Basic \" + btoa(\"REPLACE_API_KEY:\"));\n\nxhr.send(data);\n"
          },
          {
            "lang": "Ruby",
            "source": "require 'uri'\nrequire 'net/http'\nrequire 'net/http/post/multipart'\n\nurl = URI('https://app.nanonets.com/api/v2/MultiLabelClassification/Model/{model_id}/LabelFiles/')\n\nhttp = Net::HTTP.new(url.host, url.port)\nhttp.use_ssl = true\n\nFile.open('test.jpg') do |jpg|\nrequest = Net::HTTP::Post::Multipart.new(url.path,\n    'files' => UploadIO.new(jpg, 'image/jpeg', 'test.jpg'),\nrequest.basic_auth 'REPLACE_API_KEY', ''\nresponse = Net::HTTP.start(url.host, url.port) do |http|\n    http.request(request)\nend\nputs response.read_body\nend\n"
          },
          {
            "lang": "C#",
            "source": "var client = new RestClient(\"https://app.nanonets.com/api/v2/MultiLabelClassification/Model/{model_id}/LabelFiles/\");\nvar request = new RestRequest(Method.POST);\nrequest.AddHeader(\"authorization\", \"Basic \" + Convert.ToBase64String(Encoding.Default.GetBytes(\"REPLACE_API_KEY:\")));\nrequest.AddHeader(\"accept\", \"Multipart/form-data\");\nrequest.AddFile(\"files\", \"REPLACE_IMAGE_PATH.jpg\");\nIRestResponse response = client.Execute(request);"
          },
          {
            "lang": "Java",
            "source": "OkHttpClient client = new OkHttpClient();\nprivate static final MediaType MEDIA_TYPE_JPG = MediaType.parse(\"image/jpeg\");\n\nOkHttpClient client = new OkHttpClient();\n\nRequestBody requestBody = new MultipartBody.Builder()\n        .setType(MultipartBody.FORM)\n        .addFormDataPart(\"files\", \"REPLACE_IMAGE_PATH.jpg\", RequestBody.create(MEDIA_TYPE_JPG, new File(\"REPLACE_IMAGE_PATH.jpg\")))\n        .build();\n\nrequest = new Request.Builder()\n        .url(\"https://app.nanonets.com/api/v2/MultiLabelClassification/Model/{model_id}/LabelFiles/\")\n        .post(requestBody)\n        .addHeader(\"Authorization\", Credentials.basic(\"REPLACE_API_KEY\", \"\"))\n        .build();\n\nResponse response = client.newCall(request).execute();"
          }
        ],
        "x-operation-settings": {
          "AllowDynamicFormParameters": false,
          "AllowDynamicQueryParameters": false,
          "CollectParameters": false,
          "IsMultiContentStreaming": false
        },
        "x-unitTests": []
      }
    },
    "/MultiLabelClassification/Model/{model_id}/LabelUrls/": {
      "post": {
        "consumes": [
          "multipart/form-data"
        ],
        "description": "Use the model to predict what all categories an image (given the image url) belongs to. You can specify multiple image urls.",
        "operationId": "MultiLabelClassificationPost",
        "parameters": [
          {
            "description": "",
            "in": "path",
            "name": "model_id",
            "required": true,
            "type": "string"
          },
          {
            "description": "",
            "in": "formData",
            "name": "urls",
            "required": true,
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "Model Object",
            "examples": {
              "application/json": {
                "message": "Success",
                "model_id": "00000000-0000-0000-0000-000000000000",
                "result": [
                  {
                    "file": "string",
                    "message": "Success",
                    "prediction": [
                      {
                        "label": "category1",
                        "probability": 0.9
                      },
                      {
                        "label": "category2",
                        "probability": 0.1
                      }
                    ]
                  }
                ]
              }
            }
          },
          "202": {
            "description": "Request partially successful. One or more urls might not be correct or got no response"
          },
          "400": {
            "description": "Urls missing. Check if you have an included array of image urls"
          },
          "402": {
            "description": "Exhausted Free API Calls  You have exhausted your free API calls please change your plan <a href=\"https://app.nanonets.com/user/apps\">here</a>"
          },
          "404": {
            "description": "Model does not exists. Check if the model id exists"
          }
        },
        "security": [
          {
            "ApiKey": []
          }
        ],
        "summary": "Prediction for image URLs",
        "tags": [
          "Multi Label Classification Predict"
        ],
        "x-code-samples": [
          {
            "lang": "Nodejs",
            "source": "var request = require('request')\nvar querystring = require('querystring')\nconst form_data = {'urls' : ['https://nanonets.s3-us-west-2.amazonaws.com/test-images/test1.jpg']}\nconst options = {\n    url : 'https://app.nanonets.com/api/v2/MultiLabelClassification/Model/{{model_id}}/LabelUrls/',\n    body: querystring.stringify(form_data),\n    headers: {\n        'Authorization' : 'Basic ' + Buffer.from('REPLACE_API_KEY' + ':').toString('base64'),\n        'Content-Type': 'application/x-www-form-urlencoded'\n    }\n}\nrequest.post(options, function(err, httpResponse, body) {\n\n  console.log(body)\n});\n"
          },
          {
            "lang": "Python",
            "source": "import requests\n\nurl = 'https://app.nanonets.com/api/v2/MultiLabelClassification/Model/{{model_id}}/LabelUrls/'\n\nheaders = {\n    'accept': 'application/x-www-form-urlencoded'\n}\n\ndata = {'urls' : ['https://nanonets.s3-us-west-2.amazonaws.com/test-images/test1.jpg']}\n\nresponse = requests.request('POST', url, headers=headers, auth=requests.auth.HTTPBasicAuth('REPLACE_API_KEY', ''), data=data)\n\nprint(response.text)"
          },
          {
            "lang": "Shell",
            "source": "curl --request POST \\\n  --url 'https://app.nanonets.com/api/v2/MultiLabelClassification/Model/{{model_id}}/LabelUrls/' \\\n  --header 'accept: application/x-www-form-urlencoded' \\\n  -d 'modelId=REPLACE_MODEL_ID&urls=https://nanonets.s3-us-west-2.amazonaws.com/test-images/test1.jpg' \\\n  -u 'REPLACE_API_KEY'"
          },
          {
            "lang": "Golang",
            "source": "package main\n\nimport (\n    \"bytes\"\n    \"fmt\"\n    \"io/ioutil\"\n    \"net/http\"\n    \"net/url\"\n)\n\nfunc main() {\n\n    labelUrl := \"https://app.nanonets.com/api/v2/MultiLabelClassification/Model/{{model_id}}/LabelUrls/\"\n\n    data := url.Values{}\n    data.Add(\"urls\", \"https://nanonets.s3-us-west-2.amazonaws.com/test-images/test1.jpg\")\n\n    req, _ := http.NewRequest(\"POST\", labelUrl, bytes.NewBufferString(data.Encode()))\n\n    req.Header.Add(\"Content-Type\", \"application/x-www-form-urlencoded\")\n    req.SetBasicAuth(\"REPLACE_API_KEY\", \"\")\n\n    res, _ := http.DefaultClient.Do(req)\n\n    defer res.Body.Close()\n    body, _ := ioutil.ReadAll(res.Body)\n\n    fmt.Println(res)\n    fmt.Println(string(body))\n\n}\n"
          },
          {
            "lang": "JavaScript",
            "source": "var data = JSON.stringify({\n  \"urls\": [\n    \"https://nanonets.s3-us-west-2.amazonaws.com/test-images/test1.jpg\"                          ]\n});\nvar xhr = new XMLHttpRequest();\n\nxhr.addEventListener(\"readystatechange\", function () {\n  if (this.readyState === this.DONE) {\n    console.log(this.responseText);\n  }\n});\n\nxhr.open(\"POST\", \"https://app.nanonets.com/api/v2/MultiLabelClassification/Model/{{model_id}}/LabelUrls/\");\nxhr.setRequestHeader(\"Content-Type\", \"application/x-www-form-urlencoded\");\nxhr.setRequestHeader(\"authorization\", \"Basic \" + btoa(\"REPLACE_API_KEY:\"));\n\nxhr.send(data);"
          },
          {
            "lang": "Ruby",
            "source": "require 'uri' require 'net/http'\nurl = URI('https://app.nanonets.com/api/v2/MultiLabelClassification/Model/{{model_id}}/LabelUrls/')\nhttp = Net::HTTP.new(url.host, url.port) http.use_ssl = true\nrequest = Net::HTTP::Post.new(url) request[\"accept\"] = 'application/x-www-form-urlencoded' request.basic_auth 'REPLACE_API_KEY', '' request.set_form_data({'urls' => ['https://nanonets.s3-us-west-2.amazonaws.com/test-images/test1.jpg']}) response = http.request(request)\nputs response.read_body"
          },
          {
            "lang": "C#",
            "source": "var client = new RestClient(\"https://app.nanonets.com/api/v2/MultiLabelClassification/Model/{{model_id}}/LabelUrls/\");\nvar request = new RestRequest(Method.POST);\nrequest.AddHeader(\"authorization\", \"Basic \" + Convert.ToBase64String(Encoding.Default.GetBytes(\"REPLACE_API_KEY:\")));\nrequest.AddHeader(\"accept\", \"application/x-www-form-urlencoded\");\nrequest.AddParameter(\"urls\", \"https://nanonets.s3-us-west-2.amazonaws.com/test-images/test1.jpg\");\nIRestResponse response = client.Execute(request);"
          },
          {
            "lang": "Java",
            "source": "OkHttpClient client = new OkHttpClient();\n\nRequestBody formBody = new FormBody.Builder()\n        .add(\"urls\", \"https://nanonets.s3-us-west-2.amazonaws.com/test-images/test1.jpg\").build();\n\nRequest request = new Request.Builder()\n    .url(\"https://app.nanonets.com/api/v2/MultiLabelClassification/Model/{{model_id}}/LabelUrls/\")\n    .post(formBody)\n    .addHeader(\"Authorization\", Credentials.basic(\"REPLACE_API_KEY\", \"\"))\n    .build();\n\nResponse response = client.newCall(request).execute();"
          }
        ],
        "x-operation-settings": {
          "AllowDynamicFormParameters": false,
          "AllowDynamicQueryParameters": false,
          "CollectParameters": false,
          "IsMultiContentStreaming": false
        },
        "x-unitTests": []
      }
    },
    "/MultiLabelClassification/Model/{model_id}/Train/": {
      "post": {
        "consumes": [
          "application/x-www-form-urlencoded"
        ],
        "description": "You can use this endpoint to train a model after uploading images for each category. You can use the same endpoint to retrain a model after uploading more images to improve the model.",
        "operationId": "MultiLabelClassificationModelTrainByModelIdPost",
        "parameters": [
          {
            "description": "",
            "in": "path",
            "name": "model_id",
            "required": true,
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "Model Object",
            "examples": {
              "application/json": {
                "categories": [
                  {
                    "count": 0,
                    "name": "category1"
                  },
                  {
                    "count": 0,
                    "name": "category2"
                  }
                ],
                "model_id": "00000000-0000-0000-0000-000000000000",
                "model_type": "multilabelclassification",
                "state": 0
              }
            }
          },
          "400": {
            "description": "Model not ready for training. Check if the images for the model are uploaded"
          },
          "404": {
            "description": "Model does not exists. Check if the model id exists"
          }
        },
        "security": [
          {
            "ApiKey": []
          }
        ],
        "summary": "Train Model",
        "tags": [
          "Multi Label Classification Train"
        ],
        "x-code-samples": [
          {
            "lang": "Nodejs",
            "source": "var request = require('request')\nconst options = {\n    url : 'https://app.nanonets.com/api/v2/MultiLabelClassification/Model/{{model_id}}/Train/',\n    headers: {\n        'Authorization' : 'Basic ' + Buffer.from('REPLACE_API_KEY' + ':').toString('base64')\n    }\n}\nrequest.post(options, function(err, httpResponse, body) {\n\n  console.log(body)\n});\n"
          },
          {
            "lang": "Python",
            "source": "import requests\n\nurl = 'https://app.nanonets.com/api/v2/MultiLabelClassification/Model/{{model_id}}/Train/'\nresponse = requests.request('POST', url, auth=requests.auth.HTTPBasicAuth('REPLACE_API_KEY', ''))\n\nprint(response.text)\n"
          },
          {
            "lang": "Shell",
            "source": "curl --request POST \\\n    --url 'https://app.nanonets.com/api/v2/MultiLabelClassification/REPLACE_MODEL_ID/Train/' \\\n    -u 'REPLACE_API_KEY'\n"
          },
          {
            "lang": "Golang",
            "source": "package main\n\nimport (\n    \"fmt\"\n    \"net/http\"\n    \"io/ioutil\"\n)\n\nfunc main() {\n\n    url := \"https://app.nanonets.com/api/v2/MultiLabelClassification/Model/{{model_id}}/Train/\"\n\n    req, _ := http.NewRequest(\"POST\", url, nil)\n\n    req.SetBasicAuth(\"REPLACE_API_KEY\", \"\")\n\n    res, _ := http.DefaultClient.Do(req)\n\n    defer res.Body.Close()\n    body, _ := ioutil.ReadAll(res.Body)\n\n    fmt.Println(res)\n    fmt.Println(string(body))\n\n}"
          },
          {
            "lang": "JavaScript",
            "source": "var data = null;\n\nvar xhr = new XMLHttpRequest();\n\nxhr.addEventListener(\"readystatechange\", function () {\nif (this.readyState === this.DONE) {\n    console.log(this.responseText);\n}\n});\n\nxhr.open(\"POST\", \"https://app.nanonets.com/api/v2/MultiLabelClassification/REPLACE_MODEL_ID/Train/\");\nxhr.setRequestHeader(\"authorization\", \"Basic \" + btoa(\"REPLACE_API_KEY:\"));\n\nxhr.send(data);\n"
          },
          {
            "lang": "Ruby",
            "source": "require 'uri' require 'net/http'\nurl = URI('https://app.nanonets.com/api/v2/MultiLabelClassification/Model/{{model_id}}/Train/')\nhttp = Net::HTTP.new(url.host, url.port) http.use_ssl = true\nrequest = Net::HTTP::Post.new(url) request.basic_auth 'REPLACE_API_KEY', ''\nresponse = http.request(request) puts response.read_body"
          },
          {
            "lang": "C#",
            "source": "var client = new RestClient(\"https://app.nanonets.com/api/v2/MultiLabelClassification/Model/{{model_id}}/Train/\");\nvar request = new RestRequest(Method.POST);\nrequest.AddHeader(\"authorization\", \"Basic REPLACE_API_KEY\");\nIRestResponse response = client.Execute(request);"
          },
          {
            "lang": "Java",
            "source": "OkHttpClient client = new OkHttpClient();\n\nRequest request = new Request.Builder()\n  .url(\"https://app.nanonets.com/api/v2/MultiLabelClassification/Model/{{model_id}}/Train/\")\n  .post(null)\n  .addHeader(\"Authorization\", Credentials.basic(\"REPLACE_API_KEY\", \"\"))\n  .build();\n\nResponse response = client.newCall(request).execute();"
          }
        ],
        "x-operation-settings": {
          "AllowDynamicFormParameters": false,
          "AllowDynamicQueryParameters": false,
          "CollectParameters": false,
          "IsMultiContentStreaming": false
        },
        "x-unitTests": []
      }
    },
    "/MultiLabelClassification/Model/{model_id}/UploadFiles/": {
      "post": {
        "consumes": [
          "multipart/form-data"
        ],
        "description": "You can use this endpoint to upload multiple training images using locally stored files and optionally send the corresponding annotations for the images. You will receive the upload status of each file in the response.",
        "operationId": "MultiLabelClassificationUploadFilesPost",
        "parameters": [
          {
            "description": "",
            "in": "path",
            "name": "model_id",
            "required": true,
            "type": "string"
          },
          {
            "description": "stringified array of objects, each object has the keys filename(string) & categories(array of categories corresponding to the image file)",
            "in": "formData",
            "name": "data",
            "required": true,
            "type": "string"
          },
          {
            "description": "",
            "in": "formData",
            "name": "files",
            "required": true,
            "type": "file"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "201": {
            "description": "Upload Status of each file in the order they were sent",
            "examples": {
              "application/json": [
                {
                  "file_upload_statuses": [
                    {
                      "dataId": "00000000-0000-0000-0000-000000000000",
                      "message": "Uploaded",
                      "status": "success"
                    }
                  ]
                }
              ]
            }
          },
          "206": {
            "description": "Upload Status of each file in the order they were sent",
            "examples": {
              "application/json": [
                {
                  "file_upload_statuses": [
                    {
                      "message": "Error opening file|File type not supported|Error while checking if image already exists|File already exists|Error while saving annotation|Error while uploading file|",
                      "status": "error"
                    },
                    {
                      "dataId": "00000000-0000-0000-0000-000000000000",
                      "message": "Uploaded",
                      "status": "success"
                    }
                  ]
                }
              ]
            }
          },
          "400": {
            "description": "Category not valid for model. Check if this model has the category used in the request\n\nOR\n\nFile missing. Check if you have included the file in the request\n\nOR\n\nIncorrect image. Check if file you included is valid PNG or JPEG file"
          },
          "404": {
            "description": "Model does not exists. Check if the model id exists"
          }
        },
        "security": [
          {
            "ApiKey": []
          }
        ],
        "summary": "Upload training images by File",
        "tags": [
          "Multi Label Classification Upload"
        ],
        "x-code-samples": [
          {
            "lang": "Nodejs",
            "source": "var request = require('request')\nvar fs = require('fs')\nconst form_data = {'files' : fs.createReadStream('REPLACE_IMAGE_PATH'), 'data' : JSON.stringify([\n  {\"filename\":\"REPLACE_IMAGE_NAME\", \"categories\":['category1', 'category2']}])}\n\nconst options = {\n    url : 'https://app.nanonets.com/api/v2/MultiLabelClassification/Model/' + 'REPLACE_MODEL_ID' + '/UploadFiles/',\n    formData: form_data,\n    headers: {\n        'Authorization' : 'Basic ' + Buffer.from('REPLACE_API_KEY' + ':').toString('base64')\n    }\n}\nrequest.post(options, function(err, httpResponse, body) {\n\n  console.log(body)\n});\n"
          },
          {
            "lang": "Python",
            "source": "import requests\nimport json\n\nurl = 'https://app.nanonets.com/api/v2/MultiLabelClassification/Model/' + REPLACE_MODEL_ID + '/UploadFiles/'\nlabels = [\"category1\", \"category2\"] # labels corresponding to the image\nfiles = open(REPLACE_IMAGE_PATH, 'rb') # path to the image in local file system\ndata = {'files' : files,\n        'data' :('', '[{\\\"filename\\\": \\\"%s\\\", \\\"categories\\\": %s}]'%(\"REPLACE_IMAGE_NAME.jpg\", json.dumps(labels)))\n    }\nresponse = requests.post(url, auth= requests.auth.HTTPBasicAuth('REPLACE_API_KEY', ''), files=data)\nprint(response.text)"
          },
          {
            "lang": "Golang",
            "source": "package main\n\n\nimport (\n    \"bytes\"\n    \"fmt\"\n    \"io\"\n    \"io/ioutil\"\n    \"mime/multipart\"\n    \"net/http\"\n    \"os\"\n    \"path/filepath\"\n    \"encoding/json\"\n)\n\n\nfunc main() {\n    url := \"https://app.nanonets.com/api/v2/MultiLabelClassification/Model/\"\n    + REPLACE_MODEL_ID + \"/UploadFiles/\"\n    file, err := os.Open(\"REPLACE_IMAGE_PATH.jpg\")\n    if err != nil {\n        fmt.Println(err)\n        return\n    }\n    defer file.Close()\n\n\n    body := &bytes.Buffer{}\n    writer := multipart.NewWriter(body)\n    part, err := writer.CreateFormFile(\"files\", filepath.Base(\"REPLACE_IMAGE_PATH.jpg\"))\n    if err != nil {\n        fmt.Println(err)\n        return\n    }\n\n    _, err = io.Copy(part, file)\n    if err != nil {\n        fmt.Println(err)\n        return\n    }\n\n\n    d := []map[string]interface{}{\n        map[string]interface{}{\n            \"filename\":   \"REPLACE_IMAGE_NAME.jpg\",\n            \"categories\": []string{\"category1\", \"category2\"},\n        },\n    }\n    data, _ := json.Marshal(d)\n    writer.WriteField(\"categories\", string(data))\n    contentType := writer.FormDataContentType()\n    err = writer.Close()\n    if err != nil {\n        fmt.Println(err)\n        return\n    }\n    req, _ := http.NewRequest(\"POST\", url, body)\n    req.Header.Add(\"Content-Type\", contentType)\n    req.SetBasicAuth(\"REPLACE_API_KEY\", \"\")\n\n\n    res, _ := http.DefaultClient.Do(req)\n    defer res.Body.Close()\n    output, _ := ioutil.ReadAll(res.Body)\n    fmt.Println(res)\n    fmt.Println(string(output))\n}\n"
          },
          {
            "lang": "JavaScript",
            "source": "var data = new FormData();\ncategories = [{\"filename\": \"REPLACE_IMAGE_NAME.jpg\", \"categories\": [\"category1\"]}];\ndata.append(\"categories\", JSON.stringify(categories))\ndata.append('files', file); // file is a Blob object\n\nvar xhr = new XMLHttpRequest();\n\nxhr.addEventListener(\"readystatechange\", function () {\nif (this.readyState === this.DONE) {\n    console.log(this.responseText);\n}\n});\n\nxhr.open(\"POST\", \"https://app.nanonets.com/api/v2/MultiLabelClassification/Model/\" + REPLACE_MODEL_ID + +/UploadFiles/\");\nxhr.setRequestHeader(\"authorization\", \"Basic \" + btoa(\"REPLACE_API_KEY:\"));\n\nxhr.send(data);\n"
          }
        ],
        "x-operation-settings": {
          "AllowDynamicFormParameters": false,
          "AllowDynamicQueryParameters": false,
          "CollectParameters": false,
          "IsMultiContentStreaming": false
        },
        "x-unitTests": []
      }
    },
    "/MultiLabelClassification/Model/{model_id}/UploadUrls/": {
      "post": {
        "consumes": [
          "multipart/form-data"
        ],
        "description": "You can use this endpoint to upload multiple training images using urls and optionally send the corresponding annotations for the images. You will receive the upload status of each url in the response.",
        "operationId": "MultiLabelClassificationUploadUrlsPost",
        "parameters": [
          {
            "description": "",
            "in": "path",
            "name": "model_id",
            "required": true,
            "type": "string"
          },
          {
            "description": "stringified array of objects, each object has the keys filename(url) & categories(array of categories corresponding to the image file)",
            "in": "formData",
            "name": "data",
            "required": true,
            "type": "string"
          },
          {
            "description": "stringified array of urls",
            "in": "formData",
            "name": "urls",
            "required": true,
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "201": {
            "description": "Upload Status of each file in the order they were sent",
            "examples": {
              "application/json": [
                {
                  "url_upload_statuses": [
                    {
                      "dataId": "00000000-0000-0000-0000-000000000000",
                      "message": "Uploaded",
                      "status": "success"
                    }
                  ]
                }
              ]
            }
          },
          "206": {
            "description": "Upload Status of each file in the order they were sent",
            "examples": {
              "application/json": [
                {
                  "url_upload_statuses": [
                    {
                      "message": "Error opening file|File type not supported|Error while checking if image already exists|File already exists|Error while saving annotation|Error while uploading file|",
                      "status": "error"
                    },
                    {
                      "dataId": "00000000-0000-0000-0000-000000000000",
                      "message": "Uploaded",
                      "status": "success"
                    }
                  ]
                }
              ]
            }
          },
          "400": {
            "description": "Category not valid for model. Check if this model has the category used in the request\n\nOR\n\nFile missing. Check if you have included the file in the request\n\nOR\n\nIncorrect image. Check if file you included is valid PNG or JPEG file"
          },
          "404": {
            "description": "Model does not exists. Check if the model id exists"
          }
        },
        "security": [
          {
            "ApiKey": []
          }
        ],
        "summary": "Upload training images by Urls",
        "tags": [
          "Multi Label Classification Upload"
        ],
        "x-code-samples": [
          {
            "lang": "Nodejs",
            "source": "var request = require('request')\nconst form_data = {\"data\": JSON.stringify([{\"filename\":\"REPLACE_IMAGE_URL\", \"categories\": ['category1','category2']}]), \"urls\": JSON.stringify([\"REPLACE_IMAGE_URL\"])}\nconst options = {\n    url : 'https://app.nanonets.com/api/v2/MultiLabelClassification/Model/' + 'REPLACE_MODEL_ID' + '/UploadUrls/',\n    formData: form_data,\n    headers: {\n        'Authorization' : 'Basic ' + Buffer.from('REPLACE_API_KEY' + ':').toString('base64')\n    }\n}\nrequest.post(options, function(err, httpResponse, body) {\n\n  console.log(body)\n});\n"
          },
          {
            "lang": "Python",
            "source": "import requests\nimport json\n\nurl = 'https://app.nanonets.com/api/v2/MultiLabelClassification/Model/' + REPLACE_MODEL_ID + '/UploadUrls/'\nlabels = [\"category1\", \"category2\"] # labels corresponding to the image\nurls = [\"REPLACE_IMAGE_URL\"] # image urls\ndata = {'urls' : ('', json.dumps(urls)),\n        'data' :('', '[{\\\"filename\\\": \\\"%s\\\", \\\"categories\\\": %s}]'%(\"REPLACE_IMAGE_URL\", json.dumps(labels)))\n    }\nresponse = requests.post(url, auth= requests.auth.HTTPBasicAuth('REPLACE_API_KEY', ''), files=data)\nprint(response.text)"
          },
          {
            "lang": "Golang",
            "source": "package main\n\n\nimport (\n    \"bytes\"\n    \"fmt\"\n    \"io\"\n    \"io/ioutil\"\n    \"mime/multipart\"\n    \"net/http\"\n    \"os\"\n    \"path/filepath\"\n    \"encoding/json\"\n)\n\n\nfunc main() {\n    url := \"https://app.nanonets.com/api/v2/MultiLabelClassification/Model/\"\n    + REPLACE_MODEL_ID + \"/UploadUrls/\"\n    file, err := os.Open(\"REPLACE_IMAGE_PATH.jpg\")\n    if err != nil {\n        fmt.Println(err)\n        return\n    }\n    defer file.Close()\n\n\n    body := &bytes.Buffer{}\n    writer := multipart.NewWriter(body)\n\n    urls := []string{\"REPLACE_IMAGE_URL\"}\n    d := []map[string]interface{}{\n        map[string]interface{}{\n            \"filename\":   \"REPLACE_IMAGE_URL\",\n            \"categories\": []string{\"category1\", \"category2\"},\n        },\n    }\n    urlData, _ := json.Marshal(urls)\n    data, _ := json.Marshal(d)\n    writer.WriteField(\"categories\", string(data))\n    writer.WriteField(\"urls\", string(urlData))\n    contentType := writer.FormDataContentType()\n    err = writer.Close()\n    if err != nil {\n        fmt.Println(err)\n        return\n    }\n    req, _ := http.NewRequest(\"POST\", url, body)\n    req.Header.Add(\"Content-Type\", contentType)\n    req.SetBasicAuth(\"REPLACE_API_KEY\", \"\")\n\n\n    res, _ := http.DefaultClient.Do(req)\n    defer res.Body.Close()\n    output, _ := ioutil.ReadAll(res.Body)\n    fmt.Println(res)\n    fmt.Println(string(output))\n}\n"
          },
          {
            "lang": "JavaScript",
            "source": "var data = new FormData();\ncategories = [{\"filename\": \"REPLACE_IMAGE_URL\", \"categories\": [\"category1\"]}];\nurls = [\"REPLACE_IMAGE_URL\"]\ndata.append(\"categories\", JSON.stringify(categories))\ndata.append(\"urls\", JSON.stringify(urls))\n\nvar xhr = new XMLHttpRequest();\n\nxhr.addEventListener(\"readystatechange\", function () {\nif (this.readyState === this.DONE) {\n    console.log(this.responseText);\n}\n});\n\nxhr.open(\"POST\", \"https://app.nanonets.com/api/v2/MultiLabelClassification/Model/\" + REPLACE_MODEL_ID + +/UploadUrls/\");\nxhr.setRequestHeader(\"authorization\", \"Basic \" + btoa(\"REPLACE_API_KEY:\"));\n\nxhr.send(data);\n"
          }
        ],
        "x-operation-settings": {
          "AllowDynamicFormParameters": false,
          "AllowDynamicQueryParameters": false,
          "CollectParameters": false,
          "IsMultiContentStreaming": false
        },
        "x-unitTests": []
      }
    },
    "/OCR/Model/": {
      "post": {
        "description": "You can create a new model using this endpoint. A successful API call will return the json structure of the newly created model. You can then use the model's id to upload images for each category and then retrain the model.",
        "operationId": "OCRModelPost",
        "parameters": [
          {
            "description": "",
            "in": "body",
            "name": "Body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/CreateNewModelrequest"
            }
          },
          {
            "description": "",
            "in": "header",
            "name": "Content-Type",
            "required": true,
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "Model Object",
            "examples": {
              "application/json": {
                "categories": [
                  {
                    "count": 0,
                    "name": "category1"
                  },
                  {
                    "count": 0,
                    "name": "category2"
                  }
                ],
                "model_id": "00000000-0000-0000-0000-000000000000",
                "model_type": "ocr",
                "state": 0
              }
            }
          },
          "400": {
            "description": "Zero or One category in request. Add two or more categories in parameters"
          }
        },
        "security": [
          {
            "ApiKey": []
          }
        ],
        "summary": "Create New Model",
        "tags": [
          "OCR Model"
        ],
        "x-code-samples": [
          {
            "lang": "Nodejs",
            "source": "var request = require('request')\nconst form_data = {'categories' : ['category1', 'category2'], 'model_type': 'ocr'}\nconst options = {\n    url : 'https://app.nanonets.com/api/v2/OCR/Model/',\n    body: JSON.stringify(form_data),\n    headers: {\n        'Authorization' : 'Basic ' + Buffer.from('REPLACE_API_KEY' + ':').toString('base64'),\n        'Content-Type': \"application/json\",\n    }\n}\nrequest.post(options, function(err, httpResponse, body) {\n\n  console.log(body)\n});\n"
          },
          {
            "lang": "Python",
            "source": "import requests\n\nurl = \"https://app.nanonets.com/api/v2/OCR/Model/\"\n\npayload = \"{\\\"categories\\\" : [\\\"category1\\\", \\\"category2\\\"], \\\"model_type\\\": \\\"ocr\\\"}\"\nheaders = {\n    'Content-Type': \"application/json\",\n}\n\nresponse = requests.request(\"POST\", url, headers=headers, auth=requests.auth.HTTPBasicAuth('REPLACE_API_KEY', ''), data=payload)\n\nprint(response.text)\n"
          },
          {
            "lang": "Shell",
            "source": "curl -X POST https://app.nanonets.com/api/v2/OCR/Model/ \\\n    -H 'Content-Type: application/json' \\\n    -u 'REPLACE_API_KEY' \\\n    -d '{\"categories\" : [\"category1\", \"category2\"], \"model_type\": \"ocr\"}'"
          },
          {
            "lang": "Golang",
            "source": "package main\n\nimport (\n    \"fmt\"\n    \"io/ioutil\"\n    \"net/http\"\n    \"strings\"\n)\n\nfunc main() {\n\n    url := \"https://app.nanonets.com/api/v2/OCR/Model/\"\n\n    payload := strings.NewReader(\"{\\\"categories\\\" : [\\\"category1\\\", \\\"category2\\\"], \\\"model_type\\\": \\\"ocr\\\"}\")\n\n    req, _ := http.NewRequest(\"POST\", url, payload)\n\n    req.Header.Add(\"Content-Type\", \"application/json\")\n    req.SetBasicAuth(\"REPLACE_API_KEY\", \"\")\n\n    res, _ := http.DefaultClient.Do(req)\n\n    defer res.Body.Close()\n    body, _ := ioutil.ReadAll(res.Body)\n\n    fmt.Println(res)\n    fmt.Println(string(body))\n\n}"
          },
          {
            "lang": "JavaScript",
            "source": "var data = JSON.stringify({\n  \"categories\": [\n    \"category1\",\n    \"category2\"\n  ], \n  \"model_type\": \"ocr\"\n});\n\nvar xhr = new XMLHttpRequest();\nxhr.withCredentials = true;\n\nxhr.addEventListener(\"readystatechange\", function () {\n  if (this.readyState === 4) {\n    console.log(this.responseText);\n  }\n});\n\nxhr.open(\"POST\", \"https://app.nanonets.com/api/v2/OCR/Model/\");\nxhr.setRequestHeader(\"Content-Type\", \"application/json\");\nxhr.setRequestHeader(\"authorization\", \"Basic \" + btoa(\"REPLACE_API_KEY:\"));\n\nxhr.send(data);"
          },
          {
            "lang": "Ruby",
            "source": "require 'uri'\nrequire 'net/http'\n\nurl = URI(\"https://app.nanonets.com/api/v2/OCR/Model/\")\n\nhttp = Net::HTTP.new(url.host, url.port)\nhttp.use_ssl = true\n\nrequest = Net::HTTP::Post.new(url)\nrequest[\"Content-Type\"] = 'application/json'\nrequest.basic_auth 'REPLACE_API_KEY', ''\nrequest.body = \"{\\\"categories\\\" :[\\\"category1\\\", \\\"category2\\\"], \\\"model_type\\\": \\\"ocr\\\"}\"\n\nresponse = http.request(request)\nputs response.read_body\n"
          },
          {
            "lang": "C#",
            "source": "var client = new RestClient(\"https://app.nanonets.com/api/v2/OCR/Model/\");\nvar request = new RestRequest(Method.POST);\nrequest.AddHeader(\"authorization\", \"Basic REPLACE_API_KEY\");\nrequest.AddHeader(\"Content-Type\", \"application/json\");\nrequest.AddParameter(\"undefined\", \"{\"categories\" :[\"category1\", \"category2\"], \"model_type\": \"ocr\"}\", ParameterType.RequestBody);\nIRestResponse response = client.Execute(request);"
          },
          {
            "lang": "Java",
            "source": "OkHttpClient client = new OkHttpClient();\n\nMediaType mediaType = MediaType.parse(\"application/json\");\nRequestBody body = RequestBody.create(mediaType, \"{\"categories\" : [\"category1\", \"category2\"], \"model_type\": \"ocr\"}\");\nRequest request = new Request.Builder()\n  .url(\"https://app.nanonets.com/api/v2/OCR/Model/\")\n  .post(body)\n  .addHeader(\"Content-Type\", \"application/json\")\n  .addHeader(\"Authorization\", Credentials.basic(\"REPLACE_API_KEY\", \"\"))\n  .build();\n\nResponse response = client.newCall(request).execute();"
          }
        ],
        "x-operation-settings": {
          "AllowDynamicFormParameters": false,
          "AllowDynamicQueryParameters": false,
          "CollectParameters": false,
          "IsMultiContentStreaming": false
        },
        "x-unitTests": [
          {
            "expectedResponse": {
              "headers": {},
              "x-allowExtraHeaders": true,
              "x-arrayCheckCount": false,
              "x-arrayOrderedMatching": false,
              "x-bodyMatchMode": "NONE",
              "x-matchResponseSchema": true
            },
            "request": {
              "body": "{\"categories\" : [\"{{category1}}\", \"{{category2}}\"], \"model_type\": \"ocr\"}",
              "headers": {
                "Content-Type": "application/json"
              },
              "method": "POST",
              "uri": "/OCR/Model/"
            },
            "x-testDescription": "",
            "x-testEnabled": true,
            "x-testName": "Create New Model1",
            "x-testShouldPass": true
          }
        ]
      }
    },
    "/OCR/Model/{model_id}": {
      "get": {
        "description": "This endpoint retrieves a specific model's details given it's id.",
        "operationId": "OCRModelGetAllPredictionFiles",
        "parameters": [
          {
            "description": "",
            "in": "path",
            "name": "model_id",
            "required": true,
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "Model Object",
            "examples": {
              "application/json": {
                "categories": [
                  {
                    "count": 0,
                    "name": "category1"
                  },
                  {
                    "count": 0,
                    "name": "category2"
                  }
                ],
                "model_id": "00000000-0000-0000-0000-000000000000",
                "model_type": "ocr",
                "state": 0
              }
            }
          },
          "404": {
            "description": "Model does not exists. Check if you have entered correct model id with valid API key"
          }
        },
        "security": [
          {
            "ApiKey": []
          }
        ],
        "summary": "Get Model by Id",
        "tags": [
          "OCR Model"
        ],
        "x-code-samples": [
          {
            "lang": "Nodejs",
            "source": "var request = require('request')\nconst options = {\n    url : 'https://app.nanonets.com/api/v2/OCR/Model/' + 'REPLACE_MODEL_ID',\n    headers: {\n        'Authorization' : 'Basic ' + Buffer.from('REPLACE_API_KEY' + ':').toString('base64')\n    }\n}\nrequest.get(options, function(err, httpResponse, body) {\n\n  console.log(body)\n});\n"
          },
          {
            "lang": "Python",
            "source": "import requests\n\nurl = 'https://app.nanonets.com/api/v2/OCR/Model/' + {{model_id}}\n\nresponse = requests.request('GET', url, auth=requests.auth.HTTPBasicAuth('REPLACE_API_KEY',''))\n\nprint(response.text)"
          },
          {
            "lang": "Shell",
            "source": "curl --request GET \\\n  --url 'https://app.nanonets.com/api/v2/OCR/Model/{{model_id}}' \\\n  -u 'REPLACE_API_KEY'"
          },
          {
            "lang": "Golang",
            "source": "package main\n\nimport (\n    \"fmt\"\n    \"net/http\"\n    \"io/ioutil\"\n)\n\nfunc main() {\n\n    url := \"https://app.nanonets.com/api/v2/OCR/Model/\" + {{model_id}}\n\n    req, _ := http.NewRequest(\"GET\", url, nil)\n\n    req.SetBasicAuth(\"REPLACE_API_KEY\", \"\")\n\n    res, _ := http.DefaultClient.Do(req)\n\n    defer res.Body.Close()\n    body, _ := ioutil.ReadAll(res.Body)\n\n    fmt.Println(res)\n    fmt.Println(string(body))\n\n}"
          },
          {
            "lang": "JavaScript",
            "source": "var data = null;\n\nvar xhr = new XMLHttpRequest();\n\nxhr.addEventListener(\"readystatechange\", function () {\n  if (this.readyState === this.DONE) {\n    console.log(this.responseText);\n  }\n});\n\nxhr.open(\"GET\", \"https://app.nanonets.com/api/v2/OCR/Model/\" + {{model_id}});\nxhr.setRequestHeader(\"authorization\", \"Basic \" + btoa(\"REPLACE_API_KEY:\"));\n\nxhr.send(data);"
          },
          {
            "lang": "Ruby",
            "source": "require 'uri' require 'net/http'\nurl = URI('https://app.nanonets.com/api/v2/OCR/Model/' + {{model_id}})\nhttp = Net::HTTP.new(url.host, url.port) http.use_ssl = true\nrequest = Net::HTTP::Get.new(url) request.basic_auth 'REPLACE_API_KEY', '' response = http.request(request)\nputs response.read_body"
          },
          {
            "lang": "C#",
            "source": "var client = new RestClient(\"https://app.nanonets.com/api/v2/OCR/Model/\" + {{model_id}});\nvar request = new RestRequest(Method.GET);\nrequest.AddHeader(\"authorization\", \"Basic \" + Convert.ToBase64String(Encoding.Default.GetBytes(\"REPLACE_API_KEY:\")));\nIRestResponse response = client.Execute(request);"
          },
          {
            "lang": "Java",
            "source": "OkHttpClient client = new OkHttpClient();\n\nRequest request = new Request.Builder()\n  .url(\"https://app.nanonets.com/api/v2/OCR/Model/\" + {{model_id}})\n  .get()\n  .addHeader(\"authorization\", Credentials.basic(\"REPLACE_API_KEY\", \"\"))\n  .build();\n\nResponse response = client.newCall(request).execute();"
          }
        ],
        "x-operation-settings": {
          "AllowDynamicFormParameters": false,
          "AllowDynamicQueryParameters": false,
          "CollectParameters": false,
          "IsMultiContentStreaming": false
        },
        "x-unitTests": []
      }
    },
    "/OCR/Model/{model_id}/LabelFile/": {
      "post": {
        "consumes": [
          "multipart/form-data"
        ],
        "description": "Use the model to predict which one of the categories an image (given an image file) belongs to.",
        "operationId": "OCRModelLabelFileByModelIdPost",
        "parameters": [
          {
            "description": "",
            "in": "formData",
            "name": "file",
            "required": true,
            "type": "file"
          },
          {
            "description": "",
            "in": "path",
            "name": "model_id",
            "required": true,
            "type": "string"
          },
          {
            "description": "language hints eg: en, vi (not specifying generally gives best results)",
            "in": "path",
            "name": "l",
            "required": false,
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "Model Object",
            "examples": {
              "application/json": {
                "message": "Success",
                "result": [
                  {
                    "input": "string",
                    "message": "Success",
                    "prediction": [
                      {
                        "label": "category1",
                        "ocr_text": "string",
                        "score": 0.9,
                        "xmax": 100,
                        "xmin": 0,
                        "ymax": 100,
                        "ymin": 0
                      },
                      {
                        "cells": [
                          {
                            "col": 1,
                            "col_span": 1,
                            "label": "col 1",
                            "row": 1,
                            "row_span": 1,
                            "score": 99.99,
                            "text": "ocr text 1",
                            "xmax": 258,
                            "xmin": 159,
                            "ymax": 1357,
                            "ymin": 1258
                          },
                          {
                            "col": 2,
                            "col_span": 1,
                            "label": "col 2",
                            "row": 1,
                            "row_span": 1,
                            "score": 99.99,
                            "text": "ocr text 2",
                            "xmax": 380,
                            "xmin": 258,
                            "ymax": 1357,
                            "ymin": 1258
                          },
                          {
                            "col": 1,
                            "col_span": 1,
                            "label": "col 1",
                            "row": 2,
                            "row_span": 1,
                            "score": 99.99,
                            "text": "ocr text 3",
                            "xmax": 258,
                            "xmin": 159,
                            "ymax": 1439,
                            "ymin": 1357
                          },
                          {
                            "col": 2,
                            "col_span": 1,
                            "label": "col 2",
                            "row": 2,
                            "row_span": 1,
                            "score": 99.99902,
                            "text": "ocr text 4",
                            "xmax": 380,
                            "xmin": 258,
                            "ymax": 1439,
                            "ymin": 1357
                          }
                        ],
                        "label": "",
                        "ocr_text": "table 1",
                        "score": 99.99,
                        "type": "table",
                        "xmax": 380,
                        "xmin": 159,
                        "ymax": 1439,
                        "ymin": 1258
                      }
                    ]
                  }
                ]
              }
            }
          },
          "400": {
            "description": "File missing. Check if you have included a file in the request\n\nOR\n\nIncorrect image. Check if file you included is a valid PNG or JPEG"
          },
          "402": {
            "description": "Exhausted Free API Calls. You have exhausted your free API calls please change your plan <a href=\"https://app.nanonets.com/user/apps\">here</a>"
          },
          "404": {
            "description": "Model does not exists. Check if the model id exists"
          }
        },
        "security": [
          {
            "ApiKey": []
          }
        ],
        "summary": "Prediction for image file",
        "tags": [
          "OCR Predict"
        ],
        "x-code-samples": [
          {
            "lang": "Nodejs",
            "source": "var request = require('request')\nvar fs = require('fs')\nconst form_data = {'modelId' : 'REPLACE_MODEL_ID', 'file' : fs.createReadStream('REPLACE_IMAGE_PATH.jpg')}\nconst options = {\n    url : 'https://app.nanonets.com/api/v2/OCR/Model/REPLACE_MODEL_ID/LabelFile/',\n    formData: form_data,\n    headers: {\n        'Authorization' : 'Basic ' + Buffer.from('REPLACE_API_KEY' + ':').toString('base64')\n    }\n}\nrequest.post(options, function(err, httpResponse, body) {\n\n  console.log(body)\n});\n"
          },
          {
            "lang": "Python",
            "source": "import requests\n\nurl = 'https://app.nanonets.com/api/v2/OCR/Model/REPLACE_MODEL_ID/LabelFile/'\n\ndata = {'file': open('REPLACE_IMAGE_PATH.jpg', 'rb')}\n\nresponse = requests.post(url, auth=requests.auth.HTTPBasicAuth('REPLACE_API_KEY', ''), files=data)\n\nprint(response.text)\n"
          },
          {
            "lang": "Shell",
            "source": "curl --request POST \\\n    --url 'https://app.nanonets.com/api/v2/OCR/Model/{{model_id}}/LabelFile/' \\\n    --header 'accept: multipart/form-data' \\\n    -u 'REPLACE_API_KEY' \\\n    -F 'file=@REPLACE_IMAGE_PATH.jpg'\n"
          },
          {
            "lang": "Golang",
            "source": "package main\n\nimport (\n    \"bytes\"\n    \"fmt\"\n    \"io\"\n    \"io/ioutil\"\n    \"mime/multipart\"\n    \"net/http\"\n    \"os\"\n    \"path/filepath\"\n)\n\nfunc main() {\n\n    url := \"https://app.nanonets.com/api/v2/OCR/Model/{{model_id}}/LabelFile/\"\n\n    file, err := os.Open(\"REPLACE_IMAGE_PATH.jpg\")\n    if err != nil {\n        fmt.Println(err)\n        return\n    }\n\n    defer file.Close()\n\n    body := &bytes.Buffer{}\n    writer := multipart.NewWriter(body)\n\n    part, err := writer.CreateFormFile(\"file\", filepath.Base(\"REPLACE_IMAGE_PATH.jpg\"))\n    if err != nil {\n        fmt.Println(err)\n        return\n    }\n    _, err = io.Copy(part, file)\n\n    contentType := writer.FormDataContentType()\n\n    err = writer.Close()\n    if err != nil {\n        fmt.Println(err)\n        return\n    }\n\n    req, _ := http.NewRequest(\"POST\", url, body)\n\n    req.Header.Add(\"Content-Type\", contentType)\n    req.SetBasicAuth(\"REPLACE_API_KEY\", \"\")\n\n    res, _ := http.DefaultClient.Do(req)\n\n    defer res.Body.Close()\n    respBody, _ := ioutil.ReadAll(res.Body)\n\n    fmt.Println(res)\n    fmt.Println(string(respBody))\n\n}\n"
          },
          {
            "lang": "JavaScript",
            "source": "var data = new FormData();\ndata.append('file', fileBLob); // This is file object\n\n\nvar xhr = new XMLHttpRequest();\n\nxhr.addEventListener(\"readystatechange\", function () {\n    if (this.readyState === this.DONE) {\n        console.log(this.responseText);\n    }\n});\n\nxhr.open(\"POST\", \"https://app.nanonets.com/api/v2/OCR/Model/{{model_id}}/LabelFile/\");\nxhr.setRequestHeader(\"authorization\", \"Basic \" + btoa(\"REPLACE_API_KEY:\"));\n\nxhr.send(data);\n"
          },
          {
            "lang": "Ruby",
            "source": "require 'uri'\nrequire 'net/http'\nrequire 'net/http/post/multipart'\n\nurl = URI('https://app.nanonets.com/api/v2/OCR/Model/{{model_id}}/LabelFile/')\n\nhttp = Net::HTTP.new(url.host, url.port)\nhttp.use_ssl = true\n\nFile.open('test.jpg') do |jpg|\nrequest = Net::HTTP::Post::Multipart.new(url.path,\n    'file' => UploadIO.new(jpg, 'image/jpeg', 'test.jpg'))\nrequest.basic_auth 'REPLACE_API_KEY', ''\nresponse = Net::HTTP.start(url.host, url.port) do |http|\n    http.request(request)\nend\nputs response.read_body\nend\n"
          },
          {
            "lang": "C#",
            "source": "var client = new RestClient(\"https://app.nanonets.com/api/v2/OCR/Model/{{model_id}}/LabelFile/\");\nvar request = new RestRequest(Method.POST);\nrequest.AddHeader(\"authorization\", \"Basic \" + Convert.ToBase64String(Encoding.Default.GetBytes(\"REPLACE_API_KEY:\")));\nrequest.AddHeader(\"accept\", \"Multipart/form-data\");\nrequest.AddFile(\"file\", \"REPLACE_IMAGE_PATH.jpg\");\nIRestResponse response = client.Execute(request);\n"
          },
          {
            "lang": "Java",
            "source": "OkHttpClient client = new OkHttpClient();\nprivate static final MediaType MEDIA_TYPE_JPG = MediaType.parse(\"image/jpeg\");\n\nOkHttpClient client = new OkHttpClient();\n\nRequestBody requestBody = new MultipartBody.Builder()\n        .setType(MultipartBody.FORM)\n        .addFormDataPart(\"file\", \"REPLACE_IMAGE_PATH.jpg\", RequestBody.create(MEDIA_TYPE_JPG, new File(\"REPLACE_IMAGE_PATH.jpg\")))\n        .build();\n\nrequest = new Request.Builder()\n        .url(\"https://app.nanonets.com/api/v2/OCR/Model/{{model_id}}/LabelFile/\")\n        .post(requestBody)\n        .addHeader(\"Authorization\", Credentials.basic(\"REPLACE_API_KEY\", \"\"))\n        .build();\n\nResponse response = client.newCall(request).execute();\n"
          }
        ],
        "x-operation-settings": {
          "AllowDynamicFormParameters": false,
          "AllowDynamicQueryParameters": false,
          "CollectParameters": false,
          "IsMultiContentStreaming": false
        },
        "x-unitTests": []
      }
    },
    "/OCR/Model/{model_id}/LabelFile/?async=true": {
      "post": {
        "consumes": [
          "multipart/form-data"
        ],
        "description": "Use the model to predict which one of the categories an image (given an image file) belongs to.",
        "operationId": "OCRModelLabelFileAsyncByModelIdPost",
        "parameters": [
          {
            "description": "",
            "in": "formData",
            "name": "file",
            "required": true,
            "type": "file"
          },
          {
            "description": "",
            "in": "path",
            "name": "model_id",
            "required": true,
            "type": "string"
          },
          {
            "description": "This parameter specifies whether you'd like to upload the file for processing and then query the results with a unique id at a later point in time",
            "in": "query",
            "name": "async",
            "required": true,
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "Model Object",
            "examples": {
              "application/json": {
                "message": "Success",
                "result": [
                  {
                    "message": "Success",
                    "result": [
                      {
                        "filepath": "uploadedfiles/00000000-0000-0000-0000-000000000000/PredictionImages/filename.jpeg",
                        "id": "00000000-0000-0000-0000-000000000000",
                        "input": "filename.jpg",
                        "message": "Success",
                        "page": 55,
                        "prediction": [],
                        "request_file_id": "00000000-0000-0000-0000-000000000000"
                      }
                    ]
                  }
                ]
              }
            }
          },
          "400": {
            "description": "File missing. Check if you have included a file in the request\n\nOR\n\nIncorrect image. Check if file you included is a valid PNG or JPEG"
          },
          "402": {
            "description": "Exhausted Free API Calls. You have exhausted your free API calls please change your plan <a href=\"https://app.nanonets.com/user/apps\">here</a>"
          },
          "404": {
            "description": "Model does not exists. Check if the model id exists"
          }
        },
        "security": [
          {
            "ApiKey": []
          }
        ],
        "summary": "Async Prediction for image file",
        "tags": [
          "OCR Predict"
        ],
        "x-code-samples": [
          {
            "lang": "Nodejs",
            "source": "var request = require('request')\nvar fs = require('fs')\nconst form_data = {'modelId' : 'REPLACE_MODEL_ID', 'file' : fs.createReadStream('REPLACE_IMAGE_PATH.jpg')}\nconst options = {\n    url : 'https://app.nanonets.com/api/v2/OCR/Model/REPLACE_MODEL_ID/LabelFile/?async=true',\n    formData: form_data,\n    headers: {\n        'Authorization' : 'Basic ' + Buffer.from('REPLACE_API_KEY' + ':').toString('base64')\n    }\n}\nrequest.post(options, function(err, httpResponse, body) {\n\n  console.log(body)\n});\n"
          },
          {
            "lang": "Python",
            "source": "import requests\n\nurl = 'https://app.nanonets.com/api/v2/OCR/Model/REPLACE_MODEL_ID/LabelFile/?async=true'\n\ndata = {'file': open('REPLACE_IMAGE_PATH.jpg', 'rb')}\n\nresponse = requests.post(url, auth=requests.auth.HTTPBasicAuth('REPLACE_API_KEY', ''), files=data)\n\nprint(response.text)\n"
          },
          {
            "lang": "Shell",
            "source": "curl --request POST \\\n    --url 'https://app.nanonets.com/api/v2/OCR/Model/{{model_id}}/LabelFile/?async=true' \\\n    --header 'accept: multipart/form-data' \\\n    -u 'REPLACE_API_KEY' \\\n    -F 'file=@REPLACE_IMAGE_PATH.jpg'\n"
          },
          {
            "lang": "Golang",
            "source": "package main\n\nimport (\n    \"bytes\"\n    \"fmt\"\n    \"io\"\n    \"io/ioutil\"\n    \"mime/multipart\"\n    \"net/http\"\n    \"os\"\n    \"path/filepath\"\n)\n\nfunc main() {\n\n    url := \"https://app.nanonets.com/api/v2/OCR/Model/{{model_id}}/LabelFile/?async=true\"\n\n    file, err := os.Open(\"REPLACE_IMAGE_PATH.jpg\")\n    if err != nil {\n        fmt.Println(err)\n        return\n    }\n\n    defer file.Close()\n\n    body := &bytes.Buffer{}\n    writer := multipart.NewWriter(body)\n\n    part, err := writer.CreateFormFile(\"file\", filepath.Base(\"REPLACE_IMAGE_PATH.jpg\"))\n    if err != nil {\n        fmt.Println(err)\n        return\n    }\n    _, err = io.Copy(part, file)\n\n    contentType := writer.FormDataContentType()\n\n    err = writer.Close()\n    if err != nil {\n        fmt.Println(err)\n        return\n    }\n\n    req, _ := http.NewRequest(\"POST\", url, body)\n\n    req.Header.Add(\"Content-Type\", contentType)\n    req.SetBasicAuth(\"REPLACE_API_KEY\", \"\")\n\n    res, _ := http.DefaultClient.Do(req)\n\n    defer res.Body.Close()\n    respBody, _ := ioutil.ReadAll(res.Body)\n\n    fmt.Println(res)\n    fmt.Println(string(respBody))\n\n}\n"
          },
          {
            "lang": "JavaScript",
            "source": "var data = new FormData();\ndata.append('file', fileBLob); // This is file object\n\n\nvar xhr = new XMLHttpRequest();\n\nxhr.addEventListener(\"readystatechange\", function () {\n    if (this.readyState === this.DONE) {\n        console.log(this.responseText);\n    }\n});\n\nxhr.open(\"POST\", \"https://app.nanonets.com/api/v2/OCR/Model/{{model_id}}/LabelFile/?async=true\");\nxhr.setRequestHeader(\"authorization\", \"Basic \" + btoa(\"REPLACE_API_KEY:\"));\n\nxhr.send(data);\n"
          },
          {
            "lang": "Ruby",
            "source": "require 'uri'\nrequire 'net/http'\nrequire 'net/http/post/multipart'\n\nurl = URI('https://app.nanonets.com/api/v2/OCR/Model/{{model_id}}/LabelFile/?async=true')\n\nhttp = Net::HTTP.new(url.host, url.port)\nhttp.use_ssl = true\n\nFile.open('test.jpg') do |jpg|\nrequest = Net::HTTP::Post::Multipart.new(url.path,\n    'file' => UploadIO.new(jpg, 'image/jpeg', 'test.jpg'))\nrequest.basic_auth 'REPLACE_API_KEY', ''\nresponse = Net::HTTP.start(url.host, url.port) do |http|\n    http.request(request)\nend\nputs response.read_body\nend\n"
          },
          {
            "lang": "C#",
            "source": "var client = new RestClient(\"https://app.nanonets.com/api/v2/OCR/Model/{{model_id}}/LabelFile/?async=true\");\nvar request = new RestRequest(Method.POST);\nrequest.AddHeader(\"authorization\", \"Basic \" + Convert.ToBase64String(Encoding.Default.GetBytes(\"REPLACE_API_KEY:\")));\nrequest.AddHeader(\"accept\", \"Multipart/form-data\");\nrequest.AddFile(\"file\", \"REPLACE_IMAGE_PATH.jpg\");\nIRestResponse response = client.Execute(request);\n"
          },
          {
            "lang": "Java",
            "source": "OkHttpClient client = new OkHttpClient();\nprivate static final MediaType MEDIA_TYPE_JPG = MediaType.parse(\"image/jpeg\");\n\nOkHttpClient client = new OkHttpClient();\n\nRequestBody requestBody = new MultipartBody.Builder()\n        .setType(MultipartBody.FORM)\n        .addFormDataPart(\"file\", \"REPLACE_IMAGE_PATH.jpg\", RequestBody.create(MEDIA_TYPE_JPG, new File(\"REPLACE_IMAGE_PATH.jpg\")))\n        .build();\n\nrequest = new Request.Builder()\n        .url(\"https://app.nanonets.com/api/v2/OCR/Model/{{model_id}}/LabelFile/?async=true\")\n        .post(requestBody)\n        .addHeader(\"Authorization\", Credentials.basic(\"REPLACE_API_KEY\", \"\"))\n        .build();\n\nResponse response = client.newCall(request).execute();\n"
          }
        ],
        "x-operation-settings": {
          "AllowDynamicFormParameters": false,
          "AllowDynamicQueryParameters": false,
          "CollectParameters": false,
          "IsMultiContentStreaming": false
        },
        "x-unitTests": []
      }
    },
    "/OCR/Model/{model_id}/LabelUrls/": {
      "post": {
        "consumes": [
          "application/x-www-form-urlencoded"
        ],
        "description": "Use the model to predict which one of the categories an image (given the image url) belongs to. You can specify multiple image urls.",
        "operationId": "OCRModelLabelUrlsByModelIdPost",
        "parameters": [
          {
            "description": "",
            "in": "formData",
            "name": "urls",
            "required": true,
            "type": "string"
          },
          {
            "description": "",
            "in": "path",
            "name": "model_id",
            "required": true,
            "type": "string"
          },
          {
            "description": "language hints eg: en, vi (not specifying generally gives best results)",
            "in": "path",
            "name": "l",
            "required": false,
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "Model Object",
            "examples": {
              "application/json": {
                "message": "Success",
                "result": [
                  {
                    "input": "string",
                    "message": "Success",
                    "prediction": [
                      {
                        "label": "category1",
                        "ocr_text": "string",
                        "score": 0.9,
                        "xmax": 100,
                        "xmin": 0,
                        "ymax": 100,
                        "ymin": 0
                      },
                      {
                        "cells": [
                          {
                            "col": 1,
                            "col_span": 1,
                            "label": "col 1",
                            "row": 1,
                            "row_span": 1,
                            "score": 99.99,
                            "text": "ocr text 1",
                            "xmax": 258,
                            "xmin": 159,
                            "ymax": 1357,
                            "ymin": 1258
                          },
                          {
                            "col": 2,
                            "col_span": 1,
                            "label": "col 2",
                            "row": 1,
                            "row_span": 1,
                            "score": 99.99,
                            "text": "ocr text 2",
                            "xmax": 380,
                            "xmin": 258,
                            "ymax": 1357,
                            "ymin": 1258
                          },
                          {
                            "col": 1,
                            "col_span": 1,
                            "label": "col 1",
                            "row": 2,
                            "row_span": 1,
                            "score": 99.99,
                            "text": "ocr text 3",
                            "xmax": 258,
                            "xmin": 159,
                            "ymax": 1439,
                            "ymin": 1357
                          },
                          {
                            "col": 2,
                            "col_span": 1,
                            "label": "col 2",
                            "row": 2,
                            "row_span": 1,
                            "score": 99.99902,
                            "text": "ocr text 4",
                            "xmax": 380,
                            "xmin": 258,
                            "ymax": 1439,
                            "ymin": 1357
                          }
                        ],
                        "label": "",
                        "ocr_text": "table 1",
                        "score": 99.99,
                        "type": "table",
                        "xmax": 380,
                        "xmin": 159,
                        "ymax": 1439,
                        "ymin": 1258
                      }
                    ]
                  }
                ]
              }
            }
          },
          "202": {
            "description": "Request partially successful. One or more urls might not be correct or got no response"
          },
          "400": {
            "description": "Urls missing. Check if you have an included array of image urls"
          },
          "402": {
            "description": "Exhausted Free API Calls  You have exhausted your free API calls please change your plan <a href=\"https://app.nanonets.com/user/apps\">here</a>"
          },
          "404": {
            "description": "Model does not exists. Check if the model id exists"
          }
        },
        "security": [
          {
            "ApiKey": []
          }
        ],
        "summary": "Prediction for image url",
        "tags": [
          "OCR Predict"
        ],
        "x-code-samples": [
          {
            "lang": "Nodejs",
            "source": "var request = require('request')\nvar querystring = require('querystring')\nconst form_data = {'urls' : ['https://nanonets.s3-us-west-2.amazonaws.com/test-images/test1.jpg']}\nconst options = {\n    url : 'https://app.nanonets.com/api/v2/OCR/Model/{{model_id}}/LabelUrls/',\n    body: querystring.stringify(form_data),\n    headers: {\n        'Authorization' : 'Basic ' + Buffer.from('REPLACE_API_KEY' + ':').toString('base64'),\n        'Content-Type': 'application/x-www-form-urlencoded'\n    }\n}\nrequest.post(options, function(err, httpResponse, body) {\n\n  console.log(body)\n});\n"
          },
          {
            "lang": "Python",
            "source": "import requests\n\nurl = 'https://app.nanonets.com/api/v2/OCR/Model/{{model_id}}/LabelUrls/'\n\nheaders = {\n    'accept': 'application/x-www-form-urlencoded'\n}\n\ndata = {'urls' : ['https://nanonets.s3-us-west-2.amazonaws.com/test-images/test1.jpg']}\n\nresponse = requests.request('POST', url, headers=headers, auth=requests.auth.HTTPBasicAuth('REPLACE_API_KEY', ''), data=data)\n\nprint(response.text)\n"
          },
          {
            "lang": "Shell",
            "source": "curl --request POST \\\n    --url 'https://app.nanonets.com/api/v2/OCR/Model/{{model_id}}/LabelUrls/' \\\n    --header 'accept: application/x-www-form-urlencoded' \\\n    -d 'urls=https://nanonets.s3-us-west-2.amazonaws.com/test-images/test1.jpg' \\\n    -u 'REPLACE_API_KEY'\n"
          },
          {
            "lang": "Golang",
            "source": "package main\n\nimport (\n    \"bytes\"\n    \"fmt\"\n    \"io/ioutil\"\n    \"net/http\"\n    \"net/url\"\n)\n\nfunc main() {\n\n    labelUrl := \"https://app.nanonets.com/api/v2/OCR/Model/{{model_id}}/LabelUrls/\"\n\n    data := url.Values{}\n    data.Add(\"urls\", \"https://nanonets.s3-us-west-2.amazonaws.com/test-images/test1.jpg\")\n\n    req, _ := http.NewRequest(\"POST\", labelUrl, bytes.NewBufferString(data.Encode()))\n\n    req.Header.Add(\"Content-Type\", \"application/x-www-form-urlencoded\")\n    req.SetBasicAuth(\"REPLACE_API_KEY\", \"\")\n\n    res, _ := http.DefaultClient.Do(req)\n\n    defer res.Body.Close()\n    body, _ := ioutil.ReadAll(res.Body)\n\n    fmt.Println(res)\n    fmt.Println(string(body))\n\n}\n"
          },
          {
            "lang": "JavaScript",
            "source": "var data = 'urls=https://nanonets.s3-us-west-2.amazonaws.com/test-images/test1.jpg';\n\nvar xhr = new XMLHttpRequest();\n\nxhr.addEventListener(\"readystatechange\", function () {\n    if (this.readyState === this.DONE) {\n        console.log(this.responseText);\n    }\n});\n\nxhr.open(\"POST\", \"https://app.nanonets.com/api/v2/OCR/Model/{{model_id}}/LabelUrls/\");\nxhr.setRequestHeader(\"Content-Type\", \"application/x-www-form-urlencoded\");\nxhr.setRequestHeader(\"authorization\", \"Basic \" + btoa(\"REPLACE_API_KEY:\"));\n\nxhr.send(data);\n"
          },
          {
            "lang": "Ruby",
            "source": "require 'uri'\nrequire 'net/http'\n\nurl = URI('https://app.nanonets.com/api/v2/OCR/Model/{{model_id}}/LabelUrls/')\n\nhttp = Net::HTTP.new(url.host, url.port)\nhttp.use_ssl = true\n\nrequest = Net::HTTP::Post.new(url)\nrequest[\"accept\"] = 'application/x-www-form-urlencoded'\nrequest.basic_auth 'REPLACE_API_KEY', ''\n\nrequest.set_form_data({'urls' => ['https://nanonets.s3-us-west-2.amazonaws.com/test-images/test1.jpg']})\n\nresponse = http.request(request)\nputs response.read_body\n"
          },
          {
            "lang": "C#",
            "source": "var client = new RestClient(\"https://app.nanonets.com/api/v2/OCR/Model/{{model_id}}/LabelUrls/\");\nvar request = new RestRequest(Method.POST);\nrequest.AddHeader(\"authorization\", \"Basic REPLACE_API_KEY\");\nrequest.AddHeader(\"accept\", \"application/x-www-form-urlencoded\");\nrequest.AddParameter(\"urls\", \"https://nanonets.s3-us-west-2.amazonaws.com/test-images/test1.jpg\");\nIRestResponse response = client.Execute(request);\n"
          },
          {
            "lang": "Java",
            "source": "OkHttpClient client = new OkHttpClient();\n\nRequestBody formBody = new FormBody.Builder()\n        .add(\"urls\", \"https://nanonets.s3-us-west-2.amazonaws.com/test-images/test1.jpg\").build();\n\nRequest request = new Request.Builder()\n    .url(\"https://app.nanonets.com/api/v2/OCR/Model/{{model_id}}/LabelUrls/\")\n    .post(formBody)\n    .addHeader(\"Authorization\", Credentials.basic(\"REPLACE_API_KEY\", \"\"))\n    .build();\n\nResponse response = client.newCall(request).execute();\n"
          }
        ],
        "x-operation-settings": {
          "AllowDynamicFormParameters": false,
          "AllowDynamicQueryParameters": false,
          "CollectParameters": false,
          "IsMultiContentStreaming": false
        },
        "x-unitTests": []
      }
    },
    "/OCR/Model/{model_id}/LabelUrls/?async=true": {
      "post": {
        "consumes": [
          "application/x-www-form-urlencoded"
        ],
        "description": "This endpoint allows you to process a file on your OCR model and get the results",
        "operationId": "OCRModelLabelUrlsAsyncByModelIdPost",
        "parameters": [
          {
            "description": "",
            "in": "formData",
            "name": "urls",
            "required": true,
            "type": "string"
          },
          {
            "description": "",
            "in": "path",
            "name": "model_id",
            "required": true,
            "type": "string"
          },
          {
            "description": "This parameter specifies whether you'd like to upload the file for processing and then query the results with a unique id at a later point in time",
            "in": "path",
            "name": "async",
            "required": true,
            "type": "boolean"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "Model Object",
            "examples": {
              "application/json": {
                "message": "Success",
                "result": [
                  {
                    "input": "string",
                    "message": "Success",
                    "result": [
                      {
                        "filepath": "uploadedfiles/00000000-0000-0000-0000-000000000000/PredictionImages/filename.jpeg",
                        "id": "00000000-0000-0000-0000-000000000000",
                        "input": "filename.jpg",
                        "message": "Success",
                        "page": 55,
                        "prediction": [],
                        "request_file_id": "00000000-0000-0000-0000-000000000000"
                      }
                    ]
                  }
                ]
              }
            }
          },
          "202": {
            "description": "Request partially successful. One or more urls might not be correct or got no response"
          },
          "400": {
            "description": "Urls missing. Check if you have an included array of image urls"
          },
          "402": {
            "description": "Exhausted Free API Calls  You have exhausted your free API calls please change your plan <a href=\"https://app.nanonets.com/user/apps\">here</a>"
          },
          "404": {
            "description": "Model does not exists. Check if the model id exists"
          }
        },
        "security": [
          {
            "ApiKey": []
          }
        ],
        "summary": "Async Prediction for image url",
        "tags": [
          "OCR Predict"
        ],
        "x-code-samples": [
          {
            "lang": "Nodejs",
            "source": "var request = require('request')\nvar querystring = require('querystring')\nconst form_data = {'urls' : ['https://nanonets.s3-us-west-2.amazonaws.com/test-images/test1.jpg']}\nconst options = {\n    url : 'https://app.nanonets.com/api/v2/OCR/Model/{{model_id}}/LabelUrls/?async=true',\n    body: querystring.stringify(form_data),\n    headers: {\n        'Authorization' : 'Basic ' + Buffer.from('REPLACE_API_KEY' + ':').toString('base64'),\n        'Content-Type': 'application/x-www-form-urlencoded'\n    }\n}\nrequest.post(options, function(err, httpResponse, body) {\n\n  console.log(body)\n});\n"
          },
          {
            "lang": "Python",
            "source": "import requests\n\nurl = 'https://app.nanonets.com/api/v2/OCR/Model/{{model_id}}/LabelUrls/?async=true'\n\nheaders = {\n    'accept': 'application/x-www-form-urlencoded'\n}\n\ndata = {'urls' : ['https://nanonets.s3-us-west-2.amazonaws.com/test-images/test1.jpg']}\n\nresponse = requests.request('POST', url, headers=headers, auth=requests.auth.HTTPBasicAuth('REPLACE_API_KEY', ''), data=data)\n\nprint(response.text)\n"
          },
          {
            "lang": "Shell",
            "source": "curl --request POST \\\n    --url 'https://app.nanonets.com/api/v2/OCR/Model/{{model_id}}/LabelUrls/?async=true' \\\n    --header 'accept: application/x-www-form-urlencoded' \\\n    -d 'urls=https://nanonets.s3-us-west-2.amazonaws.com/test-images/test1.jpg' \\\n    -u 'REPLACE_API_KEY'\n"
          },
          {
            "lang": "Golang",
            "source": "package main\n\nimport (\n    \"bytes\"\n    \"fmt\"\n    \"io/ioutil\"\n    \"net/http\"\n    \"net/url\"\n)\n\nfunc main() {\n\n    labelUrl := \"https://app.nanonets.com/api/v2/OCR/Model/{{model_id}}/LabelUrls/?async=true\"\n\n    data := url.Values{}\n    data.Add(\"urls\", \"https://nanonets.s3-us-west-2.amazonaws.com/test-images/test1.jpg\")\n\n    req, _ := http.NewRequest(\"POST\", labelUrl, bytes.NewBufferString(data.Encode()))\n\n    req.Header.Add(\"Content-Type\", \"application/x-www-form-urlencoded\")\n    req.SetBasicAuth(\"REPLACE_API_KEY\", \"\")\n\n    res, _ := http.DefaultClient.Do(req)\n\n    defer res.Body.Close()\n    body, _ := ioutil.ReadAll(res.Body)\n\n    fmt.Println(res)\n    fmt.Println(string(body))\n\n}\n"
          },
          {
            "lang": "JavaScript",
            "source": "var data = 'urls=https://nanonets.s3-us-west-2.amazonaws.com/test-images/test1.jpg';\n\nvar xhr = new XMLHttpRequest();\n\nxhr.addEventListener(\"readystatechange\", function () {\n    if (this.readyState === this.DONE) {\n        console.log(this.responseText);\n    }\n});\n\nxhr.open(\"POST\", \"https://app.nanonets.com/api/v2/OCR/Model/{{model_id}}/LabelUrls/?async=true\");\nxhr.setRequestHeader(\"Content-Type\", \"application/x-www-form-urlencoded\");\nxhr.setRequestHeader(\"authorization\", \"Basic \" + btoa(\"REPLACE_API_KEY:\"));\n\nxhr.send(data);\n"
          },
          {
            "lang": "Ruby",
            "source": "require 'uri'\nrequire 'net/http'\n\nurl = URI('https://app.nanonets.com/api/v2/OCR/Model/{{model_id}}/LabelUrls/?async=true')\n\nhttp = Net::HTTP.new(url.host, url.port)\nhttp.use_ssl = true\n\nrequest = Net::HTTP::Post.new(url)\nrequest[\"accept\"] = 'application/x-www-form-urlencoded'\nrequest.basic_auth 'REPLACE_API_KEY', ''\n\nrequest.set_form_data({'urls' => ['https://nanonets.s3-us-west-2.amazonaws.com/test-images/test1.jpg']})\n\nresponse = http.request(request)\nputs response.read_body\n"
          },
          {
            "lang": "C#",
            "source": "var client = new RestClient(\"https://app.nanonets.com/api/v2/OCR/Model/{{model_id}}/LabelUrls/?async=true\");\nvar request = new RestRequest(Method.POST);\nrequest.AddHeader(\"authorization\", \"Basic REPLACE_API_KEY\");\nrequest.AddHeader(\"accept\", \"application/x-www-form-urlencoded\");\nrequest.AddParameter(\"urls\", \"https://nanonets.s3-us-west-2.amazonaws.com/test-images/test1.jpg\");\nIRestResponse response = client.Execute(request);\n"
          },
          {
            "lang": "Java",
            "source": "OkHttpClient client = new OkHttpClient();\n\nRequestBody formBody = new FormBody.Builder()\n        .add(\"urls\", \"https://nanonets.s3-us-west-2.amazonaws.com/test-images/test1.jpg\").build();\n\nRequest request = new Request.Builder()\n    .url(\"https://app.nanonets.com/api/v2/OCR/Model/{{model_id}}/LabelUrls/?async=true\")\n    .post(formBody)\n    .addHeader(\"Authorization\", Credentials.basic(\"REPLACE_API_KEY\", \"\"))\n    .build();\n\nResponse response = client.newCall(request).execute();\n"
          }
        ],
        "x-operation-settings": {
          "AllowDynamicFormParameters": false,
          "AllowDynamicQueryParameters": false,
          "CollectParameters": false,
          "IsMultiContentStreaming": false
        },
        "x-unitTests": []
      }
    },
    "/OCR/Model/{model_id}/Train/": {
      "post": {
        "consumes": [
          "application/x-www-form-urlencoded"
        ],
        "description": "You can use this endpoint to train a model after uploading images for each category. You can use the same endpoint to retrain a model after uploading more images to improve the model.",
        "operationId": "OCRModelTrainByModelIdPost",
        "parameters": [
          {
            "description": "",
            "in": "path",
            "name": "model_id",
            "required": true,
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "Model Object",
            "examples": {
              "application/json": {
                "categories": [
                  {
                    "count": 0,
                    "name": "category1"
                  },
                  {
                    "count": 0,
                    "name": "category2"
                  }
                ],
                "model_id": "00000000-0000-0000-0000-000000000000",
                "model_type": "ocr",
                "state": 0
              }
            }
          },
          "400": {
            "description": "Model not ready for training. Check if the images for the model are uploaded"
          },
          "404": {
            "description": "Model does not exists. Check if the model id exists"
          }
        },
        "security": [
          {
            "ApiKey": []
          }
        ],
        "summary": "Train Model",
        "tags": [
          "OCR Train"
        ],
        "x-code-samples": [
          {
            "lang": "Nodejs",
            "source": "var request = require('request')\nconst options = {\n    url : 'https://app.nanonets.com/api/v2/OCR/Model/{{model_id}}/Train/',\n    headers: {\n        'Authorization' : 'Basic ' + Buffer.from('REPLACE_API_KEY' + ':').toString('base64')\n    }\n}\nrequest.post(options, function(err, httpResponse, body) {\n\n  console.log(body)\n});\n"
          },
          {
            "lang": "Python",
            "source": "import requests\n\nurl = 'https://app.nanonets.com/api/v2/OCR/Model/{{model_id}}/Train/'\nresponse = requests.request('POST', url, auth=requests.auth.HTTPBasicAuth('REPLACE_API_KEY', ''))\n\nprint(response.text)\n"
          },
          {
            "lang": "Shell",
            "source": "curl --request POST \\\n    --url 'https://app.nanonets.com/api/v2/OCR/REPLACE_MODEL_ID/Train/' \\\n    -u 'REPLACE_API_KEY'\n"
          },
          {
            "lang": "Golang",
            "source": "package main\n\nimport (\n    \"fmt\"\n    \"net/http\"\n    \"io/ioutil\"\n)\n\nfunc main() {\n\n    url := \"https://app.nanonets.com/api/v2/OCR/Model/{{model_id}}/Train/\"\n\n    req, _ := http.NewRequest(\"POST\", url, nil)\n\n    req.SetBasicAuth(\"REPLACE_API_KEY\", \"\")\n\n    res, _ := http.DefaultClient.Do(req)\n\n    defer res.Body.Close()\n    body, _ := ioutil.ReadAll(res.Body)\n\n    fmt.Println(res)\n    fmt.Println(string(body))\n\n}"
          },
          {
            "lang": "JavaScript",
            "source": "var data = null;\n\nvar xhr = new XMLHttpRequest();\n\nxhr.addEventListener(\"readystatechange\", function () {\nif (this.readyState === this.DONE) {\n    console.log(this.responseText);\n}\n});\n\nxhr.open(\"POST\", \"https://app.nanonets.com/api/v2/OCR/REPLACE_MODEL_ID/Train/\");\nxhr.setRequestHeader(\"authorization\", \"Basic \" + btoa(\"REPLACE_API_KEY:\"));\n\nxhr.send(data);\n"
          },
          {
            "lang": "Ruby",
            "source": "require 'uri' require 'net/http'\nurl = URI('https://app.nanonets.com/api/v2/OCR/Model/{{model_id}}/Train/')\nhttp = Net::HTTP.new(url.host, url.port) http.use_ssl = true\nrequest = Net::HTTP::Post.new(url) request.basic_auth 'REPLACE_API_KEY', ''\nresponse = http.request(request) puts response.read_body"
          },
          {
            "lang": "C#",
            "source": "var client = new RestClient(\"https://app.nanonets.com/api/v2/OCR/Model/{{model_id}}/Train/\");\nvar request = new RestRequest(Method.POST);\nrequest.AddHeader(\"authorization\", \"Basic REPLACE_API_KEY\");\nIRestResponse response = client.Execute(request);"
          },
          {
            "lang": "Java",
            "source": "OkHttpClient client = new OkHttpClient();\n\nRequest request = new Request.Builder()\n  .url(\"https://app.nanonets.com/api/v2/OCR/Model/{{model_id}}/Train/\")\n  .post(null)\n  .addHeader(\"Authorization\", Credentials.basic(\"REPLACE_API_KEY\", \"\"))\n  .build();\n\nResponse response = client.newCall(request).execute();"
          }
        ],
        "x-operation-settings": {
          "AllowDynamicFormParameters": false,
          "AllowDynamicQueryParameters": false,
          "CollectParameters": false,
          "IsMultiContentStreaming": false
        },
        "x-unitTests": []
      }
    },
    "/OCR/Model/{model_id}/UploadFile/": {
      "post": {
        "consumes": [
          "multipart/form-data"
        ],
        "description": "You can use this endpoint to upload training images for a category (for the specified model) using locally stored files. You will receive model information along with total number of images per category on successful execution. <br>Note: Filename in Data must be the same as that of the uploaded image name.",
        "operationId": "OCRModelUploadFileByModelIdPost",
        "parameters": [
          {
            "description": "",
            "in": "formData",
            "name": "data",
            "required": true,
            "type": "string"
          },
          {
            "description": "",
            "in": "formData",
            "name": "file",
            "required": true,
            "type": "file"
          },
          {
            "description": "",
            "in": "path",
            "name": "model_id",
            "required": true,
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "Model Object",
            "examples": {
              "application/json": {
                "Data": [
                  {
                    "filename": "example.jpeg",
                    "id": "00000000-0000-0000-0000-000000000000",
                    "object": [
                      {
                        "bndbox": {
                          "xmax": 100,
                          "xmin": 1,
                          "ymax": 100,
                          "ymin": 1
                        },
                        "name": "category1"
                      }
                    ],
                    "size": {
                      "height": 1024,
                      "width": 1024
                    }
                  }
                ],
                "Meta": {
                  "Accuracy": 0,
                  "Categories": [
                    {
                      "count": 0,
                      "name": "category1"
                    },
                    {
                      "count": 0,
                      "name": "category2"
                    }
                  ],
                  "ModelID": "00000000-0000-0000-0000-000000000000",
                  "ModelType": "localization",
                  "State": 0,
                  "Status": "Current Status"
                }
              }
            }
          },
          "400": {
            "description": "Category not valid for model. Check if this model has the category used in the request\n\nOR\n\nFile missing. Check if you have included the file in the request\n\nOR\n\nIncorrect image. Check if file you included is valid PNG or JPEG file"
          },
          "404": {
            "description": "Model does not exists. Check if the model id exists"
          }
        },
        "summary": "Upload training images by File",
        "tags": [
          "OCR Upload"
        ],
        "x-code-samples": [
          {
            "lang": "Nodejs",
            "source": "var request = require('request')\nvar fs = require('fs')\nconst form_data = {'file' : fs.createReadStream('REPLACE_IMAGE_PATH.jpg'), 'data' : JSON.stringify([\n  {\"filename\":\"REPLACE_IMAGE_FILENAME.jpg\", \"object\":[{\"name\":\"category1\", \"ocr_text\":\"text inside the bounding box\", \"bndbox\": {\"xmin\": 1,\"ymin\":1,\"xmax\": 100, \"ymax\": 100}}]}])}\n\nconst options = {\n    url : 'https://app.nanonets.com/api/v2/OCR/Model/{{model_id}}/UploadFile/',\n    formData: form_data,\n    headers: {\n        'Authorization' : 'Basic ' + Buffer.from('REPLACE_API_KEY' + ':').toString('base64')\n    }\n}\nrequest.post(options, function(err, httpResponse, body) {\n\n  console.log(body)\n});\n"
          },
          {
            "lang": "Python",
            "source": "import requests\n\nurl = 'https://app.nanonets.com/api/v2/OCR/Model/{{model_id}}/UploadFile/'\n\ndata = {'file' :open('REPLACE_IMAGE_PATH.jpg', 'rb'), 'data' :('', '[{\"filename\":\"REPLACE_IMAGE_FILENAME.jpg\", \"object\": [{\"name\":\"category1\", \"ocr_text\":\"text inside the bounding box\", \"bndbox\": {\"xmin\": 1,\"ymin\": 1,\"xmax\": 100, \"ymax\": 100}}]}]')}\n\nresponse = requests.post(url, auth=requests.auth.HTTPBasicAuth('REPLACE_API_KEY', ''), files=data)\n\nprint(response.text)"
          },
          {
            "lang": "Shell",
            "source": "curl --request POST \\\n    --url 'https://app.nanonets.com/api/v2/OCR/Model/{{model_id}}/UploadFile/' \\\n    --header 'accept: multipart/form-data' \\\n    -u 'REPLACE_API_KEY' \\\n    -F 'data=[{\"filename\":\"REPLACE_IMAGE_FILENAME.jpg\", \"object\": [{\"name\":\"category1\", \"ocr_text\":\"text inside the bounding box\", \"bndbox\": {\"xmin\": 1,\"ymin\": 1,\"xmax\": 100, \"ymax\": 100}}]}]' \\\n    -F 'file=@REPLACE_IMAGE_PATH.jpg'\n"
          },
          {
            "lang": "Golang",
            "source": "package main\n\nimport (\n    \"bytes\"\n    \"fmt\"\n    \"io\"\n    \"io/ioutil\"\n    \"mime/multipart\"\n    \"net/http\"\n    \"os\"\n    \"path/filepath\"\n)\n\nfunc main() {\n\n    url := \"https://app.nanonets.com/api/v2/OCR/Model/{{model_id}}/UploadFile/\"\n\n    file, err := os.Open(\"test.jpg\")\n    if err != nil {\n        fmt.Println(err)\n        return\n    }\n\n    defer file.Close()\n\n    body := &bytes.Buffer{}\n    writer := multipart.NewWriter(body)\n\n    part, err := writer.CreateFormFile(\"file\", filepath.Base(\"test.jpg\"))\n    if err != nil {\n        fmt.Println(err)\n        return\n    }\n    _, err = io.Copy(part, file)\n\n    writer.WriteField(\"data\", `[{\"filename\":\"REPLACE_IMAGE_FILENAME.jpg\", \"object\": [{\"name\":\"category1\", \"ocr_text\":\"text inside the bounding box\", \"bndbox\": {\"xmin\": 1,\"ymin\": 1,\"xmax\": 100, \"ymax\": 100}}]}]`)\n    contentType := writer.FormDataContentType()\n\n    err = writer.Close()\n    if err != nil {\n        fmt.Println(err)\n        return\n    }\n\n    req, _ := http.NewRequest(\"POST\", url, body)\n\n    req.Header.Add(\"Content-Type\", contentType)\n    req.SetBasicAuth(\"REPLACE_API_KEY\", \"\")\n\n    res, _ := http.DefaultClient.Do(req)\n\n    defer res.Body.Close()\n    outputBody, _ := ioutil.ReadAll(res.Body)\n\n    fmt.Println(res)\n    fmt.Println(string(outputBody))\n\n}\n"
          },
          {
            "lang": "JavaScript",
            "source": "var data = new FormData();\ndata.append('data', '[{\"filename\":\"REPLACE_IMAGE_FILENAME.jpg\", \"object\": [{\"name\":\"category1\", \"ocr_text\":\"text inside the bounding box\", \"bndbox\": {\"xmin\": 1,\"ymin\": 1,\"xmax\": 100, \"ymax\": 100}}]}]');\ndata.append('file', file); // file is a Blob object\n\nvar xhr = new XMLHttpRequest();\n\nvar xhr = new XMLHttpRequest();\n\nxhr.addEventListener(\"readystatechange\", function () {\n    if (this.readyState === this.DONE) {\n        console.log(this.responseText);\n    }\n});\n\nxhr.open(\"POST\", \"https://app.nanonets.com/api/v2/OCR/Model/{{model_id}}/UploadFile/\");\nxhr.setRequestHeader(\"authorization\", \"Basic \" + btoa(\"REPLACE_API_KEY:\"));\n\nxhr.send(data);\n"
          },
          {
            "lang": "Ruby",
            "source": "require 'uri'\nrequire 'net/http'\nrequire 'net/http/post/multipart'\n\nurl = URI('https://app.nanonets.com/api/v2/OCR/Model/{{model_id}}/UploadFile/')\n\nhttp = Net::HTTP.new(url.host, url.port)\nhttp.use_ssl = true\n\nFile.open('REPLACE_IMAGE_PATH.jpg') do |jpg|\n  request = Net::HTTP::Post::Multipart.new url.path,\n      'file' => UploadIO.new(jpg, 'image/jpeg', 'REPLACE_IMAGE_PATH.jpg'),\n      'data' => '[{\"filename\":\"REPLACE_IMAGE_FILENAME.jpg\", \"object\":[{\"name\":\"category1\", \"ocr_text\":\"text inside the bounding box\", \"bndbox\":{\"xmin\":1,\"ymin\":1,\"xmax\":100, \"ymax\":100}}]}]'\n  request.basic_auth 'REPLACE_API_KEY', ''\n  response = Net::HTTP.start(url.host, url.port) do |http|\n      http.request(request)\n  end\n  puts response.read_body\nend\n"
          },
          {
            "lang": "C#",
            "source": "var client = new RestClient(\"https://app.nanonets.com/api/v2/OCR/UploadFile/\");\nvar request = new RestRequest(Method.POST);\nrequest.AddHeader(\"authorization\", \"Basic REPLACE_API_KEY\");\nrequest.AddHeader(\"accept\", \"Multipart/form-data\");\nrequest.AddParameter(\"data\", \"[{\\\"filename\\\":\\\"REPLACE_IMAGE_FILENAME.jpg\\\", \\\"object\\\": [{\\\"name\\\":\\\"category1\\\", \\\"ocr_text\\\":\\\"text inside the bounding box\\\", \\\"bndbox\\\": {\\\"xmin\\\": 1,\\\"ymin\\\": 1,\\\"xmax\\\": 100, \\\"ymax\\\": 100}}]}]\");\nrequest.AddFile(\"file\", \"REPLACE_IMAGE_PATH.jpg\");\nIRestResponse response = client.Execute(request);\"\n"
          },
          {
            "lang": "Java",
            "source": "private static final MediaType MEDIA_TYPE_JPG = MediaType.parse(\"image/jpeg\");\n\nOkHttpClient client = new OkHttpClient();\n\nRequestBody requestBody = new MultipartBody.Builder()\n        .setType(MultipartBody.FORM)\n        .addFormDataPart(\"data\", \"[{\\\"filename\\\":\\\"REPLACE_IMAGE_FILENAME.jpg\\\", \\\"object\\\": [{\\\"name\\\":\\\"category1\\\", \\\"ocr_text\\\":\\\"text inside the bounding box\\\", \\\"bndbox\\\": {\\\"xmin\\\": 1,\\\"ymin\\\": 1,\\\"xmax\\\": 100, \\\"ymax\\\": 100}}]}]\")\n        .addFormDataPart(\"file\", \"REPLACE_IMAGE_PATH.jpg\", RequestBody.create(MEDIA_TYPE_JPG, new File(\"REPLACE_IMAGE_PATH.jpg\")))\n        .build();\n\nrequest = new Request.Builder()\n        .url(\"https://app.nanonets.com/api/v2/OCR/Model/{{model_id}}/UploadFile/\")\n        .post(requestBody)\n        .addHeader(\"Authorization\", Credentials.basic(\"REPLACE_API_KEY\", \"\"))\n        .build();\n\nResponse response = client.newCall(request).execute();\"\n"
          }
        ]
      }
    },
    "/OCR/Model/{model_id}/UploadUrls/": {
      "post": {
        "description": "You can use this endpoint to upload training images for a category (for the specified model) by image urls. You can upload multiple images in the same request by adding an array of urls. You will receive model information along with total number of images per category on successful execution.",
        "operationId": "OCRModelUploadUrlsByModelIdPost",
        "parameters": [
          {
            "description": "",
            "in": "body",
            "name": "Body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/UploadTrainingImagesByUrlrequest"
            }
          },
          {
            "description": "",
            "in": "header",
            "name": "Content-Type",
            "required": true,
            "type": "string"
          },
          {
            "description": "",
            "in": "path",
            "name": "model_id",
            "required": true,
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "Model Object",
            "examples": {
              "application/json": {
                "Data": [
                  {
                    "filename": "example.jpeg",
                    "id": "00000000-0000-0000-0000-000000000000",
                    "object": [
                      {
                        "bndbox": {
                          "xmax": 100,
                          "xmin": 1,
                          "ymax": 100,
                          "ymin": 1
                        },
                        "name": "category1",
                        "ocr_text": "text inside the bounding box"
                      }
                    ],
                    "size": {
                      "height": 1024,
                      "width": 1024
                    }
                  }
                ],
                "Meta": {
                  "Accuracy": 0,
                  "Categories": [
                    {
                      "count": 0,
                      "name": "category1"
                    },
                    {
                      "count": 0,
                      "name": "category2"
                    }
                  ],
                  "ModelID": "00000000-0000-0000-0000-000000000000",
                  "ModelType": "ocr",
                  "State": 0,
                  "Status": "Current Status"
                }
              }
            }
          },
          "202": {
            "description": "Request partially successful. One or more urls might not be correct or got no response"
          },
          "400": {
            "description": "Category not valid for model. Check if this model has the category used in the request\n\nOR\n\nUrls missing. Check if you have included an array of image urls"
          },
          "404": {
            "description": "Model does not exists. Check if the model id exists"
          }
        },
        "security": [
          {
            "ApiKey": []
          }
        ],
        "summary": "Upload training images by Url",
        "tags": [
          "OCR Upload"
        ],
        "x-code-samples": [
          {
            "lang": "Nodejs",
            "source": "var request = require('request')\nconst form_data = {\"data\": [{\"filename\":\"https://nanonets.s3-us-west-2.amazonaws.com/test-images/test1.jpg\", \"object\": [{\"name\":\"category1\", \"ocr_text\":\"text inside the bounding box\", \"bndbox\": {\"xmin\": 1,\"ymin\": 1,\"xmax\": 100, \"ymax\": 100}}, {\"name\":\"category2\", \"bndbox\": {\"xmin\": 1,\"ymin\": 1,\"xmax\": 100, \"ymax\": 100}}]}], \"urls\": [\"https://nanonets.s3-us-west-2.amazonaws.com/test-images/test1.jpg\"]}\nconst options = {\n    url : 'https://app.nanonets.com/api/v2/OCR/Model/{model_id}/UploadUrls/',\n    body: JSON.stringify(form_data),\n    headers: {\n        'Authorization' : 'Basic ' + Buffer.from('REPLACE_API_KEY' + ':').toString('base64'),\n        'Content-Type': \"application/json\"\n    }\n}\nrequest.post(options, function(err, httpResponse, body) {\n\n  console.log(body)\n});\n"
          },
          {
            "lang": "Python",
            "source": "import requests\n\nurl = \"https://app.nanonets.com/api/v2/OCR/Model/{model_id}/UploadUrls/\"\n\npayload = \"{\\\"data\\\": [{\\\"filename\\\":\\\"https://nanonets.s3-us-west-2.amazonaws.com/test-images/test1.jpg\\\", \\\"object\\\": [{\\\"name\\\":\\\"category1\\\", \\\"ocr_text\\\":\\\"text inside the bounding box\\\", \\\"bndbox\\\": {\\\"xmin\\\": 1,\\\"ymin\\\": 1,\\\"xmax\\\": 100, \\\"ymax\\\": 100}}, {\\\"name\\\":\\\"category2\\\", \\\"bndbox\\\": {\\\"xmin\\\": 1,\\\"ymin\\\": 1,\\\"xmax\\\": 100, \\\"ymax\\\": 100}}]}], \\\"urls\\\": [\\\"https://nanonets.s3-us-west-2.amazonaws.com/test-images/test1.jpg\\\"]}\"\nheaders = {\n    'Content-Type': \"application/json\"\n}\n\nresponse = requests.request(\"POST\", url, auth=requests.auth.HTTPBasicAuth('REPLACE_API_KEY', ''), data=payload, headers=headers)\n\nprint(response.text)\n"
          },
          {
            "lang": "Shell",
            "source": "curl --request POST \\\n    --url https://app.nanonets.com/api/v2/OCR/Model/{model_id}/UploadUrls/ \\\n    -u 'REPLACE_API_KEY' \\\n    -H 'Content-Type: application/json' \\\n    --data '{\"data\": [{\"filename\":\"https://nanonets.s3-us-west-2.amazonaws.com/test-images/test1.jpg\", \"object\": [{\"name\":\"category1\", \"ocr_text\":\"text inside the bounding box\", \"bndbox\": {\"xmin\": 1,\"ymin\": 1,\"xmax\": 100, \"ymax\": 100}}, {\"name\":\"category2\", \"bndbox\": {\"xmin\": 1,\"ymin\": 1,\"xmax\": 100, \"ymax\": 100}}]}], \"urls\": [\"https://nanonets.s3-us-west-2.amazonaws.com/test-images/test1.jpg\"]}'\n"
          },
          {
            "lang": "Golang",
            "source": "package main\n\nimport (\n    \"fmt\"\n    \"io/ioutil\"\n    \"net/http\"\n    \"strings\"\n)\n\nfunc main() {\n\n    url := \"https://app.nanonets.com/api/v2/OCR/Model/REPLACE_MODEL_ID/UploadUrls/\"\n\n    payload := strings.NewReader(\"{\\\"data\\\": [{\\\"filename\\\":\\\"https://nanonets.s3-us-west-2.amazonaws.com/test-images/test1.jpg\\\", \\\"object\\\": [{\\\"name\\\":\\\"category1\\\", \\\"ocr_text\\\":\\\"text inside the bounding box\\\", \\\"bndbox\\\": {\\\"xmin\\\": 1,\\\"ymin\\\": 1,\\\"xmax\\\": 100, \\\"ymax\\\": 100}}, {\\\"name\\\":\\\"category2\\\", \\\"bndbox\\\": {\\\"xmin\\\": 1,\\\"ymin\\\": 1,\\\"xmax\\\": 100, \\\"ymax\\\": 100}}]}], \\\"urls\\\": [\\\"https://nanonets.s3-us-west-2.amazonaws.com/test-images/test1.jpg\\\"]}\")\n\n    req, _ := http.NewRequest(\"POST\", url, payload)\n\n    req.Header.Add(\"Content-Type\", \"application/json\")\n    req.SetBasicAuth(\"REPLACE_API_KEY\", \"\")\n\n    res, _ := http.DefaultClient.Do(req)\n\n    defer res.Body.Close()\n    body, _ := ioutil.ReadAll(res.Body)\n\n    fmt.Println(res)\n    fmt.Println(string(body))\n\n}\n"
          },
          {
            "lang": "JavaScript",
            "source": "var data = JSON.stringify({\n  \"data\": [\n    {\n      \"filename\": \"https://nanonets.s3-us-west-2.amazonaws.com/test-images/test1.jpg\",\n      \"object\": [\n        {\n          \"name\": \"category1\",\n          \"bndbox\": {\n            \"xmin\": 1,\n            \"ymin\": 1,\n            \"xmax\": 100,\n            \"ymax\": 100\n          },\n          \"ocr_text\" : \"text inside the bounding box\",\n        },\n        {\n          \"name\": \"category2\",\n          \"bndbox\": {\n            \"xmin\": 1,\n            \"ymin\": 1,\n            \"xmax\": 100,\n            \"ymax\": 100\n          },\n          \"ocr_text\" : \"text inside the bounding box\",\n        }\n      ]\n    }\n  ],\n  \"urls\": [\n    \"https://nanonets.s3-us-west-2.amazonaws.com/test-images/test1.jpg\"\n  ]\n});\n\nvar xhr = new XMLHttpRequest();\nxhr.withCredentials = true;\n\nxhr.addEventListener(\"readystatechange\", function () {\n  if (this.readyState === 4) {\n    console.log(this.responseText);\n  }\n});\n\nxhr.open(\"POST\", \"https://app.nanonets.com/api/v2/OCR/Model/REPLACE_MODEL_ID/UploadUrls/\");\nxhr.setRequestHeader(\"Content-Type\", \"application/json\");\nxhr.setRequestHeader(\"authorization\", \"Basic \" + btoa(\"REPLACE_API_KEY:\"));\n\nxhr.send(data);"
          },
          {
            "lang": "Ruby",
            "source": "require 'uri'\nrequire 'net/http'\n\nurl = URI(\"https://app.nanonets.com/api/v2/OCR/Model/REPLACE_MODEL_ID/UploadUrls/\")\n\nhttp = Net::HTTP.new(url.host, url.port)\nhttp.use_ssl = true\n\nrequest = Net::HTTP::Post.new(url)\nrequest[\"Content-Type\"] = 'application/json'\nrequest.basic_auth 'REPLACE_API_KEY', ''\nrequest.body = \"{\\\"data\\\": [{\\\"filename\\\":\\\"https://nanonets.s3-us-west-2.amazonaws.com/test-images/test1.jpg\\\", \\\"object\\\": [{\\\"name\\\":\\\"category1\\\", \\\"ocr_text\\\":\\\"text inside the bounding box\\\", \\\"bndbox\\\": {\\\"xmin\\\": 1,\\\"ymin\\\": 1,\\\"xmax\\\": 100, \\\"ymax\\\": 100}}, {\\\"name\\\":\\\"category2\\\", \\\"bndbox\\\": {\\\"xmin\\\": 1,\\\"ymin\\\": 1,\\\"xmax\\\": 100, \\\"ymax\\\": 100}}]}], \\\"urls\\\": [\\\"https://nanonets.s3-us-west-2.amazonaws.com/test-images/test1.jpg\\\"]}\"\n\nresponse = http.request(request)\nputs response.read_body\"\n"
          },
          {
            "lang": "C#",
            "source": "var client = new RestClient(\"https://app.nanonets.com/api/v2/OCR/Model/REPLACE_MODEL_ID/UploadUrls/\");\nvar request = new RestRequest(Method.POST);\nrequest.AddHeader(\"authorization\", \"Basic REPLACE_API_KEY\");\nrequest.AddHeader(\"Content-Type\", \"application/json\");\nrequest.AddParameter(\"undefined\", \" {\"data\": [{\"filename\":\"https://nanonets.s3-us-west-2.amazonaws.com/test-images/test1.jpg\", \"object\": [{\"name\":\"category1\", \"ocr_text\": \"text inside the bounding box\", \"bndbox\": {\"xmin\": 1,\"ymin\": 1,\"xmax\": 100, \"ymax\": 100}}, {\"name\":\"category2\", \"ocr_text\": \"text inside the bounding box\", \"bndbox\": {\"xmin\": 1,\"ymin\": 1,\"xmax\": 100, \"ymax\": 100}}]}], \"urls\": [\"https://nanonets.s3-us-west-2.amazonaws.com/test-images/test1.jpg\"]}\", ParameterType.RequestBody);\nIRestResponse response = client.Execute(request);\n"
          },
          {
            "lang": "Java",
            "source": "OkHttpClient client = new OkHttpClient();\n\nMediaType mediaType = MediaType.parse(\"application/json\");\nRequestBody body = RequestBody.create(mediaType, \"\n{\"data\": [{\"filename\":\"https://nanonets.s3-us-west-2.amazonaws.com/test-images/test1.jpg\", \"object\": [{\"name\":\"category1\", \"ocr_text\": \"text inside the bounding box\", \"bndbox\": {\"xmin\": 1,\"ymin\": 1,\"xmax\": 100, \"ymax\": 100}}, {\"name\":\"category2\", \"ocr_text\": \"text inside the bounding box\", \"bndbox\": {\"xmin\": 1,\"ymin\": 1,\"xmax\": 100, \"ymax\": 100}}]}], \"urls\": [\"https://nanonets.s3-us-west-2.amazonaws.com/test-images/test1.jpg\"]}\");\nRequest request = new Request.Builder()\n  .url(\"https://app.nanonets.com/api/v2/OCR/Model/REPLACE_MODEL_ID/UploadUrls/\")\n  .post(body)\n  .addHeader(\"Content-Type\", \"application/json\")\n  .addHeader(\"Authorization\", Credentials.basic(\"REPLACE_API_KEY\", \"\"))\n  .build();\n\nResponse response = client.newCall(request).execute();"
          }
        ],
        "x-operation-settings": {
          "AllowDynamicFormParameters": false,
          "AllowDynamicQueryParameters": false,
          "CollectParameters": false,
          "IsMultiContentStreaming": false
        },
        "x-unitTests": []
      }
    },
    "/ObjectDetection/Model/": {
      "post": {
        "description": "You can create a new model using this endpoint. A successful API call will return the json structure of the newly created model. You can then use the model's id to upload images for each category and then retrain the model.",
        "operationId": "ObjectDetectionModelPost",
        "parameters": [
          {
            "description": "",
            "in": "body",
            "name": "Body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/CreateNewModelrequest"
            }
          },
          {
            "description": "",
            "in": "header",
            "name": "Content-Type",
            "required": true,
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "Model Object",
            "examples": {
              "application/json": {
                "categories": [
                  {
                    "count": 0,
                    "name": "category1"
                  },
                  {
                    "count": 0,
                    "name": "category2"
                  }
                ],
                "model_id": "00000000-0000-0000-0000-000000000000",
                "model_type": "localization",
                "state": 0
              }
            }
          },
          "400": {
            "description": "Zero or One category in request. Add two or more categories in parameters"
          }
        },
        "security": [
          {
            "ApiKey": []
          }
        ],
        "summary": "Create New Model",
        "tags": [
          "Object Detection Model"
        ],
        "x-code-samples": [
          {
            "lang": "Nodejs",
            "source": "var request = require('request')\nconst form_data = {'categories' : ['category1', 'category2']}\nconst options = {\n    url : 'https://app.nanonets.com/api/v2/ObjectDetection/Model/',\n    body: JSON.stringify(form_data),\n    headers: {\n        'Authorization' : 'Basic ' + Buffer.from('REPLACE_API_KEY' + ':').toString('base64'),\n        'Content-Type': \"application/json\",\n    }\n}\nrequest.post(options, function(err, httpResponse, body) {\n\n  console.log(body)\n});\n"
          },
          {
            "lang": "Python",
            "source": "import requests\n\nurl = \"https://app.nanonets.com/api/v2/ObjectDetection/Model/\"\n\npayload = \"{\\\"categories\\\" : [\\\"category1\\\", \\\"category2\\\"]}\"\nheaders = {\n    'Content-Type': \"application/json\",\n}\n\nresponse = requests.request(\"POST\", url, headers=headers, auth=requests.auth.HTTPBasicAuth('REPLACE_API_KEY', ''), data=payload)\n\nprint(response.text)\n"
          },
          {
            "lang": "Shell",
            "source": "curl -X POST https://app.nanonets.com/api/v2/ObjectDetection/Model/ \\\n    -H 'Content-Type: application/json' \\\n    -u 'REPLACE_API_KEY' \\\n    -d '{\"categories\" : [\"category1\", \"category2\"]}'"
          },
          {
            "lang": "Golang",
            "source": "package main\n\nimport (\n    \"fmt\"\n    \"io/ioutil\"\n    \"net/http\"\n    \"strings\"\n)\n\nfunc main() {\n\n    url := \"https://app.nanonets.com/api/v2/ObjectDetection/Model/\"\n\n    payload := strings.NewReader(\"{\\\"categories\\\" : [\\\"category1\\\", \\\"category2\\\"]}\")\n\n    req, _ := http.NewRequest(\"POST\", url, payload)\n\n    req.Header.Add(\"Content-Type\", \"application/json\")\n    req.SetBasicAuth(\"REPLACE_API_KEY\", \"\")\n\n    res, _ := http.DefaultClient.Do(req)\n\n    defer res.Body.Close()\n    body, _ := ioutil.ReadAll(res.Body)\n\n    fmt.Println(res)\n    fmt.Println(string(body))\n\n}"
          },
          {
            "lang": "JavaScript",
            "source": "var data = JSON.stringify({\n  \"categories\": [\n    \"category1\",\n    \"category2\"\n  ]\n});\n\nvar xhr = new XMLHttpRequest();\nxhr.withCredentials = true;\n\nxhr.addEventListener(\"readystatechange\", function () {\n  if (this.readyState === 4) {\n    console.log(this.responseText);\n  }\n});\n\nxhr.open(\"POST\", \"https://app.nanonets.com/api/v2/ObjectDetection/Model/\");\nxhr.setRequestHeader(\"Content-Type\", \"application/json\");\nxhr.setRequestHeader(\"authorization\", \"Basic \" + btoa(\"REPLACE_API_KEY:\"));\n\nxhr.send(data);"
          },
          {
            "lang": "Ruby",
            "source": "require 'uri'\nrequire 'net/http'\n\nurl = URI(\"https://app.nanonets.com/api/v2/ObjectDetection/Model/\")\n\nhttp = Net::HTTP.new(url.host, url.port)\nhttp.use_ssl = true\n\nrequest = Net::HTTP::Post.new(url)\nrequest[\"Content-Type\"] = 'application/json'\nrequest.basic_auth 'REPLACE_API_KEY', ''\nrequest.body = \"{\\\"categories\\\" : [\\\"category1\\\", \\\"category2\\\"]}\"\n\nresponse = http.request(request)\nputs response.read_body\n"
          },
          {
            "lang": "C#",
            "source": "var client = new RestClient(\"https://app.nanonets.com/api/v2/ObjectDetection/Model/\");\nvar request = new RestRequest(Method.POST);\nrequest.AddHeader(\"authorization\", \"Basic REPLACE_API_KEY\");\nrequest.AddHeader(\"Content-Type\", \"application/json\");\nrequest.AddParameter(\"undefined\", \"{\"categories\" : [\"category1\", \"category2\"]}\", ParameterType.RequestBody);\nIRestResponse response = client.Execute(request);"
          },
          {
            "lang": "Java",
            "source": "OkHttpClient client = new OkHttpClient();\n\nMediaType mediaType = MediaType.parse(\"application/json\");\nRequestBody body = RequestBody.create(mediaType, \"{\"categories\" : [\"category1\", \"category2\"]}\");\nRequest request = new Request.Builder()\n  .url(\"https://app.nanonets.com/api/v2/ObjectDetection/Model/\")\n  .post(body)\n  .addHeader(\"Content-Type\", \"application/json\")\n  .addHeader(\"Authorization\", Credentials.basic(\"REPLACE_API_KEY\", \"\"))\n  .build();\n\nResponse response = client.newCall(request).execute();"
          }
        ],
        "x-operation-settings": {
          "AllowDynamicFormParameters": false,
          "AllowDynamicQueryParameters": false,
          "CollectParameters": false,
          "IsMultiContentStreaming": false
        },
        "x-unitTests": [
          {
            "expectedResponse": {
              "headers": {},
              "x-allowExtraHeaders": true,
              "x-arrayCheckCount": false,
              "x-arrayOrderedMatching": false,
              "x-bodyMatchMode": "NONE",
              "x-matchResponseSchema": true
            },
            "request": {
              "body": "{\"categories\" : [\"{{category1}}\", \"{{category2}}\"]}",
              "headers": {
                "Content-Type": "application/json"
              },
              "method": "POST",
              "uri": "/ObjectDetection/Model/"
            },
            "x-testDescription": "",
            "x-testEnabled": true,
            "x-testName": "Create New Model1",
            "x-testShouldPass": true
          }
        ]
      }
    },
    "/ObjectDetection/Model/{model_id}": {
      "get": {
        "description": "This endpoint retrieves a specific model's details given it's id.",
        "operationId": "ObjectDetectionModelByModelIdGet",
        "parameters": [
          {
            "description": "",
            "in": "path",
            "name": "model_id",
            "required": true,
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "Model Object",
            "examples": {
              "application/json": {
                "categories": [
                  {
                    "count": 0,
                    "name": "category1"
                  },
                  {
                    "count": 0,
                    "name": "category2"
                  }
                ],
                "model_id": "00000000-0000-0000-0000-000000000000",
                "model_type": "localization",
                "state": 0
              }
            }
          },
          "404": {
            "description": "Model does not exists. Check if you have entered correct model id with valid API key"
          }
        },
        "security": [
          {
            "ApiKey": []
          }
        ],
        "summary": "Get Model by Id",
        "tags": [
          "Object Detection Model"
        ],
        "x-code-samples": [
          {
            "lang": "Nodejs",
            "source": "var request = require('request')\nconst options = {\n    url : 'https://app.nanonets.com/api/v2/ObjectDetection/Model/' + 'REPLACE_MODEL_ID',\n    headers: {\n        'Authorization' : 'Basic ' + Buffer.from('REPLACE_API_KEY' + ':').toString('base64')\n    }\n}\nrequest.get(options, function(err, httpResponse, body) {\n\n  console.log(body)\n});\n"
          },
          {
            "lang": "Python",
            "source": "import requests\n\nurl = 'https://app.nanonets.com/api/v2/ObjectDetection/Model/' + {{model_id}}\n\nresponse = requests.request('GET', url, auth=requests.auth.HTTPBasicAuth('REPLACE_API_KEY',''))\n\nprint(response.text)"
          },
          {
            "lang": "Shell",
            "source": "curl --request GET \\\n  --url 'https://app.nanonets.com/api/v2/ObjectDetection/Model/{{model_id}}' \\\n  -u 'REPLACE_API_KEY'"
          },
          {
            "lang": "Golang",
            "source": "package main\n\nimport (\n    \"fmt\"\n    \"net/http\"\n    \"io/ioutil\"\n)\n\nfunc main() {\n\n    url := \"https://app.nanonets.com/api/v2/ObjectDetection/Model/\" + {{model_id}}\n\n    req, _ := http.NewRequest(\"GET\", url, nil)\n\n    req.SetBasicAuth(\"REPLACE_API_KEY\", \"\")\n\n    res, _ := http.DefaultClient.Do(req)\n\n    defer res.Body.Close()\n    body, _ := ioutil.ReadAll(res.Body)\n\n    fmt.Println(res)\n    fmt.Println(string(body))\n\n}"
          },
          {
            "lang": "JavaScript",
            "source": "var data = null;\n\nvar xhr = new XMLHttpRequest();\n\nxhr.addEventListener(\"readystatechange\", function () {\n  if (this.readyState === this.DONE) {\n    console.log(this.responseText);\n  }\n});\n\nxhr.open(\"GET\", \"https://app.nanonets.com/api/v2/ObjectDetection/Model/\" + {{model_id}});\nxhr.setRequestHeader(\"authorization\", \"Basic \" + btoa(\"REPLACE_API_KEY:\"));\n\nxhr.send(data);"
          },
          {
            "lang": "Ruby",
            "source": "require 'uri' require 'net/http'\nurl = URI('https://app.nanonets.com/api/v2/ObjectDetection/Model/' + {{model_id}})\nhttp = Net::HTTP.new(url.host, url.port) http.use_ssl = true\nrequest = Net::HTTP::Get.new(url) request.basic_auth 'REPLACE_API_KEY', '' response = http.request(request)\nputs response.read_body"
          },
          {
            "lang": "C#",
            "source": "var client = new RestClient(\"https://app.nanonets.com/api/v2/ObjectDetection/Model/\" + {{model_id}});\nvar request = new RestRequest(Method.GET);\nrequest.AddHeader(\"authorization\", \"Basic \" + Convert.ToBase64String(Encoding.Default.GetBytes(\"REPLACE_API_KEY:\")));\nIRestResponse response = client.Execute(request);"
          },
          {
            "lang": "Java",
            "source": "OkHttpClient client = new OkHttpClient();\n\nRequest request = new Request.Builder()\n  .url(\"https://app.nanonets.com/api/v2/ObjectDetection/Model/\" + {{model_id}})\n  .get()\n  .addHeader(\"authorization\", Credentials.basic(\"REPLACE_API_KEY\", \"\"))\n  .build();\n\nResponse response = client.newCall(request).execute();"
          }
        ],
        "x-operation-settings": {
          "AllowDynamicFormParameters": false,
          "AllowDynamicQueryParameters": false,
          "CollectParameters": false,
          "IsMultiContentStreaming": false
        },
        "x-unitTests": []
      }
    },
    "/ObjectDetection/Model/{model_id}/LabelFile/": {
      "post": {
        "consumes": [
          "multipart/form-data"
        ],
        "description": "Use the model to predict which one of the categories an image (given an image file) belongs to.",
        "operationId": "ObjectDetectionModelLabelFileByModelIdPost",
        "parameters": [
          {
            "description": "",
            "in": "formData",
            "name": "file",
            "required": true,
            "type": "file"
          },
          {
            "description": "",
            "in": "path",
            "name": "model_id",
            "required": true,
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "Model Object",
            "examples": {
              "application/json": {
                "message": "Success",
                "result": [
                  {
                    "input": "string",
                    "message": "Success",
                    "predictions": [
                      {
                        "label": "category1",
                        "score": 0.9,
                        "xmax": 100,
                        "xmin": 0,
                        "ymax": 100,
                        "ymin": 0
                      }
                    ]
                  }
                ]
              }
            }
          },
          "400": {
            "description": "File missing. Check if you have included a file in the request\n\nOR\n\nIncorrect image. Check if file you included is a valid PNG or JPEG"
          },
          "402": {
            "description": "Exhausted Free API Calls. You have exhausted your free API calls please change your plan <a href=\"https://app.nanonets.com/user/apps\">here</a>"
          },
          "404": {
            "description": "Model does not exists. Check if the model id exists"
          }
        },
        "security": [
          {
            "ApiKey": []
          }
        ],
        "summary": "Prediction for image file",
        "tags": [
          "Object Detection Model Predict"
        ],
        "x-code-samples": [
          {
            "lang": "Nodejs",
            "source": "var request = require('request')\nvar fs = require('fs')\nconst form_data = {'modelId' : 'REPLACE_MODEL_ID', 'file' : fs.createReadStream('REPLACE_IMAGE_PATH.jpg')}\nconst options = {\n    url : 'https://app.nanonets.com/api/v2/ObjectDetection/Model/REPLACE_MODEL_ID/LabelFile/',\n    formData: form_data,\n    headers: {\n        'Authorization' : 'Basic ' + Buffer.from('REPLACE_API_KEY' + ':').toString('base64')\n    }\n}\nrequest.post(options, function(err, httpResponse, body) {\n\n  console.log(body)\n});\n"
          },
          {
            "lang": "Python",
            "source": "import requests\n\nurl = 'https://app.nanonets.com/api/v2/ObjectDetection/Model/REPLACE_MODEL_ID/LabelFile/'\n\ndata = {'file': open('REPLACE_IMAGE_PATH.jpg', 'rb')}\n\nresponse = requests.post(url, auth=requests.auth.HTTPBasicAuth('REPLACE_API_KEY', ''), files=data)\n\nprint(response.text)\n"
          },
          {
            "lang": "Shell",
            "source": "curl --request POST \\\n    --url 'https://app.nanonets.com/api/v2/ObjectDetection/Model/{{model_id}}/LabelFile/' \\\n    --header 'accept: multipart/form-data' \\\n    -u 'REPLACE_API_KEY' \\\n    -F 'file=@REPLACE_IMAGE_PATH.jpg'\n"
          },
          {
            "lang": "Golang",
            "source": "package main\n\nimport (\n    \"bytes\"\n    \"fmt\"\n    \"io\"\n    \"io/ioutil\"\n    \"mime/multipart\"\n    \"net/http\"\n    \"os\"\n    \"path/filepath\"\n)\n\nfunc main() {\n\n    url := \"https://app.nanonets.com/api/v2/ObjectDetection/Model/{{model_id}}/LabelFile/\"\n\n    file, err := os.Open(\"REPLACE_IMAGE_PATH.jpg\")\n    if err != nil {\n        fmt.Println(err)\n        return\n    }\n\n    defer file.Close()\n\n    body := &bytes.Buffer{}\n    writer := multipart.NewWriter(body)\n\n    part, err := writer.CreateFormFile(\"file\", filepath.Base(\"REPLACE_IMAGE_PATH.jpg\"))\n    if err != nil {\n        fmt.Println(err)\n        return\n    }\n    _, err = io.Copy(part, file)\n\n    contentType := writer.FormDataContentType()\n\n    err = writer.Close()\n    if err != nil {\n        fmt.Println(err)\n        return\n    }\n\n    req, _ := http.NewRequest(\"POST\", url, body)\n\n    req.Header.Add(\"Content-Type\", contentType)\n    req.SetBasicAuth(\"REPLACE_API_KEY\", \"\")\n\n    res, _ := http.DefaultClient.Do(req)\n\n    defer res.Body.Close()\n    respBody, _ := ioutil.ReadAll(res.Body)\n\n    fmt.Println(res)\n    fmt.Println(string(respBody))\n\n}\n"
          },
          {
            "lang": "JavaScript",
            "source": "var data = new FormData();\ndata.append('file', fileBLob); // This is file object\n\n\nvar xhr = new XMLHttpRequest();\n\nxhr.addEventListener(\"readystatechange\", function () {\n    if (this.readyState === this.DONE) {\n        console.log(this.responseText);\n    }\n});\n\nxhr.open(\"POST\", \"https://app.nanonets.com/api/v2/ObjectDetection/Model/{{model_id}}/LabelFile/\");\nxhr.setRequestHeader(\"authorization\", \"Basic \" + btoa(\"REPLACE_API_KEY:\"));\n\nxhr.send(data);\n"
          },
          {
            "lang": "Ruby",
            "source": "require 'uri'\nrequire 'net/http'\nrequire 'net/http/post/multipart'\n\nurl = URI('https://app.nanonets.com/api/v2/ObjectDetection/Model/{{model_id}}/LabelFile/')\n\nhttp = Net::HTTP.new(url.host, url.port)\nhttp.use_ssl = true\n\nFile.open('test.jpg') do |jpg|\nrequest = Net::HTTP::Post::Multipart.new(url.path,\n    'file' => UploadIO.new(jpg, 'image/jpeg', 'test.jpg'))\nrequest.basic_auth 'REPLACE_API_KEY', ''\nresponse = Net::HTTP.start(url.host, url.port) do |http|\n    http.request(request)\nend\nputs response.read_body\nend\n"
          },
          {
            "lang": "C#",
            "source": "var client = new RestClient(\"https://app.nanonets.com/api/v2/ObjectDetection/Model/{{model_id}}/LabelFile/\");\nvar request = new RestRequest(Method.POST);\nrequest.AddHeader(\"authorization\", \"Basic \" + Convert.ToBase64String(Encoding.Default.GetBytes(\"REPLACE_API_KEY:\")));\nrequest.AddHeader(\"accept\", \"Multipart/form-data\");\nrequest.AddFile(\"file\", \"REPLACE_IMAGE_PATH.jpg\");\nIRestResponse response = client.Execute(request);\n"
          },
          {
            "lang": "Java",
            "source": "OkHttpClient client = new OkHttpClient();\nprivate static final MediaType MEDIA_TYPE_JPG = MediaType.parse(\"image/jpeg\");\n\nOkHttpClient client = new OkHttpClient();\n\nRequestBody requestBody = new MultipartBody.Builder()\n        .setType(MultipartBody.FORM)\n        .addFormDataPart(\"file\", \"REPLACE_IMAGE_PATH.jpg\", RequestBody.create(MEDIA_TYPE_JPG, new File(\"REPLACE_IMAGE_PATH.jpg\")))\n        .build();\n\nrequest = new Request.Builder()\n        .url(\"https://app.nanonets.com/api/v2/ObjectDetection/Model/{{model_id}}/LabelFile/\")\n        .post(requestBody)\n        .addHeader(\"Authorization\", Credentials.basic(\"REPLACE_API_KEY\", \"\"))\n        .build();\n\nResponse response = client.newCall(request).execute();\n"
          }
        ],
        "x-operation-settings": {
          "AllowDynamicFormParameters": false,
          "AllowDynamicQueryParameters": false,
          "CollectParameters": false,
          "IsMultiContentStreaming": false
        },
        "x-unitTests": []
      }
    },
    "/ObjectDetection/Model/{model_id}/LabelUrls/": {
      "post": {
        "consumes": [
          "application/x-www-form-urlencoded"
        ],
        "description": "Use the model to predict which one of the categories an image (given the image url) belongs to. You can specify multiple image urls.",
        "operationId": "ObjectDetectionModelLabelUrlsByModelIdPost",
        "parameters": [
          {
            "description": "",
            "in": "formData",
            "name": "urls",
            "required": true,
            "type": "string"
          },
          {
            "description": "",
            "in": "path",
            "name": "model_id",
            "required": true,
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "Model Object",
            "examples": {
              "application/json": {
                "message": "Success",
                "result": [
                  {
                    "input": "string",
                    "message": "Success",
                    "prediction": [
                      {
                        "label": "category1",
                        "score": 0.9,
                        "xmax": 100,
                        "xmin": 0,
                        "ymax": 100,
                        "ymin": 0
                      }
                    ]
                  }
                ]
              }
            }
          },
          "202": {
            "description": "Request partially successful. One or more urls might not be correct or got no response"
          },
          "400": {
            "description": "Urls missing. Check if you have an included array of image urls"
          },
          "402": {
            "description": "Exhausted Free API Calls  You have exhausted your free API calls please change your plan <a href=\"https://app.nanonets.com/user/apps\">here</a>"
          },
          "404": {
            "description": "Model does not exists. Check if the model id exists"
          }
        },
        "security": [
          {
            "ApiKey": []
          }
        ],
        "summary": "Prediction for image url",
        "tags": [
          "Object Detection Model Predict"
        ],
        "x-code-samples": [
          {
            "lang": "Nodejs",
            "source": "var request = require('request')\nvar querystring = require('querystring')\nconst form_data = {'urls' : ['https://nanonets.s3-us-west-2.amazonaws.com/test-images/test1.jpg']}\nconst options = {\n    url : 'https://app.nanonets.com/api/v2/ObjectDetection/Model/{{model_id}}/LabelUrls/',\n    body: querystring.stringify(form_data),\n    headers: {\n        'Authorization' : 'Basic ' + Buffer.from('REPLACE_API_KEY' + ':').toString('base64'),\n        'Content-Type': 'application/x-www-form-urlencoded'\n    }\n}\nrequest.post(options, function(err, httpResponse, body) {\n\n  console.log(body)\n});\n"
          },
          {
            "lang": "Python",
            "source": "import requests\n\nurl = 'https://app.nanonets.com/api/v2/ObjectDetection/Model/{{model_id}}/LabelUrls/'\n\nheaders = {\n    'accept': 'application/x-www-form-urlencoded'\n}\n\ndata = {'urls' : ['https://nanonets.s3-us-west-2.amazonaws.com/test-images/test1.jpg']}\n\nresponse = requests.request('POST', url, headers=headers, auth=requests.auth.HTTPBasicAuth('REPLACE_API_KEY', ''), data=data)\n\nprint(response.text)\n"
          },
          {
            "lang": "Shell",
            "source": "curl --request POST \\\n    --url 'https://app.nanonets.com/api/v2/ObjectDetection/Model/{{model_id}}/LabelUrls/' \\\n    --header 'accept: application/x-www-form-urlencoded' \\\n    -d 'urls=https://nanonets.s3-us-west-2.amazonaws.com/test-images/test1.jpg' \\\n    -u 'REPLACE_API_KEY'\n"
          },
          {
            "lang": "Golang",
            "source": "package main\n\nimport (\n    \"bytes\"\n    \"fmt\"\n    \"io/ioutil\"\n    \"net/http\"\n    \"net/url\"\n)\n\nfunc main() {\n\n    labelUrl := \"https://app.nanonets.com/api/v2/ObjectDetection/Model/{{model_id}}/LabelUrls/\"\n\n    data := url.Values{}\n    data.Add(\"urls\", \"https://nanonets.s3-us-west-2.amazonaws.com/test-images/test1.jpg\")\n\n    req, _ := http.NewRequest(\"POST\", labelUrl, bytes.NewBufferString(data.Encode()))\n\n    req.Header.Add(\"Content-Type\", \"application/x-www-form-urlencoded\")\n    req.SetBasicAuth(\"REPLACE_API_KEY\", \"\")\n\n    res, _ := http.DefaultClient.Do(req)\n\n    defer res.Body.Close()\n    body, _ := ioutil.ReadAll(res.Body)\n\n    fmt.Println(res)\n    fmt.Println(string(body))\n\n}\n"
          },
          {
            "lang": "JavaScript",
            "source": "var data = 'urls=https://nanonets.s3-us-west-2.amazonaws.com/test-images/test1.jpg';\n\nvar xhr = new XMLHttpRequest();\n\nxhr.addEventListener(\"readystatechange\", function () {\n    if (this.readyState === this.DONE) {\n        console.log(this.responseText);\n    }\n});\n\nxhr.open(\"POST\", \"https://app.nanonets.com/api/v2/ObjectDetection/Model/{{model_id}}/LabelUrls/\");\nxhr.setRequestHeader(\"Content-Type\", \"application/x-www-form-urlencoded\");\nxhr.setRequestHeader(\"authorization\", \"Basic \" + btoa(\"REPLACE_API_KEY:\"));\n\nxhr.send(data);\n"
          },
          {
            "lang": "Ruby",
            "source": "require 'uri'\nrequire 'net/http'\n\nurl = URI('https://app.nanonets.com/api/v2/ObjectDetection/Model/{{model_id}}/LabelUrls/')\n\nhttp = Net::HTTP.new(url.host, url.port)\nhttp.use_ssl = true\n\nrequest = Net::HTTP::Post.new(url)\nrequest[\"accept\"] = 'application/x-www-form-urlencoded'\nrequest.basic_auth 'REPLACE_API_KEY', ''\n\nrequest.set_form_data({'urls' => ['https://nanonets.s3-us-west-2.amazonaws.com/test-images/test1.jpg']})\n\nresponse = http.request(request)\nputs response.read_body\n"
          },
          {
            "lang": "C#",
            "source": "var client = new RestClient(\"https://app.nanonets.com/api/v2/ObjectDetection/Model/{{model_id}}/LabelUrls/\");\nvar request = new RestRequest(Method.POST);\nrequest.AddHeader(\"authorization\", \"Basic REPLACE_API_KEY\");\nrequest.AddHeader(\"accept\", \"application/x-www-form-urlencoded\");\nrequest.AddParameter(\"urls\", \"https://nanonets.s3-us-west-2.amazonaws.com/test-images/test1.jpg\");\nIRestResponse response = client.Execute(request);\n"
          },
          {
            "lang": "Java",
            "source": "OkHttpClient client = new OkHttpClient();\n\nRequestBody formBody = new FormBody.Builder()\n        .add(\"urls\", \"https://nanonets.s3-us-west-2.amazonaws.com/test-images/test1.jpg\").build();\n\nRequest request = new Request.Builder()\n    .url(\"https://app.nanonets.com/api/v2/ObjectDetection/Model/{{model_id}}/LabelUrls/\")\n    .post(formBody)\n    .addHeader(\"Authorization\", Credentials.basic(\"REPLACE_API_KEY\", \"\"))\n    .build();\n\nResponse response = client.newCall(request).execute();\n"
          }
        ],
        "x-operation-settings": {
          "AllowDynamicFormParameters": false,
          "AllowDynamicQueryParameters": false,
          "CollectParameters": false,
          "IsMultiContentStreaming": false
        },
        "x-unitTests": []
      }
    },
    "/ObjectDetection/Model/{model_id}/Train/": {
      "post": {
        "consumes": [
          "application/x-www-form-urlencoded"
        ],
        "description": "You can use this endpoint to train a model after uploading images for each category. You can use the same endpoint to retrain a model after uploading more images to improve the model.",
        "operationId": "ObjectDetectionModelTrainByModelIdPost",
        "parameters": [
          {
            "description": "",
            "in": "path",
            "name": "model_id",
            "required": true,
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "Model Object",
            "examples": {
              "application/json": {
                "categories": [
                  {
                    "count": 0,
                    "name": "category1"
                  },
                  {
                    "count": 0,
                    "name": "category2"
                  }
                ],
                "model_id": "00000000-0000-0000-0000-000000000000",
                "model_type": "localization",
                "state": 0
              }
            }
          },
          "400": {
            "description": "Model not ready for training. Check if the images for the model are uploaded"
          },
          "404": {
            "description": "Model does not exists. Check if the model id exists"
          }
        },
        "security": [
          {
            "ApiKey": []
          }
        ],
        "summary": "Train Model",
        "tags": [
          "Object Detection Model Train"
        ],
        "x-code-samples": [
          {
            "lang": "Nodejs",
            "source": "var request = require('request')\nconst options = {\n    url : 'https://app.nanonets.com/api/v2/ObjectDetection/Model/{{model_id}}/Train/',\n    headers: {\n        'Authorization' : 'Basic ' + Buffer.from('REPLACE_API_KEY' + ':').toString('base64')\n    }\n}\nrequest.post(options, function(err, httpResponse, body) {\n\n  console.log(body)\n});\n"
          },
          {
            "lang": "Python",
            "source": "import requests\n\nurl = 'https://app.nanonets.com/api/v2/ObjectDetection/Model/{{model_id}}/Train/'\nresponse = requests.request('POST', url, auth=requests.auth.HTTPBasicAuth('REPLACE_API_KEY', ''))\n\nprint(response.text)\n"
          },
          {
            "lang": "Shell",
            "source": "curl --request POST \\\n    --url 'https://app.nanonets.com/api/v2/ObjectDetection/REPLACE_MODEL_ID/Train/' \\\n    -u 'REPLACE_API_KEY'\n"
          },
          {
            "lang": "Golang",
            "source": "package main\n\nimport (\n    \"fmt\"\n    \"net/http\"\n    \"io/ioutil\"\n)\n\nfunc main() {\n\n    url := \"https://app.nanonets.com/api/v2/ObjectDetection/Model/{{model_id}}/Train/\"\n\n    req, _ := http.NewRequest(\"POST\", url, nil)\n\n    req.SetBasicAuth(\"REPLACE_API_KEY\", \"\")\n\n    res, _ := http.DefaultClient.Do(req)\n\n    defer res.Body.Close()\n    body, _ := ioutil.ReadAll(res.Body)\n\n    fmt.Println(res)\n    fmt.Println(string(body))\n\n}"
          },
          {
            "lang": "JavaScript",
            "source": "var data = null;\n\nvar xhr = new XMLHttpRequest();\n\nxhr.addEventListener(\"readystatechange\", function () {\nif (this.readyState === this.DONE) {\n    console.log(this.responseText);\n}\n});\n\nxhr.open(\"POST\", \"https://app.nanonets.com/api/v2/ObjectDetection/REPLACE_MODEL_ID/Train/\");\nxhr.setRequestHeader(\"authorization\", \"Basic \" + btoa(\"REPLACE_API_KEY:\"));\n\nxhr.send(data);\n"
          },
          {
            "lang": "Ruby",
            "source": "require 'uri' require 'net/http'\nurl = URI('https://app.nanonets.com/api/v2/ObjectDetection/Model/{{model_id}}/Train/')\nhttp = Net::HTTP.new(url.host, url.port) http.use_ssl = true\nrequest = Net::HTTP::Post.new(url) request.basic_auth 'REPLACE_API_KEY', ''\nresponse = http.request(request) puts response.read_body"
          },
          {
            "lang": "C#",
            "source": "var client = new RestClient(\"https://app.nanonets.com/api/v2/ObjectDetection/Model/{{model_id}}/Train/\");\nvar request = new RestRequest(Method.POST);\nrequest.AddHeader(\"authorization\", \"Basic REPLACE_API_KEY\");\nIRestResponse response = client.Execute(request);"
          },
          {
            "lang": "Java",
            "source": "OkHttpClient client = new OkHttpClient();\n\nRequest request = new Request.Builder()\n  .url(\"https://app.nanonets.com/api/v2/ObjectDetection/Model/{{model_id}}/Train/\")\n  .post(null)\n  .addHeader(\"Authorization\", Credentials.basic(\"REPLACE_API_KEY\", \"\"))\n  .build();\n\nResponse response = client.newCall(request).execute();"
          }
        ],
        "x-operation-settings": {
          "AllowDynamicFormParameters": false,
          "AllowDynamicQueryParameters": false,
          "CollectParameters": false,
          "IsMultiContentStreaming": false
        },
        "x-unitTests": []
      }
    },
    "/ObjectDetection/Model/{model_id}/UploadFile/": {
      "post": {
        "consumes": [
          "multipart/form-data"
        ],
        "description": "You can use this endpoint to upload training images for a category (for the specified model) using locally stored files. You will receive model information along with total number of images per category on successful execution. <br>Note: Filename in Data must be the same as that of the uploaded image name.",
        "operationId": "ObjectDetectionModelUploadFileByModelIdPost",
        "parameters": [
          {
            "description": "",
            "in": "formData",
            "name": "data",
            "required": true,
            "type": "string"
          },
          {
            "description": "",
            "in": "formData",
            "name": "file",
            "required": true,
            "type": "file"
          },
          {
            "description": "",
            "in": "path",
            "name": "model_id",
            "required": true,
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "Model Object",
            "examples": {
              "application/json": {
                "Data": [
                  {
                    "filename": "example.jpeg",
                    "id": "00000000-0000-0000-0000-000000000000",
                    "object": [
                      {
                        "bndbox": {
                          "xmax": 100,
                          "xmin": 1,
                          "ymax": 100,
                          "ymin": 1
                        },
                        "name": "category1"
                      }
                    ],
                    "size": {
                      "height": 1024,
                      "width": 1024
                    }
                  }
                ],
                "Meta": {
                  "Accuracy": 0,
                  "Categories": [
                    {
                      "count": 0,
                      "name": "category1"
                    },
                    {
                      "count": 0,
                      "name": "category2"
                    }
                  ],
                  "ModelID": "00000000-0000-0000-0000-000000000000",
                  "ModelType": "localization",
                  "State": 0,
                  "Status": "Current Status"
                }
              }
            }
          },
          "400": {
            "description": "Category not valid for model. Check if this model has the category used in the request\n\nOR\n\nFile missing. Check if you have included the file in the request\n\nOR\n\nIncorrect image. Check if file you included is valid PNG or JPEG file"
          },
          "404": {
            "description": "Model does not exists. Check if the model id exists"
          }
        },
        "summary": "Upload training images by File",
        "tags": [
          "Object Detection Model Upload"
        ],
        "x-code-samples": [
          {
            "lang": "Nodejs",
            "source": "var request = require('request')\nvar fs = require('fs')\nconst form_data = {'file' : fs.createReadStream('REPLACE_IMAGE_PATH.jpg'), 'data' : JSON.stringify([\n  {\"filename\":\"REPLACE_IMAGE_FILENAME.jpg\", \"object\":[{\"name\":\"category1\", \"bndbox\": {\"xmin\": 1,\"ymin\":1,\"xmax\": 100, \"ymax\": 100}}]}])}\n\nconst options = {\n    url : 'https://app.nanonets.com/api/v2/ObjectDetection/Model/{{model_id}}/UploadFile/',\n    formData: form_data,\n    headers: {\n        'Authorization' : 'Basic ' + Buffer.from('REPLACE_API_KEY' + ':').toString('base64')\n    }\n}\nrequest.post(options, function(err, httpResponse, body) {\n\n  console.log(body)\n});\n"
          },
          {
            "lang": "Python",
            "source": "import requests\n\nurl = 'https://app.nanonets.com/api/v2/ObjectDetection/Model/{{model_id}}/UploadFile/'\n\ndata = {'file' :open('REPLACE_IMAGE_PATH.jpg', 'rb'), 'data' :('', '[{\"filename\":\"REPLACE_IMAGE_FILENAME.jpg\", \"object\": [{\"name\":\"category1\", \"bndbox\": {\"xmin\": 1,\"ymin\": 1,\"xmax\": 100, \"ymax\": 100}}]}]')}\n\nresponse = requests.post(url, auth=requests.auth.HTTPBasicAuth('REPLACE_API_KEY', ''), files=data)\n\nprint(response.text)"
          },
          {
            "lang": "Shell",
            "source": "curl --request POST \\\n    --url 'https://app.nanonets.com/api/v2/ObjectDetection/Model/{{model_id}}/UploadFile/' \\\n    --header 'accept: multipart/form-data' \\\n    -u 'REPLACE_API_KEY' \\\n    -F 'data=[{\"filename\":\"REPLACE_IMAGE_FILENAME.jpg\", \"object\": [{\"name\":\"category1\", \"bndbox\": {\"xmin\": 1,\"ymin\": 1,\"xmax\": 100, \"ymax\": 100}}]}]' \\\n    -F 'file=@REPLACE_IMAGE_PATH.jpg'\n"
          },
          {
            "lang": "Golang",
            "source": "package main\n\nimport (\n    \"bytes\"\n    \"fmt\"\n    \"io\"\n    \"io/ioutil\"\n    \"mime/multipart\"\n    \"net/http\"\n    \"os\"\n    \"path/filepath\"\n)\n\nfunc main() {\n\n    url := \"https://app.nanonets.com/api/v2/ObjectDetection/Model/{{model_id}}/UploadFile/\"\n\n    file, err := os.Open(\"test.jpg\")\n    if err != nil {\n        fmt.Println(err)\n        return\n    }\n\n    defer file.Close()\n\n    body := &bytes.Buffer{}\n    writer := multipart.NewWriter(body)\n\n    part, err := writer.CreateFormFile(\"file\", filepath.Base(\"test.jpg\"))\n    if err != nil {\n        fmt.Println(err)\n        return\n    }\n    _, err = io.Copy(part, file)\n\n    writer.WriteField(\"data\", `[{\"filename\":\"REPLACE_IMAGE_FILENAME.jpg\", \"object\": [{\"name\":\"category1\", \"bndbox\": {\"xmin\": 1,\"ymin\": 1,\"xmax\": 100, \"ymax\": 100}}]}]`)\n    contentType := writer.FormDataContentType()\n\n    err = writer.Close()\n    if err != nil {\n        fmt.Println(err)\n        return\n    }\n\n    req, _ := http.NewRequest(\"POST\", url, body)\n\n    req.Header.Add(\"Content-Type\", contentType)\n    req.SetBasicAuth(\"REPLACE_API_KEY\", \"\")\n\n    res, _ := http.DefaultClient.Do(req)\n\n    defer res.Body.Close()\n    outputBody, _ := ioutil.ReadAll(res.Body)\n\n    fmt.Println(res)\n    fmt.Println(string(outputBody))\n\n}\n"
          },
          {
            "lang": "JavaScript",
            "source": "var data = new FormData();\ndata.append('data', '[{\"filename\":\"REPLACE_IMAGE_FILENAME.jpg\", \"object\": [{\"name\":\"category1\", \"bndbox\": {\"xmin\": 1,\"ymin\": 1,\"xmax\": 100, \"ymax\": 100}}]}]');\ndata.append('file', file); // file is a Blob object\n\nvar xhr = new XMLHttpRequest();\n\nvar xhr = new XMLHttpRequest();\n\nxhr.addEventListener(\"readystatechange\", function () {\n    if (this.readyState === this.DONE) {\n        console.log(this.responseText);\n    }\n});\n\nxhr.open(\"POST\", \"https://app.nanonets.com/api/v2/ObjectDetection/Model/{{model_id}}/UploadFile/\");\nxhr.setRequestHeader(\"authorization\", \"Basic \" + btoa(\"REPLACE_API_KEY:\"));\n\nxhr.send(data);\n"
          },
          {
            "lang": "Ruby",
            "source": "require 'uri'\nrequire 'net/http'\nrequire 'net/http/post/multipart'\n\nurl = URI('https://app.nanonets.com/api/v2/ObjectDetection/Model/{{model_id}}/UploadFile/')\n\nhttp = Net::HTTP.new(url.host, url.port)\nhttp.use_ssl = true\n\nFile.open('REPLACE_IMAGE_PATH.jpg') do |jpg|\nrequest = Net::HTTP::Post::Multipart.new(url.path,\n    'file' => UploadIO.new(jpg, 'image/jpeg', 'REPLACE_IMAGE_PATH.jpg'),\n    'data' => '[{\"filename\":\"REPLACE_IMAGE_FILENAME.jpg\", \"object\":[{\"name\":\"category1\", \"bndbox\":{\"xmin\":1,\"ymin\":1,\"xmax\":100,\"ymax\":100}}]}]')\nrequest.basic_auth 'REPLACE_API_KEY', ''\nresponse = Net::HTTP.start(url.host, url.port) do |http|\n    http.request(request)\nend\nputs response.read_body\nend\n"
          },
          {
            "lang": "C#",
            "source": "var client = new RestClient(\"https://app.nanonets.com/api/v2/ObjectDetection/UploadFile/\");\nvar request = new RestRequest(Method.POST);\nrequest.AddHeader(\"authorization\", \"Basic REPLACE_API_KEY\");\nrequest.AddHeader(\"accept\", \"Multipart/form-data\");\nrequest.AddParameter(\"data\", \"[{\\\"filename\\\":\\\"REPLACE_IMAGE_FILENAME.jpg\\\", \\\"object\\\": [{\\\"name\\\":\\\"category1\\\", \\\"bndbox\\\": {\\\"xmin\\\": 1,\\\"ymin\\\": 1,\\\"xmax\\\": 100, \\\"ymax\\\": 100}}]}]\");\nrequest.AddFile(\"file\", \"REPLACE_IMAGE_PATH.jpg\");\nIRestResponse response = client.Execute(request);\"\n"
          },
          {
            "lang": "Java",
            "source": "private static final MediaType MEDIA_TYPE_JPG = MediaType.parse(\"image/jpeg\");\n\nOkHttpClient client = new OkHttpClient();\n\nRequestBody requestBody = new MultipartBody.Builder()\n        .setType(MultipartBody.FORM)\n        .addFormDataPart(\"data\", \"[{\\\"filename\\\":\\\"REPLACE_IMAGE_FILENAME.jpg\\\", \\\"object\\\": [{\\\"name\\\":\\\"category1\\\", \\\"bndbox\\\": {\\\"xmin\\\": 1,\\\"ymin\\\": 1,\\\"xmax\\\": 100, \\\"ymax\\\": 100}}]}]\")\n        .addFormDataPart(\"file\", \"REPLACE_IMAGE_PATH.jpg\", RequestBody.create(MEDIA_TYPE_JPG, new File(\"REPLACE_IMAGE_PATH.jpg\")))\n        .build();\n\nrequest = new Request.Builder()\n        .url(\"https://app.nanonets.com/api/v2/ObjectDetection/Model/{{model_id}}/UploadFile/\")\n        .post(requestBody)\n        .addHeader(\"Authorization\", Credentials.basic(\"REPLACE_API_KEY\", \"\"))\n        .build();\n\nResponse response = client.newCall(request).execute();\"\n"
          }
        ]
      }
    },
    "/ObjectDetection/Model/{model_id}/UploadUrls/": {
      "post": {
        "description": "You can use this endpoint to upload training images for a category (for the specified model) by image urls. You can upload multiple images in the same request by adding an array of urls. You will receive model information along with total number of images per category on successful execution.",
        "operationId": "ObjectDetectionModelUploadUrlsByModelIdPost",
        "parameters": [
          {
            "description": "",
            "in": "body",
            "name": "Body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/UploadTrainingImagesByUrlrequest"
            }
          },
          {
            "description": "",
            "in": "header",
            "name": "Content-Type",
            "required": true,
            "type": "string"
          },
          {
            "description": "",
            "in": "path",
            "name": "model_id",
            "required": true,
            "type": "string"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "Model Object",
            "examples": {
              "application/json": {
                "Data": [
                  {
                    "filename": "example.jpeg",
                    "id": "00000000-0000-0000-0000-000000000000",
                    "object": [
                      {
                        "bndbox": {
                          "xmax": 100,
                          "xmin": 1,
                          "ymax": 100,
                          "ymin": 1
                        },
                        "name": "category1"
                      }
                    ],
                    "size": {
                      "height": 1024,
                      "width": 1024
                    }
                  }
                ],
                "Meta": {
                  "Accuracy": 0,
                  "Categories": [
                    {
                      "count": 0,
                      "name": "category1"
                    },
                    {
                      "count": 0,
                      "name": "category2"
                    }
                  ],
                  "ModelID": "00000000-0000-0000-0000-000000000000",
                  "ModelType": "localization",
                  "State": 0,
                  "Status": "Current Status"
                }
              }
            }
          },
          "202": {
            "description": "Request partially successful. One or more urls might not be correct or got no response"
          },
          "400": {
            "description": "Category not valid for model. Check if this model has the category used in the request\n\nOR\n\nUrls missing. Check if you have included an array of image urls"
          },
          "404": {
            "description": "Model does not exists. Check if the model id exists"
          }
        },
        "security": [
          {
            "ApiKey": []
          }
        ],
        "summary": "Upload training images by Url",
        "tags": [
          "Object Detection Model Upload"
        ],
        "x-code-samples": [
          {
            "lang": "Nodejs",
            "source": "var request = require('request')\nconst form_data = {\"data\": [{\"filename\":\"https://nanonets.s3-us-west-2.amazonaws.com/test-images/test1.jpg\", \"object\": [{\"name\":\"category1\", \"bndbox\": {\"xmin\": 1,\"ymin\": 1,\"xmax\": 100, \"ymax\": 100}}, {\"name\":\"category2\", \"bndbox\": {\"xmin\": 1,\"ymin\": 1,\"xmax\": 100, \"ymax\": 100}}]}], \"urls\": [\"https://nanonets.s3-us-west-2.amazonaws.com/test-images/test1.jpg\"]}\nconst options = {\n    url : 'https://app.nanonets.com/api/v2/ObjectDetection/Model/{model_id}/UploadUrls/',\n    body: JSON.stringify(form_data),\n    headers: {\n        'Authorization' : 'Basic ' + Buffer.from('REPLACE_API_KEY' + ':').toString('base64'),\n        'Content-Type': \"application/json\"\n    }\n}\nrequest.post(options, function(err, httpResponse, body) {\n\n  console.log(body)\n});\n"
          },
          {
            "lang": "Python",
            "source": "import requests\n\nurl = \"https://app.nanonets.com/api/v2/ObjectDetection/Model/{model_id}/UploadUrls/\"\n\npayload = \"{\\\"data\\\": [{\\\"filename\\\":\\\"https://nanonets.s3-us-west-2.amazonaws.com/test-images/test1.jpg\\\", \\\"object\\\": [{\\\"name\\\":\\\"category1\\\", \\\"bndbox\\\": {\\\"xmin\\\": 1,\\\"ymin\\\": 1,\\\"xmax\\\": 100, \\\"ymax\\\": 100}}, {\\\"name\\\":\\\"category2\\\", \\\"bndbox\\\": {\\\"xmin\\\": 1,\\\"ymin\\\": 1,\\\"xmax\\\": 100, \\\"ymax\\\": 100}}]}], \\\"urls\\\": [\\\"https://nanonets.s3-us-west-2.amazonaws.com/test-images/test1.jpg\\\"]}\"\nheaders = {\n    'Content-Type': \"application/json\"\n}\n\nresponse = requests.request(\"POST\", url, auth=requests.auth.HTTPBasicAuth('REPLACE_API_KEY', ''), data=payload, headers=headers)\n\nprint(response.text)\n"
          },
          {
            "lang": "Shell",
            "source": "curl --request POST \\\n    --url https://app.nanonets.com/api/v2/ObjectDetection/Model/{model_id}/UploadUrls/ \\\n    -u 'REPLACE_API_KEY' \\\n    -H 'Content-Type: application/json' \\\n    --data '{\"data\": [{\"filename\":\"https://nanonets.s3-us-west-2.amazonaws.com/test-images/test1.jpg\", \"object\": [{\"name\":\"category1\", \"bndbox\": {\"xmin\": 1,\"ymin\": 1,\"xmax\": 100, \"ymax\": 100}}, {\"name\":\"category2\", \"bndbox\": {\"xmin\": 1,\"ymin\": 1,\"xmax\": 100, \"ymax\": 100}}]}], \"urls\": [\"https://nanonets.s3-us-west-2.amazonaws.com/test-images/test1.jpg\"]}'\n"
          },
          {
            "lang": "Golang",
            "source": "package main\n\nimport (\n    \"fmt\"\n    \"io/ioutil\"\n    \"net/http\"\n    \"strings\"\n)\n\nfunc main() {\n\n    url := \"https://app.nanonets.com/api/v2/ObjectDetection/Model/REPLACE_MODEL_ID/UploadUrls/\"\n\n    payload := strings.NewReader(\"{\\\"data\\\": [{\\\"filename\\\":\\\"https://nanonets.s3-us-west-2.amazonaws.com/test-images/test1.jpg\\\", \\\"object\\\": [{\\\"name\\\":\\\"category1\\\", \\\"bndbox\\\": {\\\"xmin\\\": 1,\\\"ymin\\\": 1,\\\"xmax\\\": 100, \\\"ymax\\\": 100}}, {\\\"name\\\":\\\"category2\\\", \\\"bndbox\\\": {\\\"xmin\\\": 1,\\\"ymin\\\": 1,\\\"xmax\\\": 100, \\\"ymax\\\": 100}}]}], \\\"urls\\\": [\\\"https://nanonets.s3-us-west-2.amazonaws.com/test-images/test1.jpg\\\"]}\")\n\n    req, _ := http.NewRequest(\"POST\", url, payload)\n\n    req.Header.Add(\"Content-Type\", \"application/json\")\n    req.SetBasicAuth(\"REPLACE_API_KEY\", \"\")\n\n    res, _ := http.DefaultClient.Do(req)\n\n    defer res.Body.Close()\n    body, _ := ioutil.ReadAll(res.Body)\n\n    fmt.Println(res)\n    fmt.Println(string(body))\n\n}\n"
          },
          {
            "lang": "JavaScript",
            "source": "var data = JSON.stringify({\n  \"data\": [\n    {\n      \"filename\": \"https://nanonets.s3-us-west-2.amazonaws.com/test-images/test1.jpg\",\n      \"object\": [\n        {\n          \"name\": \"category1\",\n          \"bndbox\": {\n            \"xmin\": 1,\n            \"ymin\": 1,\n            \"xmax\": 100,\n            \"ymax\": 100\n          }\n        },\n        {\n          \"name\": \"category2\",\n          \"bndbox\": {\n            \"xmin\": 1,\n            \"ymin\": 1,\n            \"xmax\": 100,\n            \"ymax\": 100\n          }\n        }\n      ]\n    }\n  ],\n  \"urls\": [\n    \"https://nanonets.s3-us-west-2.amazonaws.com/test-images/test1.jpg\"\n  ]\n});\n\nvar xhr = new XMLHttpRequest();\nxhr.withCredentials = true;\n\nxhr.addEventListener(\"readystatechange\", function () {\n  if (this.readyState === 4) {\n    console.log(this.responseText);\n  }\n});\n\nxhr.open(\"POST\", \"https://app.nanonets.com/api/v2/ObjectDetection/Model/REPLACE_MODEL_ID/UploadUrls/\");\nxhr.setRequestHeader(\"Content-Type\", \"application/json\");\nxhr.setRequestHeader(\"authorization\", \"Basic \" + btoa(\"REPLACE_API_KEY:\"));\n\nxhr.send(data);"
          },
          {
            "lang": "Ruby",
            "source": "require 'uri'\nrequire 'net/http'\n\nurl = URI(\"https://app.nanonets.com/api/v2/ObjectDetection/Model/REPLACE_MODEL_ID/UploadUrls/\")\n\nhttp = Net::HTTP.new(url.host, url.port)\nhttp.use_ssl = true\n\nrequest = Net::HTTP::Post.new(url)\nrequest[\"Content-Type\"] = 'application/json'\nrequest.basic_auth 'REPLACE_API_KEY', ''\nrequest.body = \"{\\\"data\\\": [{\\\"filename\\\":\\\"https://nanonets.s3-us-west-2.amazonaws.com/test-images/test1.jpg\\\", \\\"object\\\": [{\\\"name\\\":\\\"category1\\\", \\\"bndbox\\\": {\\\"xmin\\\": 1,\\\"ymin\\\": 1,\\\"xmax\\\": 100, \\\"ymax\\\": 100}}, {\\\"name\\\":\\\"category2\\\", \\\"bndbox\\\": {\\\"xmin\\\": 1,\\\"ymin\\\": 1,\\\"xmax\\\": 100, \\\"ymax\\\": 100}}]}], \\\"urls\\\": [\\\"https://nanonets.s3-us-west-2.amazonaws.com/test-images/test1.jpg\\\"]}\"\n\nresponse = http.request(request)\nputs response.read_body\"\n"
          },
          {
            "lang": "C#",
            "source": "var client = new RestClient(\"https://app.nanonets.com/api/v2/ObjectDetection/Model/REPLACE_MODEL_ID/UploadUrls/\");\nvar request = new RestRequest(Method.POST);\nrequest.AddHeader(\"authorization\", \"Basic REPLACE_API_KEY\");\nrequest.AddHeader(\"Content-Type\", \"application/json\");\nrequest.AddParameter(\"undefined\", \" {\"data\": [{\"filename\":\"https://nanonets.s3-us-west-2.amazonaws.com/test-images/test1.jpg\", \"object\": [{\"name\":\"category1\", \"bndbox\": {\"xmin\": 1,\"ymin\": 1,\"xmax\": 100, \"ymax\": 100}}, {\"name\":\"category2\", \"bndbox\": {\"xmin\": 1,\"ymin\": 1,\"xmax\": 100, \"ymax\": 100}}]}], \"urls\": [\"https://nanonets.s3-us-west-2.amazonaws.com/test-images/test1.jpg\"]}\", ParameterType.RequestBody);\nIRestResponse response = client.Execute(request);\n"
          },
          {
            "lang": "Java",
            "source": "OkHttpClient client = new OkHttpClient();\n\nMediaType mediaType = MediaType.parse(\"application/json\");\nRequestBody body = RequestBody.create(mediaType, \"\n{\"data\": [{\"filename\":\"https://nanonets.s3-us-west-2.amazonaws.com/test-images/test1.jpg\", \"object\": [{\"name\":\"category1\", \"bndbox\": {\"xmin\": 1,\"ymin\": 1,\"xmax\": 100, \"ymax\": 100}}, {\"name\":\"category2\", \"bndbox\": {\"xmin\": 1,\"ymin\": 1,\"xmax\": 100, \"ymax\": 100}}]}], \"urls\": [\"https://nanonets.s3-us-west-2.amazonaws.com/test-images/test1.jpg\"]}\");\nRequest request = new Request.Builder()\n  .url(\"https://app.nanonets.com/api/v2/ObjectDetection/Model/REPLACE_MODEL_ID/UploadUrls/\")\n  .post(body)\n  .addHeader(\"Content-Type\", \"application/json\")\n  .addHeader(\"Authorization\", Credentials.basic(\"REPLACE_API_KEY\", \"\"))\n  .build();\n\nResponse response = client.newCall(request).execute();"
          }
        ],
        "x-operation-settings": {
          "AllowDynamicFormParameters": false,
          "AllowDynamicQueryParameters": false,
          "CollectParameters": false,
          "IsMultiContentStreaming": false
        },
        "x-unitTests": []
      }
    },
    "/ObjectDetection/Models/": {
      "get": {
        "description": "This endpoint returns information of all models created by user.",
        "operationId": "ObjectDetectionModelsGet",
        "parameters": [],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "Model Object",
            "examples": {
              "application/json": [
                {
                  "categories": [
                    {
                      "count": 0,
                      "name": "category1"
                    },
                    {
                      "count": 0,
                      "name": "category2"
                    }
                  ],
                  "model_id": "00000000-0000-0000-0000-000000000000",
                  "model_type": "localization",
                  "state": 0
                }
              ]
            }
          }
        },
        "security": [
          {
            "ApiKey": []
          }
        ],
        "summary": "Get All Models",
        "tags": [
          "Object Detection Model"
        ],
        "x-code-samples": [
          {
            "lang": "Nodejs",
            "source": "var request = require('request')\nconst options = {\n    url : 'https://app.nanonets.com/api/v2/ObjectDetection/Models/',\n    headers: {\n        'Authorization' : 'Basic ' + Buffer.from('REPLACE_API_KEY' + ':').toString('base64')\n    }\n}\nrequest.get(options, function(err, httpResponse, body) {\n\n  console.log(body)\n});\n"
          },
          {
            "lang": "Python",
            "source": "import requests\n\nurl = 'https://app.nanonets.com/api/v2/ObjectDetection/Models/'\n\nresponse = requests.request('GET', url, auth=requests.auth.HTTPBasicAuth('REPLACE_API_KEY', ''))\n\nprint(response.text)"
          },
          {
            "lang": "Shell",
            "source": "curl --request GET \\\n  --url https://app.nanonets.com/api/v2/ObjectDetection/Models/ \\\n  -u 'REPLACE_API_KEY'"
          },
          {
            "lang": "Golang",
            "source": "package main\n\nimport (\n    \"fmt\"\n    \"net/http\"\n    \"io/ioutil\"\n)\n\nfunc main() {\n\n    url := \"https://app.nanonets.com/api/v2/ObjectDetection/Models/\"\n\n    req, _ := http.NewRequest(\"GET\", url, nil)\n\n    req.SetBasicAuth(\"REPLACE_API_KEY\", \"\")\n\n    res, _ := http.DefaultClient.Do(req)\n\n    defer res.Body.Close()\n    body, _ := ioutil.ReadAll(res.Body)\n\n    fmt.Println(res)\n    fmt.Println(string(body))\n\n}"
          },
          {
            "lang": "JavaScript",
            "source": "var data = null;\n\nvar xhr = new XMLHttpRequest();\n\nxhr.addEventListener(\"readystatechange\", function () {\n  if (this.readyState === this.DONE) {\n    console.log(this.responseText);\n  }\n});\n\nxhr.open(\"GET\", \"https://app.nanonets.com/api/v2/ObjectDetection/Models/\");\nxhr.setRequestHeader(\"authorization\", \"Basic \" + btoa(\"REPLACE_API_KEY:\"));\n\nxhr.send(data);"
          },
          {
            "lang": "Ruby",
            "source": "require 'uri' require 'net/http'\nurl = URI('https://app.nanonets.com/api/v2/ObjectDetection/Models/')\nhttp = Net::HTTP.new(url.host, url.port) http.use_ssl = true\nrequest = Net::HTTP::Get.new(url) request.basic_auth 'REPLACE_API_KEY', '' response = http.request(request)\nputs response.read_body"
          },
          {
            "lang": "C#",
            "source": "var client = new RestClient(\"https://app.nanonets.com/api/v2/ObjectDetection/Models/\");\nvar request = new RestRequest(Method.GET);\nrequest.AddHeader(\"authorization\", \"Basic \" + Convert.ToBase64String(Encoding.Default.GetBytes(\"REPLACE_API_KEY:\")));\nIRestResponse response = client.Execute(request);\n"
          },
          {
            "lang": "Java",
            "source": "OkHttpClient client = new OkHttpClient();\n\nRequest request = new Request.Builder()\n  .url(\"https://app.nanonets.com/api/v2/ObjectDetection/Models/\")\n  .get()\n  .addHeader(\"authorization\", Credentials.basic(\"REPLACE_API_KEY\", \"\"))\n  .build();\n\nResponse response = client.newCall(request).execute();"
          }
        ],
        "x-operation-settings": {
          "AllowDynamicFormParameters": false,
          "AllowDynamicQueryParameters": false,
          "CollectParameters": false,
          "IsMultiContentStreaming": false
        },
        "x-unitTests": [
          {
            "expectedResponse": {
              "headers": {},
              "x-allowExtraHeaders": true,
              "x-arrayCheckCount": false,
              "x-arrayOrderedMatching": false,
              "x-bodyMatchMode": "NONE",
              "x-matchResponseSchema": true
            },
            "request": {
              "method": "GET",
              "uri": "/ObjectDetection/Models/"
            },
            "x-testDescription": "",
            "x-testEnabled": true,
            "x-testName": "Get All Models",
            "x-testShouldPass": true
          }
        ]
      }
    }
  },
  "produces": [
    "application/json"
  ],
  "schemes": [
    "https"
  ],
  "securityDefinitions": {
    "ApiKey": {
      "description": "When you sign up for an account, you are given your first API key. To do so please [follow this link.](https://app.nanonets.com/#keys)\n\nAlso you can generate additional API keys, and delete API keys (as you may need to rotate your keys in the future). NanoNets expects for the API key to be included in all API requests to the server in a header that looks like the following:\n\n<span style=\"color:red\">Authorization: REPLACE_API_KEY</span>\n\nAll API requests must be made over HTTPS. Calls made over plain HTTP will fail. API requests without authentication will also fail.",
      "type": "basic",
      "x-skip-client-authentication": false,
      "x-testValue": []
    }
  },
  "swagger": "2.0",
  "tags": [
    {
      "description": "You can create new image classification model [here](https://app.nanonets.com/#/ic/create)",
      "name": "Image Classification Model"
    },
    {
      "description": "You can create new object detection model using a GUI [here](https://app.nanonets.com/#/OD/create).\n\nYou can also check out a complete code sample in the following languages:\n\n[Golang](https://github.com/NanoNets/object-detection-sample-golang)\n\n[Python](https://github.com/NanoNets/object-detection-sample-python)\n\n[Nodejs](https://github.com/NanoNets/object-detection-sample-nodejs)",
      "name": "Object Detection Model"
    },
    {
      "description": "",
      "name": "Multi Label Classification Model"
    }
  ],
  "x-tagGroups": [
    {
      "name": "OCR",
      "tags": [
        "OCR Model",
        "OCR Upload",
        "OCR Train",
        "OCR Predict"
      ]
    },
    {
      "name": "Image Classification",
      "tags": [
        "Image Classification Model",
        "Image Classification Model Upload",
        "Image Classification Model Train",
        "Image Classification Model Predict"
      ]
    },
    {
      "name": "Object Detection",
      "tags": [
        "Object Detection Model",
        "Object Detection Model Upload",
        "Object Detection Model Train",
        "Object Detection Model Predict"
      ]
    },
    {
      "name": "Multi Label Image Classification",
      "tags": [
        "Multi Label Classification Model",
        "Multi Label Classification Upload",
        "Multi Label Classification Train",
        "Multi Label Classification Predict"
      ]
    }
  ]
}